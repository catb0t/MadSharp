namespace MadGame.MadNFMM
{
    //package nfm.open;
/* CarDefine - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.io.BufferedReader;
//importjava.io.ByteArrayInputStream;
//importjava.io.DataInputStream;
//importjava.io.File;
//importjava.io.FileReader;
//importjava.io.InputStreamReader;
//importjava.io.PrintWriter;
//importjava.net.Socket;
//importjava.net.URL;
//importjava.util.concurrent.ThreadLocalRandom;
//importjava.util.zip.ZipEntry;
//importjava.util.zip.ZipInputStream;

class CarDefine implements Runnable {

    public static final int THIRTY_SIX = 36; // MAX CUSTOM CARS - NCARS
    public static final int SIXTEEN = 16; // NCARS
    public static final int FIFTY_SIX = 56; // NCARS + MAX CUSTOM CARS
    public static final int FORTY = 40; // MAX CUSTOM CARS LOAD

    private static ContO[] bco;
    private static Thread carloader;
    private static Thread actionloader;
    private static Thread stageaction;
    static final int[][] swits = {
            {
                    50, 185, 282
            }, {
                    100, 200, 310
            }, {
                    60, 180, 275
            }, {
                    76, 195, 298
            }, {
                    70, 170, 275
            }, {
                    70, 202, 293
            }, {
                    60, 170, 289
            }, {
                    70, 206, 291
            }, {
                    90, 210, 295
            }, {
                    90, 190, 276
            }, {
                    70, 200, 295
            }, {
                    50, 160, 270
            }, {
                    90, 200, 305
            }, {
                    50, 130, 210
            }, {
                    80, 200, 300
            }, {
                    70, 210, 290
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }, {
                    0, 0, 0
            }
    };
    static final float[][] acelf = {
            {
                    11.0F, 5.0F, 3.0F
            }, {
                    14.0F, 7.0F, 5.0F
            }, {
                    10.0F, 5.0F, 3.5F
            }, {
                    11.0F, 6.0F, 3.5F
            }, {
                    10.0F, 5.0F, 3.5F
            }, {
                    12.0F, 6.0F, 3.0F
            }, {
                    7.0F, 9.0F, 4.0F
            }, {
                    11.0F, 5.0F, 3.0F
            }, {
                    12.0F, 7.0F, 4.0F
            }, {
                    12.0F, 7.0F, 3.5F
            }, {
                    11.5F, 6.5F, 3.5F
            }, {
                    9.0F, 5.0F, 3.0F
            }, {
                    13.0F, 7.0F, 4.5F
            }, {
                    7.5F, 3.5F, 3.0F
            }, {
                    11.0F, 7.5F, 4.0F
            }, {
                    12.0F, 6.0F, 3.5F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }, {
                    0.0F, 0.0F, 0.0F
            }
    };
    static final int[] handb = {
            7, 10, 7, 15, 12, 8, 9, 10, 5, 7, 8, 10, 8, 12, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final float[] airs = {
            1.0F, 1.2F, 0.95F, 1.0F, 2.2F, 1.0F, 0.9F, 0.8F, 1.0F, 0.9F, 1.15F, 0.8F, 1.0F, 0.3F, 1.3F, 1.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F
    };
    static final int[] airc = {
            70, 30, 40, 40, 30, 50, 40, 90, 40, 50, 75, 10, 50, 0, 100, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] turn = {
            6, 9, 5, 7, 8, 7, 5, 5, 9, 7, 7, 4, 6, 5, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final float[] grip = {
            20.0F, 27.0F, 18.0F, 22.0F, 19.0F, 20.0F, 25.0F, 20.0F, 19.0F, 24.0F, 22.5F, 25.0F, 30.0F, 27.0F, 25.0F,
            27.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F
    };
    static final float[] bounce = {
            1.2F, 1.05F, 1.3F, 1.15F, 1.3F, 1.2F, 1.15F, 1.1F, 1.2F, 1.1F, 1.15F, 0.8F, 1.05F, 0.8F, 1.1F, 1.15F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F
    };
    static final float[] simag = {
            0.9F, 0.85F, 1.05F, 0.9F, 0.85F, 0.9F, 1.05F, 0.9F, 1.0F, 1.05F, 0.9F, 1.1F, 0.9F, 1.3F, 0.9F, 1.15F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F
    };
    static final float[] moment = {
            1.3F, 0.75F, 1.4F, 1.2F, 1.1F, 1.38F, 1.43F, 1.48F, 1.35F, 1.7F, 1.42F, 2.0F, 1.26F, 3.0F, 1.5F, 2.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F
    };
    static final float[] comprad = {
            0.5F, 0.4F, 0.8F, 0.5F, 0.4F, 0.5F, 0.5F, 0.5F, 0.5F, 0.8F, 0.5F, 1.5F, 0.5F, 0.8F, 0.5F, 0.8F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F
    };
    static final int[] push = {
            2, 2, 3, 3, 2, 2, 2, 4, 2, 2, 2, 4, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] revpush = {
            2, 3, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] lift = {
            0, 30, 0, 20, 0, 30, 0, 0, 20, 0, 0, 0, 10, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] revlift = {
            0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] powerloss = {
            2500000, 2500000, 3500000, 2500000, 4000000, 2500000, 3200000, 3200000, 2750000, 5500000, 2750000, 4500000,
            3500000, 16700000, 3000000, 5500000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] flipy = {
            -50, -60, -92, -44, -60, -57, -54, -60, -77, -57, -82, -85, -28, -100, -63, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] msquash = {
            7, 4, 7, 2, 8, 4, 6, 4, 3, 8, 4, 10, 3, 20, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] clrad = {
            3300, 1700, 4700, 3000, 2000, 4500, 3500, 5000, 10000, 15000, 4000, 7000, 10000, 15000, 5500, 5000, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0
    };
    static final float[] dammult = {
            0.75F, 0.8F, 0.45F, 0.8F, 0.42F, 0.7F, 0.72F, 0.6F, 0.58F, 0.41F, 0.67F, 0.45F, 0.61F, 0.25F, 0.38F, 0.52F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F
    };
    static final int[] maxmag = {
            7600, 4200, 7200, 6000, 6000, 15000, 17200, 17000, 18000, 11000, 19000, 10700, 13000, 45000, 5800, 18000, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0
    };
    static final float[] dishandle = {
            0.65F, 0.6F, 0.55F, 0.77F, 0.62F, 0.9F, 0.6F, 0.72F, 0.45F, 0.8F, 0.95F, 0.4F, 0.87F, 0.42F, 1.0F, 0.95F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F
    };
    static final float[] outdam = {
            0.68F, 0.35F, 0.8F, 0.5F, 0.42F, 0.76F, 0.82F, 0.76F, 0.72F, 0.62F, 0.79F, 0.95F, 0.77F, 1.0F, 0.85F, 1.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,
            0.0F, 0.0F, 0.0F, 0.0F
    };
    static final int[] cclass = {
            0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static final String[] names = {
            "Tornado Shark", "Formula 7", "Wow Caninaro", "La Vita Crab", "Nimi", "MAX Revenge", "Lead Oxide",
            "Kool Kat", "Drifter X", "Sword of Justice", "High Rider", "EL KING", "Mighty Eight", "M A S H E E N",
            "Radical One", "DR Monstaa", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
    };
    static final int[] enginsignature = {
            0, 1, 2, 1, 0, 3, 2, 2, 1, 0, 3, 4, 1, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static int lastload = 0;
    static private int nlcars = 0;
    static int nlocars = 0;
    static private int xnlocars = 0;
    static final boolean[] include = new boolean[FORTY];
    static final String[] createdby = new String[FORTY];
    static final int[] publish = new int[FORTY];
    static final String[] loadnames = new String[20];
    static int nl = 0;
    static int action = 0;
    static private boolean carlon = false;
    static int reco = -2;
    static final int[] lcardate = {
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static int haltload = 0;
    static int ac = -1;
    static private String acname = "Radical One";
    static private String fails = "";
    static String tnickey = "";
    static String tclan = "";
    static String tclankey = "";
    static private final int[] adds = {
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    static String viewname = "";
    static int staction = 0;
    static String onstage = "";
    static private int roundslot = 0;
    static String lastcar = "";
    static int msloaded = 0;
    private static CarDefine thread;
    static final int[] top20adds = new int[20];

    private CarDefine() {super();}
    static CarDefine create(final ContO[] contos) {
        thread = new CarDefine();
        bco = contos;
        return thread;
    }

    static private void loadstat(final byte[] is, final String string, final int i, final int i0, final int i1, final int i2) {
        names[i2] = string;
        boolean bool = false;
        boolean bool3 = false;
        String line;
        final int[] statValues = {
                128, 128, 128, 128, 128
        };
        int i6 = 640;
        final int[] physicsValues = {
                50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50
        };
        final int[] is8 = {
                50, 50, 50
        };
        enginsignature[i2] = 0;
        float f = 0.0F;
        publish[i2 - SIXTEEN] = 0;
        createdby[i2 - SIXTEEN] = "Unkown User";
        try {
            final BufferedReader statReader = new BufferedReader(new InputStreamReader(new DataInputStream(new ByteArrayInputStream(is))));
            while ((line = statReader.readLine()) != null) {
                line = line.trim();
                if (line.startsWith("stat(")) {
                    try {
                        i6 = 0;
                        for (int i9 = 0; i9 < 5; i9++) {
                            statValues[i9] = getvalue("stat", line, i9);
                            if (statValues[i9] > 200) {
                                statValues[i9] = 200;
                            }
                            if (statValues[i9] < 16) {
                                statValues[i9] = 16;
                            }
                            i6 += statValues[i9];
                        }
                        bool = true;
                    } catch (final Exception exception) {
                        bool = false;
                    }
                }
                if (line.startsWith("physics(")) {
                    try {
                        for (int i10 = 0; i10 < 11; i10++) {
                            physicsValues[i10] = getvalue("physics", line, i10);
                            if (physicsValues[i10] > 100) {
                                physicsValues[i10] = 100;
                            }
                            if (physicsValues[i10] < 0) {
                                physicsValues[i10] = 0;
                            }
                        }
                        for (int i11 = 0; i11 < 3; i11++) {
                            is8[i11] = getvalue("physics", line, i11 + 11);
                            if (i11 != 0 && is8[i11] > 100) {
                                is8[i11] = 100;
                            }
                            if (is8[i11] < 0) {
                                is8[i11] = 0;
                            }
                        }
                        enginsignature[i2] = getvalue("physics", line, 14);
                        if (enginsignature[i2] > 4) {
                            enginsignature[i2] = 0;
                        }
                        if (enginsignature[i2] < 0) {
                            enginsignature[i2] = 0;
                        }
                        f = getvalue("physics", line, 15);
                        if (f > 0.0F) {
                            bool3 = true;
                        }
                    } catch (final Exception exception) {
                        bool3 = false;
                    }
                }
                if (line.startsWith("handling(")) {
                    try {
                        int i12 = getvalue("handling", line, 0);
                        if (i12 > 200) {
                            i12 = 200;
                        }
                        if (i12 < 50) {
                            i12 = 50;
                        }
                        dishandle[i2] = i12 / 200.0F;
                    } catch (final Exception ignored) {

                    }
                }
                if (line.startsWith("carmaker(")) {
                    createdby[i2 - SIXTEEN] = getSvalue("carmaker", line, 0);
                }
                if (line.startsWith("publish(")) {
                    publish[i2 - SIXTEEN] = getvalue("publish", line, 0);
                }
            }
            statReader.close();
        } catch (final Exception exception) {
            System.out.println("Error Loading Car Stat: " + exception);
        }
        if (bool && bool3) {
            int i13 = 0;
            if (i6 > 680) {
                i13 = 680 - i6;
            }
            if (i6 > 640 && i6 < 680) {
                i13 = 640 - i6;
            }
            if (i6 > 600 && i6 < 640) {
                i13 = 600 - i6;
            }
            if (i6 > 560 && i6 < 600) {
                i13 = 560 - i6;
            }
            if (i6 > 520 && i6 < 560) {
                i13 = 520 - i6;
            }
            if (i6 < 520) {
                i13 = 520 - i6;
            }
            while (i13 != 0) {
                for (int i14 = 0; i14 < 5; i14++) {
                    if (i13 > 0 && statValues[i14] < 200) {
                        statValues[i14]++;
                        i13--;
                    }
                    if (i13 < 0 && statValues[i14] > 16) {
                        statValues[i14]--;
                        i13++;
                    }
                }
            }
            i6 = 0;
            for (int i15 = 0; i15 < 5; i15++) {
                i6 += statValues[i15];
            }
            if (i6 == 520) {
                cclass[i2] = 0;
            }
            if (i6 == 560) {
                cclass[i2] = 1;
            }
            if (i6 == 600) {
                cclass[i2] = 2;
            }
            if (i6 == 640) {
                cclass[i2] = 3;
            }
            if (i6 == 680) {
                cclass[i2] = 4;
            }
            int i16 = 0;
            int i17 = 0;
            float f18 = 0.5F;
            if (statValues[0] == 200) {
                i16 = 1;
                i17 = 1;
            }
            if (statValues[0] > 192 && statValues[0] < 200) {
                i16 = 12;
                i17 = 1;
                f18 = (statValues[0] - 192) / 8.0F;
            }
            if (statValues[0] == 192) {
                i16 = 12;
                i17 = 12;
            }
            if (statValues[0] > 148 && statValues[0] < 192) {
                i16 = 14;
                i17 = 12;
                f18 = (statValues[0] - 148) / 44.0F;
            }
            if (statValues[0] == 148) {
                i16 = 14;
                i17 = 14;
            }
            if (statValues[0] > 133 && statValues[0] < 148) {
                i16 = 10;
                i17 = 14;
                f18 = (statValues[0] - 133) / 15.0F;
            }
            if (statValues[0] == 133) {
                i16 = 10;
                i17 = 10;
            }
            if (statValues[0] > 112 && statValues[0] < 133) {
                i16 = 15;
                i17 = 10;
                f18 = (statValues[0] - 112) / 21.0F;
            }
            if (statValues[0] == 112) {
                i16 = 15;
                i17 = 15;
            }
            if (statValues[0] > 107 && statValues[0] < 112) {
                i16 = 11;
                i17 = 15;
                f18 = (statValues[0] - 107) / 5.0F;
            }
            if (statValues[0] == 107) {
                i16 = 11;
                i17 = 11;
            }
            if (statValues[0] > 88 && statValues[0] < 107) {
                i16 = 13;
                i17 = 11;
                f18 = (statValues[0] - 88) / 19.0F;
            }
            if (statValues[0] == 88) {
                i16 = 13;
                i17 = 13;
            }
            if (statValues[0] > 88) {
                swits[i2][0] = (int) ((swits[i17][0] - swits[i16][0]) * f18 + swits[i16][0]);
                swits[i2][1] = (int) ((swits[i17][1] - swits[i16][1]) * f18 + swits[i16][1]);
                swits[i2][2] = (int) ((swits[i17][2] - swits[i16][2]) * f18 + swits[i16][2]);
            } else {
                f18 = statValues[0] / 88.0F;
                if (f18 < 0.76) {
                    f18 = 0.76F;
                }
                swits[i2][0] = (int) (50.0F * f18);
                swits[i2][1] = (int) (130.0F * f18);
                swits[i2][2] = (int) (210.0F * f18);
            }
            i16 = 0;
            i17 = 0;
            f18 = 0.5F;
            if (statValues[1] == 200) {
                i16 = 1;
                i17 = 1;
            }
            if (statValues[1] > 150 && statValues[1] < 200) {
                i16 = 14;
                i17 = 1;
                f18 = (statValues[1] - 150) / 50.0F;
            }
            if (statValues[1] == 150) {
                i16 = 14;
                i17 = 14;
            }
            if (statValues[1] > 144 && statValues[1] < 150) {
                i16 = 9;
                i17 = 14;
                f18 = (statValues[1] - 144) / 6.0F;
            }
            if (statValues[1] == 144) {
                i16 = 9;
                i17 = 9;
            }
            if (statValues[1] > 139 && statValues[1] < 144) {
                i16 = 6;
                i17 = 9;
                f18 = (statValues[1] - 139) / 5.0F;
            }
            if (statValues[1] == 139) {
                i16 = 6;
                i17 = 6;
            }
            if (statValues[1] > 128 && statValues[1] < 139) {
                i16 = 15;
                i17 = 6;
                f18 = (statValues[1] - 128) / 11.0F;
            }
            if (statValues[1] == 128) {
                i16 = 15;
                i17 = 15;
            }
            if (statValues[1] > 122 && statValues[1] < 128) {
                i16 = 10;
                i17 = 15;
                f18 = (statValues[1] - 122) / 6.0F;
            }
            if (statValues[1] == 122) {
                i16 = 10;
                i17 = 10;
            }
            if (statValues[1] > 119 && statValues[1] < 122) {
                i16 = 3;
                i17 = 10;
                f18 = (statValues[1] - 119) / 3.0F;
            }
            if (statValues[1] == 119) {
                i16 = 3;
                i17 = 3;
            }
            if (statValues[1] > 98 && statValues[1] < 119) {
                i16 = 5;
                i17 = 3;
                f18 = (statValues[1] - 98) / 21.0F;
            }
            if (statValues[1] == 98) {
                i16 = 5;
                i17 = 5;
            }
            if (statValues[1] > 81 && statValues[1] < 98) {
                i16 = 0;
                i17 = 5;
                f18 = (statValues[1] - 81) / 17.0F;
            }
            if (statValues[1] == 81) {
                i16 = 0;
                i17 = 0;
            }
            if (statValues[1] <= 80) {
                i16 = 2;
                i17 = 2;
            }
            if (statValues[0] <= 88) {
                i16 = 13;
                i17 = 13;
            }
            acelf[i2][0] = (acelf[i17][0] - acelf[i16][0]) * f18 + acelf[i16][0];
            acelf[i2][1] = (acelf[i17][1] - acelf[i16][1]) * f18 + acelf[i16][1];
            acelf[i2][2] = (acelf[i17][2] - acelf[i16][2]) * f18 + acelf[i16][2];
            if (statValues[1] <= 70 && statValues[0] > 88) {
                acelf[i2][0] = 9.0F;
                acelf[i2][1] = 4.0F;
                acelf[i2][2] = 3.0F;
            }
            f18 = (statValues[2] - 88) / 109.0F;
            if (f18 > 1.0F) {
                f18 = 1.0F;
            }
            if (f18 < -0.55) {
                f18 = -0.55F;
            }
            airs[i2] = 0.55F + 0.45F * f18 + 0.4F * (physicsValues[9] / 100.0F);
            if (airs[i2] < 0.3) {
                airs[i2] = 0.3F;
            }
            airc[i2] = (int) (10.0F + 70.0F * f18 + 30.0F * (physicsValues[10] / 100.0F));
            if (airc[i2] < 0) {
                airc[i2] = 0;
            }
            int i19 = (int) (670.0F - (physicsValues[9] + physicsValues[10]) / 200.0F * 420.0F);
            if (statValues[0] <= 88) {
                i19 = (int) (1670.0F - (physicsValues[9] + physicsValues[10]) / 200.0F * 1420.0F);
            }
            if (statValues[2] > 190 && i19 < 300) {
                i19 = 300;
            }
            powerloss[i2] = i19 * 10000;
            moment[i2] = 0.7F + (statValues[3] - 16) / 184.0F * 1.0F;
            if (statValues[0] < 110) {
                moment[i2] = 0.75F + (statValues[3] - 16) / 184.0F * 1.25F;
            }
            if (statValues[3] == 200 && statValues[4] == 200 && statValues[0] <= 88) {
                moment[i2] = 3.0F;
            }
            float f20 = 0.9F + (statValues[4] - 90) * 0.01F;
            if (f20 < 0.6) {
                f20 = 0.6F;
            }
            if (statValues[4] == 200 && statValues[0] <= 88) {
                f20 = 3.0F;
            }
            maxmag[i2] = (int) (f * f20);
            outdam[i2] = 0.35F + (f20 - 0.6F) * 0.5F;
            if (outdam[i2] < 0.35) {
                outdam[i2] = 0.35F;
            }
            if (outdam[i2] > 1.0F) {
                outdam[i2] = 1.0F;
            }
            clrad[i2] = (int) (is8[0] * is8[0] * 1.5);
            if (clrad[i2] < 1000) {
                clrad[i2] = 1000;
            }
            dammult[i2] = 0.3F + is8[1] * 0.005F;
            msquash[i2] = (int) (2.0 + is8[2] / 7.6);
            flipy[i2] = i0;
            handb[i2] = (int) (7.0F + physicsValues[0] / 100.0F * 8.0F);
            turn[i2] = (int) (4.0F + physicsValues[1] / 100.0F * 6.0F);
            grip[i2] = 16.0F + physicsValues[2] / 100.0F * 14.0F;
            if (grip[i2] < 21.0F) {
                swits[i2][0] += 40.0F * ((21.0F - grip[i2]) / 5.0F);
                if (swits[i2][0] > 100) {
                    swits[i2][0] = 100;
                }
            }
            bounce[i2] = 0.8F + physicsValues[3] / 100.0F * 0.6F;
            if (physicsValues[3] > 67) {
                airs[i2] *= 0.76F + (1.0F - physicsValues[3] / 100.0F) * 0.24F;
                airc[i2] *= 0.76F + (1.0F - physicsValues[3] / 100.0F) * 0.24F;
            }
            lift[i2] = (int) ((float) physicsValues[5] * (float) physicsValues[5] / 10000.0F * 30.0F);
            revlift[i2] = (int) (physicsValues[6] / 100.0F * 32.0F);
            push[i2] = (int) (2.0F + physicsValues[7] / 100.0F * 2.0F * ((30 - lift[i2]) / 30));
            revpush[i2] = (int) (1.0F + physicsValues[8] / 100.0F * 2.0F);
            comprad[i2] = i / 400.0F + (statValues[3] - 16) / 184.0F * 0.2F;
            if (comprad[i2] < 0.4) {
                comprad[i2] = 0.4F;
            }
            simag[i2] = (i1 - 17) * 0.0167F + 0.85F;
        } else {
            names[i2] = "";
        }
    }

    static private int getvalue(final String string, final String string21, final int i) {
        int i22 = 0;
        String string23 = "";
        for (int i24 = string.length() + 1; i24 < string21.length(); i24++) {
            final String string25 = "" + string21.charAt(i24);
            if (string25.equals(",") || string25.equals(")")) {
                i22++;
                i24++;
            }
            if (i22 == i) {
                string23 = "" + string23 + string21.charAt(i24);
            }
        }
        return (int) Float.parseFloat(string23);
    }

    static private String getSvalue(final String string, final String string26, final int i) {
        String string27 = "";
        int i28 = 0;
        for (int i29 = string.length() + 1; i29 < string26.length() && i28 <= i; i29++) {
            final String string30 = "" + string26.charAt(i29);
            if (string30.equals(",") || string30.equals(")")) {
                i28++;
            } else if (i28 == i) {
                string27 = "" + string27 + string30;
            }
        }
        return string27;
    }

    static private int servervalue(final String string, final int i) {
        int i31 = -1;
        try {
            int i32 = 0;
            int i33 = 0;
            int i34 = 0;
            String string35;
            String string36 = "";
            for (/**/; i32 < string.length() && i34 != 2; i32++) {
                string35 = "" + string.charAt(i32);
                if (string35.equals("|")) {
                    i33++;
                    if (i34 == 1 || i33 > i) {
                        i34 = 2;
                    }
                } else if (i33 == i) {
                    string36 = "" + string36 + string35;
                    i34 = 1;
                }
            }
            if (string36.equals("")) {
                string36 = "-1";
            }
            i31 = Integer.parseInt(string36);
        } catch (final Exception ignored) {

        }
        return i31;
    }

    static private String serverSvalue(final String string, final int i) {
        String string37 = "";
        try {
            int i38 = 0;
            int i39 = 0;
            int i40 = 0;
            String string41;
            String string42 = "";
            for (/**/; i38 < string.length() && i40 != 2; i38++) {
                string41 = "" + string.charAt(i38);
                if (string41.equals("|")) {
                    i39++;
                    if (i40 == 1 || i39 > i) {
                        i40 = 2;
                    }
                } else if (i39 == i) {
                    string42 = "" + string42 + string41;
                    i40 = 1;
                }
            }
            string37 = string42;
        } catch (final Exception ignored) {

        }
        return string37;
    }

    static void loadready() {
        Medium.csky[0] = 170;
        Medium.csky[1] = 220;
        Medium.csky[2] = 255;
        Medium.cfade[0] = 255;
        Medium.cfade[1] = 220;
        Medium.cfade[2] = 220;
        Medium.snap[0] = 0;
        Medium.snap[1] = 0;
        Medium.snap[2] = 0;
        fails = "";
        for (int i = 0; i < 20; i++) {
            loadnames[i] = "";
        }
        nl = 0;
        action = 0;
    }

    static void sparkactionloader() {
        actionloader = new Thread(thread);
        actionloader.start();
    }

    static void sparkcarloader() {
        if (!carlon) {
            carloader = new Thread(thread);
            carloader.start();
            carlon = true;
        }
    }

    static void sparkstageaction() {
        stageaction = new Thread(thread);
        stageaction.start();
    }

    static public void stopallnow() {
        staction = 0;
        action = 0;
        if (carloader != null) {
            carloader.stop();
            carloader = null;
        }
        if (actionloader != null) {
            actionloader.stop();
            actionloader = null;
        }
        if (stageaction != null) {
            stageaction.stop();
            stageaction = null;
        }
    }

    @Override
    public void run() {
        if (Thread.currentThread() == actionloader) {
            if (action == 10) {
                int i = -1;
                try {
                    final Socket socket = new Socket("multiplayer.needformadness.com", 7061);
                    final BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    final PrintWriter printwriter = new PrintWriter(socket.getOutputStream(), true);
                    printwriter.println("9|" + GameSparker.tnick.getText() + "|" + GameSparker.tpass.getText() + "|" + names[ac] + "|");
                    final String string = bufferedreader.readLine();
                    if (string != null) {
                        i = servervalue(string, 0);
                    }
                    socket.close();
                    bufferedreader.close();
                    printwriter.close();
                } catch (final Exception exception) {
                    i = -1;
                }
                if (i == 0) {
                    action = 3;
                } else {
                    action = -10;
                }
                System.gc();
            }
            if (action == 1) {
                reco = -1;
                try {
                    final Socket socket = new Socket("multiplayer.needformadness.com", 7061);
                    final BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    final PrintWriter printwriter = new PrintWriter(socket.getOutputStream(), true);
                    printwriter.println("1|" + GameSparker.tnick.getText() + "|" + GameSparker.tpass.getText() + "|");
                    final String string = bufferedreader.readLine();
                    if (string != null) {
                        reco = servervalue(string, 0);
                        if (reco == 0 || reco == 3 || reco > 10) {
                            tnickey = serverSvalue(string, 1);
                            if (reco != -167) {
                                tclan = serverSvalue(string, 2);
                                tclankey = serverSvalue(string, 3);
                            } else {
                                tclan = "";
                                tclankey = "";
                            }
                        }
                    }
                    socket.close();
                    bufferedreader.close();
                    printwriter.close();
                } catch (final Exception exception) {
                    reco = -1;
                }
                if (reco == 0 || reco == 3 || reco > 10) {
                    action = 2;
                } else {
                    action = 0;
                }
                System.gc();
            }
            while (action == 2) {

            }
            if (action == 3) {
                final String[] strings = new String[700];
                nl = 0;
                String line;
                try {
                    final URL url = new URL("http://multiplayer.needformadness.com/cars/lists/" + GameSparker.tnick.getText() + ".txt?reqlo=" + (int) (ThreadLocalRandom.current().nextDouble() * 1000.0) + "");
                    final BufferedReader carReader = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream())));
                    while ((line = carReader.readLine()) != null) {
                        line = "" + line.trim();
                        if (line.startsWith("mycars")) {
                            boolean bool = true;
                            while (bool && nl < 700) {
                                strings[nl] = getSvalue("mycars", line, nl);
                                if (strings[nl].equals("")) {
                                    bool = false;
                                } else {
                                    nl++;
                                }
                            }
                        }
                    }
                    if (nl > 0) {
                        action = 4;
                    } else {
                        action = -1;
                    }
                    carReader.close();
                } catch (final Exception exception) {
                    final String string43 = "" + exception;
                    if (string43.contains("FileNotFound")) {
                        action = -1;
                    } else {
                        action = -2;
                    }
                }
                if (action == 4) {
                    GameSparker.mcars.setVisible(false);
                    GameSparker.mcars.removeAll();
                    for (int i = 0; i < nl; i++) {
                        GameSparker.mcars.add(GameSparker.rd, strings[i]);
                    }
                    if (lastcar.equals("")) {
                        GameSparker.mcars.select(0);
                    } else {
                        GameSparker.mcars.select(lastcar);
                        lastcar = "";
                    }
                    for (int i = 0; i < FORTY; i++) {
                        include[i] = false;
                    }
                    roundslot = SIXTEEN;
                    nlocars = SIXTEEN;
                }
            }
            if (action == 4) {
                Medium.csky[0] = 170;
                Medium.csky[1] = 220;
                Medium.csky[2] = 255;
                Medium.cfade[0] = 255;
                Medium.cfade[1] = 220;
                Medium.cfade[2] = 220;
                Medium.snap[0] = 0;
                Medium.snap[1] = 0;
                Medium.snap[2] = 0;
                if (loadonlinecar(GameSparker.mcars.getSelectedItem(), roundslot) == roundslot) {
                    roundslot++;
                    if (roundslot == THIRTY_SIX) {
                        roundslot = SIXTEEN;
                    }
                    if (nlocars < THIRTY_SIX) {
                        nlocars++;
                    }
                    lastload = 2;
                    action = 5;
                } else {
                    if (lastload == 2) {
                        lastload = 0;
                    }
                    action = -1;
                }
                System.gc();
            }
            if (action == 6) {
                int i = -1;
                try {
                    if (ac != -1) {
                        acname = names[ac];
                    }
                    final Socket socket = new Socket("multiplayer.needformadness.com", 7061);
                    final BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    final PrintWriter printwriter = new PrintWriter(socket.getOutputStream(), true);
                    printwriter.println("8|" + GameSparker.tnick.getText() + "|" + GameSparker.tpass.getText() + "|" + acname + "|");
                    final String string = bufferedreader.readLine();
                    if (string != null) {
                        i = servervalue(string, 0);
                    }
                    socket.close();
                    bufferedreader.close();
                    printwriter.close();
                } catch (final Exception exception) {
                    i = -1;
                }
                if (i == 0) {
                    if (lastload == 2) {
                        lastload = -2;
                        lastcar = GameSparker.mcars.getSelectedItem();
                    }
                    action = 7;
                }
                if (i == 3) {
                    action = -7;
                }
                if (i == 4) {
                    action = -8;
                }
                if (action == 6) {
                    action = -9;
                }
                System.gc();
            }
            if (action == 11) {
                nl = 0;
                String line;
                try {
                    final String string44 = "all";
                    final URL url = new URL("http://multiplayer.needformadness.com/cars/top20/" + string44 + ".txt");
                    final BufferedReader top20Reader = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream())));
                    while ((line = top20Reader.readLine()) != null) {
                        line = "" + line.trim();
                        if (line.startsWith("cars")) {
                            boolean bool = true;
                            while (bool && nl < 20) {
                                loadnames[nl] = getSvalue("cars", line, nl);
                                if (loadnames[nl].equals("")) {
                                    bool = false;
                                } else {
                                    nl++;
                                }
                            }
                        }
                        if (line.startsWith("adds")) {
                            for (int i = 0; i < nl; i++) {
                                adds[i] = getvalue("adds", line, i);
                            }
                        }
                    }
                    if (nl > 0) {
                        action = 12;
                    } else {
                        action = -1;
                    }
                    top20Reader.close();
                } catch (final Exception exception) {
                    action = -1;
                }
                System.gc();
            }
            if (action == 12) {
                Medium.csky[0] = 170;
                Medium.csky[1] = 220;
                Medium.csky[2] = 255;
                Medium.cfade[0] = 255;
                Medium.cfade[1] = 220;
                Medium.cfade[2] = 220;
                Medium.snap[0] = 0;
                Medium.snap[1] = 0;
                Medium.snap[2] = 0;
                xnlocars = THIRTY_SIX;
                final int i = nl;
                for (nl = 0; nl < i; nl++)
                    if (xnlocars < FIFTY_SIX && loadonlinecar(loadnames[nl], xnlocars) == xnlocars) {
                        xnlocars++;
                    }
                nl = 0;
                if (xnlocars > THIRTY_SIX) {
                    action = 13;
                } else {
                    action = -1;
                }
                System.gc();
            }
            if (action == 101) {
                nl = 0;
                String line;
                try {
                    final URL url = new URL("http://multiplayer.needformadness.com/cars/lists/" + viewname + ".txt?reqlo=" + (int) (ThreadLocalRandom.current().nextDouble() * 1000.0) + "");
                    final BufferedReader carListReader = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream())));
                    while ((line = carListReader.readLine()) != null) {
                        line = "" + line.trim();
                        if (line.startsWith("mycars")) {
                            boolean bool = true;
                            while (bool && nl < 20) {
                                loadnames[nl] = getSvalue("mycars", line, nl);
                                if (loadnames[nl].equals("")) {
                                    bool = false;
                                } else {
                                    nl++;
                                }
                            }
                        }
                    }
                    if (nl > 0) {
                        action = 102;
                    } else {
                        action = -2;
                    }
                    carListReader.close();
                } catch (final Exception exception) {
                    final String string45 = "" + exception;
                    if (string45.contains("FileNotFound")) {
                        action = -2;
                    } else {
                        action = -1;
                    }
                }
                System.gc();
            }
            if (action == 102) {
                Medium.csky[0] = 170;
                Medium.csky[1] = 220;
                Medium.csky[2] = 255;
                Medium.cfade[0] = 255;
                Medium.cfade[1] = 220;
                Medium.cfade[2] = 220;
                Medium.snap[0] = 0;
                Medium.snap[1] = 0;
                Medium.snap[2] = 0;
                for (int i = 0; i < FORTY; i++) {
                    include[i] = false;
                }
                xnlocars = THIRTY_SIX;
                final int i = nl;
                for (nl = 0; nl < i; nl++)
                    if (xnlocars < FIFTY_SIX && loadonlinecar(loadnames[nl], xnlocars) == xnlocars) {
                        xnlocars++;
                    }
                nl = 0;
                if (xnlocars > THIRTY_SIX) {
                    action = 103;
                } else {
                    action = -1;
                }
                System.gc();
            }
            actionloader = null;
        }
        if (Thread.currentThread() == carloader) {
            while (nl > 0) {
                int i = 0;
                for (int i46 = SIXTEEN; i46 < FIFTY_SIX; i46++)
                    if (loadnames[nl - 1].equals(names[i46])) {
                        i = -1;
                    }
                if (fails.contains('|' + loadnames[nl - 1] + "|")) {
                    i = -1;
                }
                if (i != -1) {
                    int i47 = lcardate[0];
                    int i48 = THIRTY_SIX;
                    if (haltload > 0) {
                        i48 = THIRTY_SIX + haltload;
                        i47 = lcardate[haltload];
                    }
                    i = i48;
                    for (int i49 = i48; i49 < FIFTY_SIX; i49++)
                        if (lcardate[i49 - THIRTY_SIX] < i47) {
                            i47 = lcardate[i49 - THIRTY_SIX];
                            i = i49;
                        }
                    if (loadonlinecar(loadnames[nl - 1], i) == -1) {
                        fails = fails + "|" + loadnames[nl - 1] + "|";
                    } else {
                        lcardate[i - THIRTY_SIX]++;
                    }
                }
                nl--;
                try {
                    if (carloader != null) {

                    }
                    Thread.sleep(20L);
                } catch (final InterruptedException ignored) {

                }
            }
            carlon = false;
            carloader = null;
        }
        if (Thread.currentThread() == stageaction) {
            if (staction == 1) {
                int i = -1;
                try {
                    final Socket socket = new Socket("multiplayer.needformadness.com", 7061);
                    final BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    final PrintWriter printwriter = new PrintWriter(socket.getOutputStream(), true);
                    printwriter.println("19|" + GameSparker.tnick.getText() + "|" + GameSparker.tpass.getText() + "|" + onstage + "|");
                    final String string = bufferedreader.readLine();
                    if (string != null) {
                        i = servervalue(string, 0);
                    }
                    socket.close();
                    bufferedreader.close();
                    printwriter.close();
                } catch (final Exception exception) {
                    i = -1;
                }
                if (i == 0) {
                    try {
                        GameSparker.mstgs.remove(onstage);
                    } catch (final Exception ignored) {

                    }
                    GameSparker.mstgs.select(0);
                    staction = 0;
                } else {
                    staction = -1;
                }
            }
            if (staction == 4) {
                reco = -1;
                try {
                    final Socket socket = new Socket("multiplayer.needformadness.com", 7061);
                    final BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    final PrintWriter printwriter = new PrintWriter(socket.getOutputStream(), true);
                    printwriter.println("1|" + GameSparker.tnick.getText() + "|" + GameSparker.tpass.getText() + "|");
                    final String string = bufferedreader.readLine();
                    if (string != null) {
                        reco = servervalue(string, 0);
                        if (reco == 0 || reco == 3 || reco > 10) {
                            tnickey = serverSvalue(string, 1);
                            if (reco != -167) {
                                tclan = serverSvalue(string, 2);
                                tclankey = serverSvalue(string, 3);
                            } else {
                                tclan = "";
                                tclankey = "";
                            }
                        }
                    }
                    socket.close();
                    bufferedreader.close();
                    printwriter.close();
                } catch (final Exception exception) {
                    reco = -1;
                }
                if (reco == 0 || reco == 3 || reco > 10) {
                    staction = 5;
                } else {
                    staction = 3;
                }
                System.gc();
                while (staction == 5) {

                }
            }
            if (staction == 2) {
                int i = -1;
                if (msloaded == 1) {
                    for (int i51 = 1; i51 < GameSparker.mstgs.getItemCount(); i51++)
                        if (GameSparker.mstgs.getItem(i51).equals(onstage)) {
                            i = 3;
                        }
                }
                if (i == -1) {
                    try {
                        final Socket socket = new Socket("multiplayer.needformadness.com", 7061);
                        final BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        final PrintWriter printwriter = new PrintWriter(socket.getOutputStream(), true);
                        printwriter.println("18|" + GameSparker.tnick.getText() + "|" + GameSparker.tpass.getText() + "|" + onstage + "|");
                        final String string = bufferedreader.readLine();
                        if (string != null) {
                            i = servervalue(string, 0);
                        }
                        socket.close();
                        bufferedreader.close();
                        printwriter.close();
                    } catch (final Exception exception) {
                        i = -1;
                    }
                }
                staction = -1;
                if (i == 0) {
                    staction = 0;
                    if (msloaded == 1) {
                        GameSparker.mstgs.addstg(onstage);
                    }
                }
                if (i == 3) {
                    staction = -2;
                }
                if (i == 4) {
                    staction = -3;
                }
            }
            stageaction = null;
        }
    }

    static private int loadonlinecar(final String string, int i) {
        try {
            String string52 = "http://multiplayer.needformadness.com/cars/" + string + ".radq";
            string52 = string52.replace(' ', '_');
            final URL url = new URL(string52);
            final int i53 = url.openConnection().getContentLength();
            final DataInputStream datainputstream = new DataInputStream(url.openStream());
            final byte[] is = new byte[i53];
            datainputstream.readFully(is);
            ZipInputStream zipinputstream;
            if (is[0] == 80 && is[1] == 75 && is[2] == 3) {
                zipinputstream = new ZipInputStream(new ByteArrayInputStream(is));
            } else {
                final byte[] is54 = new byte[i53 - FORTY];
                for (int i55 = 0; i55 < i53 - FORTY; i55++) {
                    int i56 = 20;
                    if (i55 >= 500) {
                        i56 = FORTY;
                    }
                    is54[i55] = is[i55 + i56];
                }
                zipinputstream = new ZipInputStream(new ByteArrayInputStream(is54));
            }
            final ZipEntry zipentry = zipinputstream.getNextEntry();
            if (zipentry != null) {
                int i57 = Integer.parseInt(zipentry.getName());
                final byte[] is58 = new byte[i57];
                int i59 = 0;
                int i60;
                for (/**/; i57 > 0; i57 -= i60) {
                    i60 = zipinputstream.read(is58, i59, i57);
                    i59 += i60;
                }
                Medium.loadnew = true;
                bco[i] = new ContO(is58);
                if (bco[i].errd || bco[i].npl <= 60 || bco[i].maxR < 120) {
                    i = -1;
                }
                if (i != -1) {
                    bco[i].shadow = true;
                    bco[i].noline = false;
                    bco[i].decor = false;
                    bco[i].tnt = 0;
                    bco[i].disp = 0;
                    bco[i].disline = 7;
                    bco[i].grounded = 1.0F;
                    boolean bool = true;
                    if (bco[i].keyz[0] < 0 || bco[i].keyx[0] > 0) {
                        bool = false;
                    }
                    if (bco[i].keyz[1] < 0 || bco[i].keyx[1] < 0) {
                        bool = false;
                    }
                    if (bco[i].keyz[2] > 0 || bco[i].keyx[2] > 0) {
                        bool = false;
                    }
                    if (bco[i].keyz[3] > 0 || bco[i].keyx[3] < 0) {
                        bool = false;
                    }
                    if (!bool) {
                        i = -1;
                    }
                }
                if (i != -1) {
                    loadstat(is58, string, bco[i].maxR, bco[i].roofat, bco[i].wh, i);
                    if (names[i].equals("")) {
                        i = -1;
                    }
                }
                Medium.loadnew = false;
                datainputstream.close();
                zipinputstream.close();
            } else {
                i = -1;
            }
        } catch (final Exception exception) {
            i = -1;
        }
        System.gc();
        return i;
    }

    static void loadmystages() {
        final String[] strings = new String[700];
        int i = 0;
        String line;
        try {
            final URL url = new URL("http://multiplayer.needformadness.com/tracks/lists/" + GameSparker.tnick.getText() + ".txt?reqlo=" + (int) (ThreadLocalRandom.current().nextDouble() * 1000.0) + "");
            final BufferedReader stageReader = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream())));
            while ((line = stageReader.readLine()) != null) {
                line = "" + line.trim();
                if (line.startsWith("mystages")) {
                    boolean bool = true;
                    while (bool && i < 700) {
                        strings[i] = getSvalue("mystages", line, i);
                        if (strings[i].equals("")) {
                            bool = false;
                        } else {
                            i++;
                        }
                    }
                }
            }
            if (i > 0) {
                msloaded = 1;
            } else {
                msloaded = -2;
            }
            stageReader.close();
        } catch (final Exception exception) {
            final String string61 = "" + exception;
            if (string61.contains("FileNotFound")) {
                msloaded = -2;
            } else {
                msloaded = -1;
            }
        }
        if (msloaded == 1) {
            GameSparker.mstgs.setVisible(false);
            GameSparker.mstgs.removeAll();
            GameSparker.mstgs.add(GameSparker.rd, "Select Stage");
            int i62 = 0;
            for (int i63 = 0; i63 < i; i63++) {
                GameSparker.mstgs.add(GameSparker.rd, strings[i63]);
                if (CheckPoints.name.equals(strings[i63])) {
                    i62 = i63 + 1;
                    CheckPoints.top20 = 0;
                }
            }
            GameSparker.mstgs.select(i62);
            GameSparker.mstgs.setVisible(true);
        }
        if (msloaded == -2) {
            GameSparker.mstgs.setVisible(false);
            GameSparker.mstgs.removeAll();
            GameSparker.mstgs.add(GameSparker.rd, "You have not published or added any stages...");
            GameSparker.mstgs.select(0);
            GameSparker.mstgs.setVisible(true);
        }
        if (msloaded == -1) {
            GameSparker.mstgs.setVisible(false);
            GameSparker.mstgs.removeAll();
            GameSparker.mstgs.add(GameSparker.rd, "Failed to load stages, please try again later.");
            GameSparker.mstgs.select(0);
            GameSparker.mstgs.setVisible(true);
        }
        System.gc();
    }

    static void loadtop20(final int i) {
        final String[] strings = new String[20];
        int i64 = 0;
        String line;
        try {
            String string65 = "A";
            if (i == 3) {
                string65 = "W";
            }
            if (i == 4) {
                string65 = "M";
            }
            final URL url = new URL("http://multiplayer.needformadness.com/tracks/top20/" + string65 + ".txt");
            final BufferedReader top20Reader = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream())));
            while ((line = top20Reader.readLine()) != null) {
                line = "" + line.trim();
                if (line.startsWith("stages")) {
                    boolean bool = true;
                    while (bool && i64 < 20) {
                        strings[i64] = getSvalue("stages", line, i64);
                        if (strings[i64].equals("")) {
                            bool = false;
                        } else {
                            i64++;
                        }
                    }
                }
                if (line.startsWith("adds")) {
                    for (int i66 = 0; i66 < i64; i66++) {
                        top20adds[i66] = getvalue("adds", line, i66);
                    }
                }
            }
            if (i64 > 0) {
                msloaded = i;
            } else {
                msloaded = -2;
            }
            top20Reader.close();
        } catch (final Exception exception) {
            final String string67 = "" + exception;
            if (string67.contains("FileNotFound")) {
                msloaded = -2;
            } else {
                msloaded = -1;
            }
        }
        if (msloaded == i) {
            GameSparker.mstgs.setVisible(false);
            GameSparker.mstgs.removeAll();
            GameSparker.mstgs.add(GameSparker.rd, "Select Stage");
            for (int i68 = 0; i68 < i64; i68++) {
                GameSparker.mstgs.add(GameSparker.rd, "N#" + (i68 + 1) + " " + strings[i68]);
            }
            GameSparker.mstgs.select(0);
            GameSparker.mstgs.setVisible(true);
        }
        if (msloaded == -1 || msloaded == -2) {
            GameSparker.mstgs.setVisible(false);
            GameSparker.mstgs.removeAll();
            GameSparker.mstgs.add(GameSparker.rd, "Failed to load Top20 list, please try again later.");
            GameSparker.mstgs.select(0);
            GameSparker.mstgs.setVisible(true);
        }
        System.gc();
    }

    static void loadclanstages(final String string) {
        if (!string.equals("")) {
            final String[] lines = new String[700];
            int i = 0;
            String line;
            try {
                final URL url = new URL("http://multiplayer.needformadness.com/clans/" + string + "/stages.txt");
                BufferedReader clanStageReader;
                for (clanStageReader = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream()))); (line = clanStageReader.readLine()) != null && i < 700; i++) {
                    lines[i] = line;
                }
                if (i > 0) {
                    msloaded = 7;
                } else {
                    msloaded = -2;
                }
                clanStageReader.close();
            } catch (final Exception exception) {
                final String string70 = "" + exception;
                if (string70.contains("FileNotFound")) {
                    msloaded = -2;
                } else {
                    msloaded = -1;
                }
            }
            if (msloaded == 7) {
                GameSparker.mstgs.setVisible(false);
                GameSparker.mstgs.removeAll();
                GameSparker.mstgs.add(GameSparker.rd, "Select Stage");
                for (int i71 = 0; i71 < i; i71++) {
                    GameSparker.mstgs.add(GameSparker.rd, lines[i71]);
                }
                GameSparker.mstgs.select(0);
                GameSparker.mstgs.setVisible(true);
            }
            if (msloaded == -1) {
                GameSparker.mstgs.setVisible(false);
                GameSparker.mstgs.removeAll();
                GameSparker.mstgs.add(GameSparker.rd, "Failed to load clan stages, please try again later.");
                GameSparker.mstgs.select(0);
                GameSparker.mstgs.setVisible(true);
            }
            if (msloaded == -2) {
                GameSparker.mstgs.setVisible(false);
                GameSparker.mstgs.removeAll();
                GameSparker.mstgs.add(GameSparker.rd, "No stages have been added to your clan yet.");
                GameSparker.mstgs.select(0);
                GameSparker.mstgs.setVisible(true);
            }
            System.gc();
        } else {
            msloaded = -2;
            GameSparker.mstgs.setVisible(false);
            GameSparker.mstgs.removeAll();
            GameSparker.mstgs.add(GameSparker.rd, "You are not a member of any clan yet.");
            GameSparker.mstgs.select(0);
            GameSparker.mstgs.setVisible(true);
        }
    }

    static void loadstagemaker() {
        GameSparker.mstgs.setVisible(false);
        GameSparker.mstgs.removeAll();
        GameSparker.mstgs.add(GameSparker.rd, "Select Stage");
        int i = 0;
        final File file = new File("" + Madness.fpath + "mystages/");
        if (file.exists()) {
            final String[] strings = new File("" + Madness.fpath + "mystages/").list();
            for (final String string : strings)
                if (string.toLowerCase().endsWith(".txt") && i < 200) {
                    GameSparker.mstgs.add(GameSparker.rd, string.substring(0, string.length() - 4));
                    i++;
                }
        }
        if (i != 0) {
            msloaded = 2;
        } else {
            GameSparker.mstgs.add(GameSparker.rd, "No stages where found in your 'mystages' folder.");
            msloaded = -1;
        }
        GameSparker.mstgs.select(0);
        GameSparker.mstgs.setVisible(true);
    }

    static public void loadcarmaker() {
        Medium.csky[0] = 170;
        Medium.csky[1] = 220;
        Medium.csky[2] = 255;
        Medium.cfade[0] = 255;
        Medium.cfade[1] = 220;
        Medium.cfade[2] = 220;
        Medium.snap[0] = 0;
        Medium.snap[1] = 0;
        Medium.snap[2] = 0;
        for (int i = 0; i < FORTY; i++) {
            include[i] = false;
        }
        nlcars = SIXTEEN;
        final File file = new File("" + Madness.fpath + "mycars/");
        if (file.exists()) {
            final String[] strings = new File("" + Madness.fpath + "mycars/").list();
            for (final String string : strings)
                if (string.toLowerCase().endsWith(".rad") && nlcars < FIFTY_SIX && loadcar(string.substring(0, string.length() - 4), nlcars) == nlcars) {
                    nlcars++;
                }
        }
        System.gc();
        if (nlcars > SIXTEEN) {
            lastload = 1;
        }
    }

    static int loadcar(final String string, int i) {
        try {
            final File file = new File("" + Madness.fpath + "mycars/" + string + ".rad");
            if (file.exists()) {
                String string73 = "";
                final BufferedReader bufferedreader = new BufferedReader(new FileReader(file));
                //final Object object = null;
                String string74;
                while ((string74 = bufferedreader.readLine()) != null) {
                    string73 = "" + string73 + "" + string74 + "\n";
                }
                bufferedreader.close();
                //final Object object75 = null;
                Medium.loadnew = true;
                bco[i] = new ContO(string73.getBytes());
                if (bco[i].errd || bco[i].npl <= 60) {
                    i = -1;
                }
                if (i != -1) {
                    bco[i].shadow = true;
                    bco[i].noline = false;
                    bco[i].decor = false;
                    bco[i].tnt = 0;
                    bco[i].disp = 0;
                    bco[i].disline = 7;
                    bco[i].grounded = 1.0F;
                    boolean bool = true;
                    if (bco[i].keyz[0] < 0 || bco[i].keyx[0] > 0) {
                        bool = false;
                    }
                    if (bco[i].keyz[1] < 0 || bco[i].keyx[1] < 0) {
                        bool = false;
                    }
                    if (bco[i].keyz[2] > 0 || bco[i].keyx[2] > 0) {
                        bool = false;
                    }
                    if (bco[i].keyz[3] > 0 || bco[i].keyx[3] < 0) {
                        bool = false;
                    }
                    if (!bool) {
                        i = -1;
                    }
                }
                if (i != -1) {
                    loadstat(string73.getBytes(), string, bco[i].maxR, bco[i].roofat, bco[i].wh, i);
                    if (names[i].equals("")) {
                        i = -1;
                    }
                }
                Medium.loadnew = false;
            } else {
                i = -1;
            }
        } catch (final Exception exception) {
            i = -1;
            System.out.println("Error Loading Car: " + exception);
        }
        System.gc();
        return i;
    }
}
//package nfm.open;

//importjava.util.concurrent.ThreadLocalRandom;

/* CheckPoints - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */

class CheckPoints {
    //private CheckPoints() {}
    static int catchfin = 0;
    static final int[] clear = {
            0, 0, 0, 0, 0, 0, 0, 0
    };
    static final int[] dested = {
            0, 0, 0, 0, 0, 0, 0, 0
    };
    static int fn = 0;
    static final int[] fx = new int[5];
    static final int[] fy = new int[5];
    static final int[] fz = new int[5];
    static boolean haltall = false;
    static final float[] magperc = {
            0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F
    };
    static String maker = "";
    static int n = 0;
    static String name = "hogan rewish";
    static int nfix = 0;
    static int nlaps = 0;
    /**
     * "<strong>No</strong> <strong>T</strong>rees or <strong>B</strong>umps"<br>
     * Setting this to true will disable trees and bumps.
     */
    static boolean notb = false;
    static int nsp = 0;
    static int nto = 0;
    static final int[] omxz = new int[8];
    static final int[] onscreen = new int[8];
    /**
     * The X of every car in the stage.
     */
    static final int[] opx = new int[8];
    /**
     * The Z of every car in the stage.
     */
    static final int[] opz = new int[8];
    static int pcleared = 0;
    static int pcs = 0;
    static final int[] pos = {
            7, 7, 7, 7, 7, 7, 7, 7
    };
    static private int postwo = 0;
    static float prox = 0.0F;
    static int pubt = 0;
    static final boolean[] roted = new boolean[5];
    static final boolean[] special = new boolean[5];
    static int stage = (int) (ThreadLocalRandom.current().nextDouble() * 27.0) + 1;
    static int top20 = 0;
    static String trackname = "";
    static int trackvol = 200;
    static final int[] typ = new int[10000];
    static int wasted = 0;
    /**
     * You know when you add )p to the end of pieces? Their coordinates go here. )p basically adds "nodes" for where the AI goes. Therefore, {@link #x} and {@link #z} are the X and Z coordinates of track pieces with )p at the end of them.
     */
    static final int[] x = new int[10000];
    /**
     * You know when you add )p to the end of pieces? Their coordinates go here. )p basically adds "nodes" for where the AI goes. Therefore, {@link #x} and {@link #z} are the X and Z coordinates of track pieces with )p at the end of them.
     */
    static final int[] y = new int[10000];
    /**
     * You know when you add )p to the end of pieces? Their coordinates go here. )p basically adds "nodes" for where the AI goes. Therefore, {@link #x} and {@link #z} are the X and Z coordinates of track pieces with )p at the end of them.
     */
    static final int[] z = new int[10000];

    static void calprox() {
        int i = 0;
        for (int i9 = 0; i9 < n - 1; i9++) {
            for (int i10 = i9 + 1; i10 < n; i10++) {
                if (Math.abs(x[i9] - x[i10]) > i) {
                    i = Math.abs(x[i9] - x[i10]);
                }
                if (Math.abs(z[i9] - z[i10]) > i) {
                    i = Math.abs(z[i9] - z[i10]);
                }
            }
        }
        prox = i / 90.0F;
    }

    static void checkstat(final Mad[] mads, final ContO[] contos, final int i, final int i0, final int i1) {
        if (!haltall) {
            pcleared = mads[i0].pcleared;
            for (int i2 = 0; i2 < i; i2++) {
                magperc[i2] = (float) mads[i2].hitmag / (float) mads[i2].stat.maxmag;
                if (magperc[i2] > 1.0F) {
                    magperc[i2] = 1.0F;
                }
                pos[i2] = 0;
                onscreen[i2] = contos[i2].dist;
                opx[i2] = contos[i2].x;
                opz[i2] = contos[i2].z;
                omxz[i2] = mads[i2].mxz;
                if (dested[i2] == 0) {
                    clear[i2] = mads[i2].clear;
                } else {
                    clear[i2] = -1;
                }
                mads[i2].outshakedam = mads[i2].shakedam;
                mads[i2].shakedam = 0;
            }
            for (int i3 = 0; i3 < i; i3++) {
                for (int i4 = i3 + 1; i4 < i; i4++)
                    if (clear[i3] != clear[i4]) {
                        if (clear[i3] < clear[i4]) {
                            pos[i3]++;
                        } else {
                            pos[i4]++;
                        }
                    } else {
                        int i5 = mads[i3].pcleared + 1;
                        if (i5 >= n) {
                            i5 = 0;
                        }
                        while (typ[i5] <= 0)
                            if (++i5 >= n) {
                                i5 = 0;
                            }
                        if (py(contos[i3].x / 100, x[i5] / 100, contos[i3].z / 100, z[i5] / 100) > py(contos[i4].x / 100, x[i5] / 100, contos[i4].z / 100, z[i5] / 100)) {
                            pos[i3]++;
                        } else {
                            pos[i4]++;
                        }
                    }
            }
            if (stage > 2) {
                for (int i6 = 0; i6 < i; i6++)
                    if (clear[i6] == nlaps * nsp && pos[i6] == 0)
                        if (i6 == i0) {
                            for (int i7 = 0; i7 < i; i7++)
                                if (pos[i7] == 1) {
                                    postwo = i7;
                                }
                            if (py(opx[i0] / 100, opx[postwo] / 100, opz[i0] / 100, opz[postwo] / 100) < 14000 && clear[i0] - clear[postwo] == 1) {
                                catchfin = 30;
                            }
                        } else if (pos[i0] == 1 && py(opx[i0] / 100, opx[i6] / 100, opz[i0] / 100, opz[i6] / 100) < 14000 && clear[i6] - clear[i0] == 1) {
                            catchfin = 30;
                            postwo = i6;
                        }
            }
        }
        wasted = 0;
        for (int i8 = 0; i8 < i; i8++)
            if ((i0 != i8 || i1 >= 2) && mads[i8].dest) {
                wasted++;
            }
        if (catchfin != 0 && i1 < 2) {
            catchfin--;
            if (catchfin == 0) {
                Record.cotchinow(postwo);
                Record.closefinish = pos[i0] + 1;
            }
        }
    }

    static private int py(final int i, final int i11, final int i12, final int i13) {
        return (i - i11) * (i - i11) + (i12 - i13) * (i12 - i13);
    }
}
//package nfm.open;
/* ContO - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.AlphaComposite;
//importjava.awt.BasicStroke;
//importjava.awt.Color;
//importjava.awt.Graphics2D;
//importjava.io.BufferedReader;
//importjava.io.ByteArrayInputStream;
//importjava.io.DataInputStream;
//importjava.io.InputStreamReader;
//importjava.util.Arrays;
//importjava.util.Random;

interface Point3D {
    float x();
    float y();
    float z();
}

interface Point3DX extends Point3D {
    float xz();
}

class _Point3D implements Point3D {

    @Override
    public float x() {
        return 0;
    }

    @Override
    public float y() {
        return 0;
    }

    @Override
    public float z() {
        return 0;
    }
    
}


class _Point3DX extends _Point3D implements Point3DX {
    @Override
    public float xz() {
        return 0;
    }
}

class ContO implements Point3DX {
    int checkpoint;
    int colok;
    private int[] dam;
    boolean decor = false;
    int disline = 14;
    int disp = 0;
    int dist = 0;
    private final int[] edl;
    private final int[] edr;
    private final int[] elc;
    boolean elec;
    String err;
    boolean errd;
    int fcnt;
    final int[] fcol;
    boolean fix;
    int grat = 0;
    float grounded = 1.0F;
    final int[] keyx;
    final int[] keyz;
    int maxR = 0;
    boolean noline = false;
    private boolean[] notwall;
    int npl = 0;
    float[] osmag;
    final Plane[] p;
    private boolean[] rbef;
    float rcx;
    float rcy;
    float rcz;
    int roofat;
    boolean roted;
    private int[] rtg;
    private int[] rx;
    private int[] ry;
    private int[] rz;
    private int[] sav;
    private float[] sbln;
    final int[] scol;
    int[] scx;
    int[] scz;
    boolean shadow = false;
    private int[] skd;
    private float[][] smag;
    int sprk;
    private int sprkat;
    private int[][] srgb;
    int srx;
    int sry;
    int srz;
    int[] stg;
    int[] sx;
    int[] sy;
    int[] sz;
    private int[][] tc;
    int tnt;
    private int[] tradx;
    private int[] trady;
    private int[] tradz;
    private int[] tx;
    private int[] txy;
    private int[] ty;
    private int[] tz;
    private int[] tzy;
    private int ust;
    private float[] vrx;
    private float[] vry;
    private float[] vrz;
    int wh;
    int wxz = 0;
    int wzy = 0;
    int x = 0;
    int xy = 0;
    int xz = 0;
    int y = 0;
    int z = 0;
    int zy = 0;

    ContO(final byte[] is) {
        keyx = new int[4];
        keyz = new int[4];
        sprkat = 0;
        tnt = 0;
        ust = 0;
        srx = 0;
        sry = 0;
        srz = 0;
        rcx = 0.0F;
        rcy = 0.0F;
        rcz = 0.0F;
        sprk = 0;
        elec = false;
        roted = false;
        edl = new int[4];
        edr = new int[4];
        elc = new int[] {
                0, 0, 0, 0
        };
        fix = false;
        fcnt = 0;
        checkpoint = 0;
        fcol = new int[] {
                0, 0, 0
        };
        scol = new int[] {
                0, 0, 0
        };
        colok = 0;
        errd = false;
        err = "";
        roofat = 0;
        wh = 0;
        // p = new Plane[286];
        p = new Plane[10000];
        // int[] is0 = new int[286];
        final int[] is0 = new int[10000];
        // for (int i = 0; i < 286; i++)
        // is0[i] = 0;
        for (int i = 0; i < 10000; i++) {
            is0[i] = 0;
        }
        if (Medium.loadnew) {
            for (int i = 0; i < 4; i++) {
                keyz[i] = 0;
            }
            shadow = true;
        }
        String string = "";
        boolean bool = false;
        boolean bool1 = false;
        int i = 0;
        float f = 1.0F;
        float f2 = 1.0F;
        final float[] fs = {
                1.0F, 1.0F, 1.0F
        };
        final int[] is3 = new int[8000];
        final int[] is4 = new int[8000];
        final int[] is5 = new int[8000];
        final int[] is6 = {
                0, 0, 0
        };
        boolean bool7 = false;
        final Wheels wheels = new Wheels();
        boolean bool8 = false;
        int i9 = 0;
        int i10 = 1;
        int i11 = 0;
        int i12 = 0;
        int i13 = 0;
        int i14 = 0;
        boolean bool15 = false;
        boolean bool16 = false;

        boolean randomcolor = false;
        boolean randoutline = false;

        boolean customstroke = false;
        int strokewidth = 1;
        int strokecap = BasicStroke.CAP_BUTT;
        int strokejoin = BasicStroke.JOIN_MITER;
        int strokemtlimit = 10;

        try {
            final BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new DataInputStream(new ByteArrayInputStream(is))));
            String string17;
            while ((string17 = bufferedreader.readLine()) != null) {
                string = "" + string17.trim();
                if (npl < 10000 /* 210 */) {
                    if (string.startsWith("<p>")) {
                        bool = true;
                        i = 0;
                        i10 = 0;
                        i11 = 0;
                        i13 = 0;
                        is0[npl] = 1;
                        if (!bool16) {
                            bool15 = false;
                        }

                        randomcolor = false;
                        randoutline = false;
                        customstroke = false;
                        strokewidth = 1;
                        strokecap = BasicStroke.CAP_BUTT;
                        strokejoin = BasicStroke.JOIN_MITER;
                        strokemtlimit = 10;
                    }
                    if (bool) {
                        if (string.startsWith("gr(")) {
                            i10 = getvalue("gr", string, 0);
                        }
                        if (string.startsWith("fs(")) {
                            i11 = getvalue("fs", string, 0);
                            is0[npl] = 2;
                        }
                        if (string.startsWith("c(")) {
                            i14 = 0;
                            is6[0] = getvalue("c", string, 0);
                            is6[1] = getvalue("c", string, 1);
                            is6[2] = getvalue("c", string, 2);
                        }
                        if (string.startsWith("glass")) {
                            i14 = 1;
                        }
                        if (string.startsWith("gshadow")) {
                            i14 = 2;
                        }
                        if (string.startsWith("lightF")) {
                            i13 = 1;
                        }
                        if (string.startsWith("light")) {
                            i13 = 1;
                        }
                        if (string.startsWith("lightB")) {
                            i13 = 2;
                        }
                        if (string.startsWith("noOutline")) {
                            bool15 = true;
                        }
                        if (string.startsWith("random()") || string.startsWith("rainbow()")) {
                            randomcolor = true;
                        }
                        if (string.startsWith("randoutline()")) {
                            randoutline = true;
                        }
                        if (string.startsWith("customOutline")) {
                            customstroke = true;
                        }
                        if (string.startsWith("$outlineW(")) {
                            strokewidth = getvalue("$outlineW", string, 0);
                        }
                        if (string.startsWith("$outlineCap(")) {
                            if (string.startsWith("$outlineCap(butt)")) {
                                strokecap = BasicStroke.CAP_BUTT;
                            }
                            if (string.startsWith("$outlineCap(round)")) {
                                strokecap = BasicStroke.CAP_ROUND;
                            }
                            if (string.startsWith("$outlineCap(square)")) {
                                strokecap = BasicStroke.CAP_SQUARE;
                            }
                        }
                        if (string.startsWith("$outlineJoin(")) {
                            if (string.startsWith("$outlineJoin(bevel)")) {
                                strokejoin = BasicStroke.JOIN_BEVEL;
                            }
                            if (string.startsWith("$outlineJoin(miter)")) {
                                strokejoin = BasicStroke.JOIN_MITER;
                            }
                            if (string.startsWith("$outlineJoin(round)")) {
                                strokejoin = BasicStroke.JOIN_ROUND;
                            }
                        }
                        if (string.startsWith("$outlineMtlimit(")) {
                            strokemtlimit = getvalue("$outlineMtlimit", string, 0);
                        }
                        if (string.startsWith("p(")) {
                            is3[i] = (int) (getvalue("p", string, 0) * f * f2 * fs[0]);
                            is4[i] = (int) (getvalue("p", string, 1) * f * fs[1]);
                            is5[i] = (int) (getvalue("p", string, 2) * f * fs[2]);
                            final int i18 = (int) Math.sqrt(is3[i] * is3[i] + is4[i] * is4[i] + is5[i] * is5[i]);
                            if (i18 > maxR) {
                                maxR = i18;
                            }
                            i++;
                        }
                    }
                    if (string.startsWith("</p>")) {
                        p[npl] = new Plane(is3, is5, is4, i, is6, i14, i10, i11, 0, 0, 0, disline, 0, bool7, i13, bool15, randomcolor, randoutline, customstroke, strokewidth, strokecap, strokejoin, strokemtlimit);
                        if (is6[0] == fcol[0] && is6[1] == fcol[1] && is6[2] == fcol[2] && i14 == 0) {
                            p[npl].colnum = 1;
                        }
                        if (is6[0] == scol[0] && is6[1] == scol[1] && is6[2] == scol[2] && i14 == 0) {
                            p[npl].colnum = 2;
                        }
                        npl++;
                        bool = false;
                    }
                }
                if (string.startsWith("rims(")) {
                    wheels.setrims(getvalue("rims", string, 0), getvalue("rims", string, 1), getvalue("rims", string, 2), getvalue("rims", string, 3), getvalue("rims", string, 4));
                }
                if (string.startsWith("w(") && i9 < 4) {
                    keyx[i9] = (int) (getvalue("w", string, 0) * f * fs[0]);
                    keyz[i9] = (int) (getvalue("w", string, 2) * f * fs[2]);
                    wheels.make(p, npl, (int) (getvalue("w", string, 0) * f * f2 * fs[0]), (int) (getvalue("w", string, 1) * f * fs[1]), (int) (getvalue("w", string, 2) * f * fs[2]), getvalue("w", string, 3), (int) (getvalue("w", string, 4) * f * f2), (int) (getvalue("w", string, 5) * f), i12);
                    npl += 19;
                    if (Medium.loadnew) {
                        wh += (int) (getvalue("w", string, 5) * f);
                        if (wheels.ground > 140) {
                            String string19 = "FRONT";
                            if (keyz[i9] < 0) {
                                string19 = "BACK";
                            }
                            err = "Wheels Error:\n" + string19 + " Wheels floor is too far below the center of Y Axis of the car!    \n\nPlease decrease the Y value of the " + string19 + " Wheels or decrease its height.     \n \n";
                            errd = true;
                            keyz[i9] = 0;
                            keyx[i9] = 0;
                        }
                        if (wheels.ground < -100) {
                            String string20 = "FRONT";
                            if (keyz[i9] < 0) {
                                string20 = "BACK";
                            }
                            err = "Wheels Error:\n" + string20 + " Wheels floor is too far above the center of Y Axis of the car!    \n\nPlease increase the Y value of the " + string20 + " Wheels or increase its height.     \n \n";
                            errd = true;
                            keyz[i9] = 0;
                            keyx[i9] = 0;
                        }
                        if (Math.abs(keyx[i9]) > 400) {
                            String string21 = "FRONT";
                            if (keyz[i9] < 0) {
                                string21 = "BACK";
                            }
                            err = "Wheels Error:\n" + string21 + " Wheels are too far apart!    \n\nPlease decrease the \u00b1X value of the " + string21 + " Wheels.     \n \n";
                            errd = true;
                            keyz[i9] = 0;
                            keyx[i9] = 0;
                        }
                        if (Math.abs(keyz[i9]) > 700) {
                            if (keyz[i9] < 0) {
                                err = "Wheels Error:\nBACK Wheels are too far backwards from the center of the Z Axis!    \n\nPlease increase the -Z value of the BACK Wheels.     \n \n";
                            } else {
                                err = "Wheels Error:\nFRONT Wheels are too far forwards from the center of the Z Axis!    \n\nPlease decrease the +Z value of the FRONT Wheels.     \n \n";
                            }
                            errd = true;
                            keyz[i9] = 0;
                            keyx[i9] = 0;
                        }
                        if ((int) (getvalue("w", string, 4) * f * f2) > 300) {
                            String string22 = "FRONT";
                            if (keyz[i9] < 0) {
                                string22 = "BACK";
                            }
                            err = "Wheels Error:\nWidth of the " + string22 + " Wheels is too large!    \n\nPlease decrease the width of the " + string22 + " Wheels.     \n \n";
                            errd = true;
                            keyz[i9] = 0;
                            keyx[i9] = 0;
                        }
                    }
                    i9++;
                }
                if (string.startsWith("tracks")) {
                    final int i23 = getvalue("tracks", string, 0);
                    txy = new int[i23];
                    tzy = new int[i23];
                    tc = new int[i23][3];
                    tradx = new int[i23];
                    tradz = new int[i23];
                    trady = new int[i23];
                    tx = new int[i23];
                    ty = new int[i23];
                    tz = new int[i23];
                    skd = new int[i23];
                    dam = new int[i23];
                    notwall = new boolean[i23];
                    bool8 = true;
                }
                if (bool8) {
                    if (string.startsWith("<track>")) {
                        bool1 = true;
                        notwall[tnt] = false;
                        dam[tnt] = 1;
                        skd[tnt] = 0;
                        ty[tnt] = 0;
                        tx[tnt] = 0;
                        tz[tnt] = 0;
                        txy[tnt] = 0;
                        tzy[tnt] = 0;
                        trady[tnt] = 0;
                        tradx[tnt] = 0;
                        tradz[tnt] = 0;
                        tc[tnt][0] = 0;
                        tc[tnt][1] = 0;
                        tc[tnt][2] = 0;
                    }
                    if (bool1) {
                        if (string.startsWith("c")) {
                            tc[tnt][0] = getvalue("c", string, 0);
                            tc[tnt][1] = getvalue("c", string, 1);
                            tc[tnt][2] = getvalue("c", string, 2);
                        }
                        if (string.startsWith("xy")) {
                            txy[tnt] = getvalue("xy", string, 0);
                        }
                        if (string.startsWith("zy")) {
                            tzy[tnt] = getvalue("zy", string, 0);
                        }
                        if (string.startsWith("radx")) {
                            tradx[tnt] = (int) (getvalue("radx", string, 0) * f);
                        }
                        if (string.startsWith("rady")) {
                            trady[tnt] = (int) (getvalue("rady", string, 0) * f);
                        }
                        if (string.startsWith("radz")) {
                            tradz[tnt] = (int) (getvalue("radz", string, 0) * f);
                        }
                        if (string.startsWith("ty")) {
                            ty[tnt] = (int) (getvalue("ty", string, 0) * f);
                        }
                        if (string.startsWith("tx")) {
                            tx[tnt] = (int) (getvalue("tx", string, 0) * f);
                        }
                        if (string.startsWith("tz")) {
                            tz[tnt] = (int) (getvalue("tz", string, 0) * f);
                        }
                        if (string.startsWith("skid")) {
                            skd[tnt] = getvalue("skid", string, 0);
                        }
                        if (string.startsWith("dam")) {
                            dam[tnt] = 3;
                        }
                        if (string.startsWith("notwall")) {
                            notwall[tnt] = true;
                        }
                    }
                    if (string.startsWith("</track>")) {
                        bool1 = false;
                        tnt++;
                    }
                }
                if (string.startsWith("disp(")) {
                    disp = getvalue("disp", string, 0);
                }
                if (string.startsWith("disline(")) {
                    disline = getvalue("disline", string, 0) * 2;
                }
                if (string.startsWith("shadow")) {
                    shadow = true;
                }
                if (string.startsWith("stonecold")) {
                    noline = true;
                }
                if (string.startsWith("newstone")) {
                    noline = true;
                    bool15 = true;
                    bool16 = true;
                }
                if (string.startsWith("decorative")) {
                    decor = true;
                }
                if (string.startsWith("road")) {
                    bool7 = true;
                }
                if (string.startsWith("notroad")) {
                    bool7 = false;
                }
                if (string.startsWith("grounded(")) {
                    grounded = getvalue("grounded", string, 0) / 100.0F;
                }
                if (string.startsWith("div(")) {
                    f = getvalue("div", string, 0) / 10.0F;
                }
                if (string.startsWith("idiv(")) {
                    f = getvalue("idiv", string, 0) / 100.0F;
                }
                if (string.startsWith("iwid(")) {
                    f2 = getvalue("iwid", string, 0) / 100.0F;
                }
                if (string.startsWith("ScaleX(")) {
                    fs[0] = getvalue("ScaleX", string, 0) / 100.0F;
                }
                if (string.startsWith("ScaleY(")) {
                    fs[1] = getvalue("ScaleY", string, 0) / 100.0F;
                }
                if (string.startsWith("ScaleZ(")) {
                    fs[2] = getvalue("ScaleZ", string, 0) / 100.0F;
                }
                if (string.startsWith("gwgr(")) {
                    i12 = getvalue("gwgr", string, 0);
                    if (Medium.loadnew) {
                        if (i12 > 40) {
                            i12 = 40;
                        }
                        if (i12 < 0 && i12 >= -15) {
                            i12 = -16;
                        }
                        if (i12 < -40) {
                            i12 = -40;
                        }
                    }
                }
                if (string.startsWith("1stColor(")) {
                    fcol[0] = getvalue("1stColor", string, 0);
                    fcol[1] = getvalue("1stColor", string, 1);
                    fcol[2] = getvalue("1stColor", string, 2);
                    colok++;
                }
                if (string.startsWith("2ndColor(")) {
                    scol[0] = getvalue("2ndColor", string, 0);
                    scol[1] = getvalue("2ndColor", string, 1);
                    scol[2] = getvalue("2ndColor", string, 2);
                    colok++;
                }
            }
            bufferedreader.close();
        } catch (final Exception exception) {
            if (exception instanceof RuntimeException)
                throw new RuntimeException(exception);
            else if (!errd) {
                err = "Error While Loading 3D Model\n\nLine:     " + string + "\n\nError Detail:\n" + exception + "           \n \n";
                System.out.println(err);
                errd = true;
            }
        }
        grat = wheels.ground;
        sprkat = wheels.sparkat;
        if (shadow) {
            stg = new int[20];
            rtg = new int[100];
            for (int i24 = 0; i24 < 20; i24++) {
                stg[i24] = 0;
            }
            for (int i25 = 0; i25 < 100; i25++) {
                rtg[i25] = 0;
            }
        }
        if (Medium.loadnew) {
            if (i9 != 0) {
                wh = wh / i9;
            }
            boolean bool26 = false;
            for (int i27 = 0; i27 < npl; i27++) {
                int i28 = 0;
                int i29 = p[i27].ox[0];
                int i30 = p[i27].ox[0];
                int i31 = p[i27].oy[0];
                int i32 = p[i27].oy[0];
                int i33 = p[i27].oz[0];
                int i34 = p[i27].oz[0];
                for (int i35 = 0; i35 < p[i27].n; i35++) {
                    if (p[i27].ox[i35] > i29) {
                        i29 = p[i27].ox[i35];
                    }
                    if (p[i27].ox[i35] < i30) {
                        i30 = p[i27].ox[i35];
                    }
                    if (p[i27].oy[i35] > i31) {
                        i31 = p[i27].oy[i35];
                    }
                    if (p[i27].oy[i35] < i32) {
                        i32 = p[i27].oy[i35];
                    }
                    if (p[i27].oz[i35] > i33) {
                        i33 = p[i27].oz[i35];
                    }
                    if (p[i27].oz[i35] < i34) {
                        i34 = p[i27].oz[i35];
                    }
                }
                if (Math.abs(i29 - i30) <= Math.abs(i31 - i32) && Math.abs(i29 - i30) <= Math.abs(i33 - i34)) {
                    i28 = 1;
                }
                if (Math.abs(i31 - i32) <= Math.abs(i29 - i30) && Math.abs(i31 - i32) <= Math.abs(i33 - i34)) {
                    i28 = 2;
                }
                if (Math.abs(i33 - i34) <= Math.abs(i29 - i30) && Math.abs(i33 - i34) <= Math.abs(i31 - i32)) {
                    i28 = 3;
                }
                if (i28 == 2 && (!bool26 || (i31 + i32) / 2 < roofat)) {
                    roofat = (i31 + i32) / 2;
                    bool26 = true;
                }
                if (is0[i27] == 1) {
                    int i36 = 1000;
                    int i37 = 0;
                    for (int i38 = 0; i38 < p[i27].n; i38++) {
                        int i39 = i38 + 1;
                        if (i39 >= p[i27].n) {
                            i39 -= p[i27].n;
                        }
                        int i40 = i38 + 2;
                        if (i40 >= p[i27].n) {
                            i40 -= p[i27].n;
                        }
                        if (i28 == 1) {
                            int i41 = Math.abs((int) (Math.atan((double) (p[i27].oz[i38] - p[i27].oz[i39]) / (double) (p[i27].oy[i38] - p[i27].oy[i39])) / 0.017453292519943295));
                            int i42 = Math.abs((int) (Math.atan((double) (p[i27].oz[i40] - p[i27].oz[i39]) / (double) (p[i27].oy[i40] - p[i27].oy[i39])) / 0.017453292519943295));
                            if (i41 > 45) {
                                i41 = 90 - i41;
                            } else {
                                i42 = 90 - i42;
                            }
                            if (i41 + i42 < i36) {
                                i36 = i41 + i42;
                                i37 = i38;
                            }
                        }
                        if (i28 == 2) {
                            int i43 = Math.abs((int) (Math.atan((double) (p[i27].oz[i38] - p[i27].oz[i39]) / (double) (p[i27].ox[i38] - p[i27].ox[i39])) / 0.017453292519943295));
                            int i44 = Math.abs((int) (Math.atan((double) (p[i27].oz[i40] - p[i27].oz[i39]) / (double) (p[i27].ox[i40] - p[i27].ox[i39])) / 0.017453292519943295));
                            if (i43 > 45) {
                                i43 = 90 - i43;
                            } else {
                                i44 = 90 - i44;
                            }
                            if (i43 + i44 < i36) {
                                i36 = i43 + i44;
                                i37 = i38;
                            }
                        }
                        if (i28 == 3) {
                            int i45 = Math.abs((int) (Math.atan((double) (p[i27].oy[i38] - p[i27].oy[i39]) / (double) (p[i27].ox[i38] - p[i27].ox[i39])) / 0.017453292519943295));
                            int i46 = Math.abs((int) (Math.atan((double) (p[i27].oy[i40] - p[i27].oy[i39]) / (double) (p[i27].ox[i40] - p[i27].ox[i39])) / 0.017453292519943295));
                            if (i45 > 45) {
                                i45 = 90 - i45;
                            } else {
                                i46 = 90 - i46;
                            }
                            if (i45 + i46 < i36) {
                                i36 = i45 + i46;
                                i37 = i38;
                            }
                        }
                    }
                    if (i37 != 0) {
                        final int[] is47 = new int[p[i27].n];
                        final int[] is48 = new int[p[i27].n];
                        final int[] is49 = new int[p[i27].n];
                        for (int i50 = 0; i50 < p[i27].n; i50++) {
                            is47[i50] = p[i27].ox[i50];
                            is48[i50] = p[i27].oy[i50];
                            is49[i50] = p[i27].oz[i50];
                        }
                        for (int i51 = 0; i51 < p[i27].n; i51++) {
                            int i52 = i51 + i37;
                            if (i52 >= p[i27].n) {
                                i52 -= p[i27].n;
                            }
                            p[i27].ox[i51] = is47[i52];
                            p[i27].oy[i51] = is48[i52];
                            p[i27].oz[i51] = is49[i52];
                        }
                    }
                    if (i28 == 1)
                        if (Math.abs(p[i27].oz[0] - p[i27].oz[1]) > Math.abs(p[i27].oy[0] - p[i27].oy[1])) {
                            if (p[i27].oz[0] > p[i27].oz[1]) {
                                if (p[i27].oy[1] > p[i27].oy[2]) {
                                    p[i27].fs = 1;
                                } else {
                                    p[i27].fs = -1;
                                }
                            } else if (p[i27].oy[1] > p[i27].oy[2]) {
                                p[i27].fs = -1;
                            } else {
                                p[i27].fs = 1;
                            }
                        } else if (p[i27].oy[0] > p[i27].oy[1]) {
                            if (p[i27].oz[1] > p[i27].oz[2]) {
                                p[i27].fs = -1;
                            } else {
                                p[i27].fs = 1;
                            }
                        } else if (p[i27].oz[1] > p[i27].oz[2]) {
                            p[i27].fs = 1;
                        } else {
                            p[i27].fs = -1;
                        }
                    if (i28 == 2)
                        if (Math.abs(p[i27].oz[0] - p[i27].oz[1]) > Math.abs(p[i27].ox[0] - p[i27].ox[1])) {
                            if (p[i27].oz[0] > p[i27].oz[1]) {
                                if (p[i27].ox[1] > p[i27].ox[2]) {
                                    p[i27].fs = -1;
                                } else {
                                    p[i27].fs = 1;
                                }
                            } else if (p[i27].ox[1] > p[i27].ox[2]) {
                                p[i27].fs = 1;
                            } else {
                                p[i27].fs = -1;
                            }
                        } else if (p[i27].ox[0] > p[i27].ox[1]) {
                            if (p[i27].oz[1] > p[i27].oz[2]) {
                                p[i27].fs = 1;
                            } else {
                                p[i27].fs = -1;
                            }
                        } else if (p[i27].oz[1] > p[i27].oz[2]) {
                            p[i27].fs = -1;
                        } else {
                            p[i27].fs = 1;
                        }
                    if (i28 == 3)
                        if (Math.abs(p[i27].oy[0] - p[i27].oy[1]) > Math.abs(p[i27].ox[0] - p[i27].ox[1])) {
                            if (p[i27].oy[0] > p[i27].oy[1]) {
                                if (p[i27].ox[1] > p[i27].ox[2]) {
                                    p[i27].fs = 1;
                                } else {
                                    p[i27].fs = -1;
                                }
                            } else if (p[i27].ox[1] > p[i27].ox[2]) {
                                p[i27].fs = -1;
                            } else {
                                p[i27].fs = 1;
                            }
                        } else if (p[i27].ox[0] > p[i27].ox[1]) {
                            if (p[i27].oy[1] > p[i27].oy[2]) {
                                p[i27].fs = -1;
                            } else {
                                p[i27].fs = 1;
                            }
                        } else if (p[i27].oy[1] > p[i27].oy[2]) {
                            p[i27].fs = 1;
                        } else {
                            p[i27].fs = -1;
                        }
                    boolean bool53 = false;
                    boolean bool54 = false;
                    for (int i55 = 0; i55 < npl; i55++) {
                        if (i55 != i27 && is0[i55] != 0) {
                            int i57 = p[i55].ox[0];
                            int i58 = p[i55].ox[0];
                            int i59 = p[i55].oy[0];
                            int i60 = p[i55].oy[0];
                            int i61 = p[i55].oz[0];
                            int i62 = p[i55].oz[0];
                            for (int i63 = 0; i63 < p[i55].n; i63++) {
                                if (p[i55].ox[i63] > i57) {
                                    i57 = p[i55].ox[i63];
                                }
                                if (p[i55].ox[i63] < i58) {
                                    i58 = p[i55].ox[i63];
                                }
                                if (p[i55].oy[i63] > i59) {
                                    i59 = p[i55].oy[i63];
                                }
                                if (p[i55].oy[i63] < i60) {
                                    i60 = p[i55].oy[i63];
                                }
                                if (p[i55].oz[i63] > i61) {
                                    i61 = p[i55].oz[i63];
                                }
                                if (p[i55].oz[i63] < i62) {
                                    i62 = p[i55].oz[i63];
                                }
                            }
                            final int i64 = (i57 + i58) / 2;
                            final int i65 = (i59 + i60) / 2;
                            final int i66 = (i61 + i62) / 2;
                            final int i67 = (i29 + i30) / 2;
                            final int i68 = (i31 + i32) / 2;
                            final int i69 = (i33 + i34) / 2;
                            if (i28 == 1 && (i65 <= i31 && i65 >= i32 && i66 <= i33 && i66 >= i34 || i68 <= i59 && i68 >= i60 && i69 <= i61 && i69 >= i62)) {
                                if (i57 < i30) {
                                    bool53 = true;
                                }
                                if (i58 > i29) {
                                    bool54 = true;
                                }
                            }
                            if (i28 == 2 && (i64 <= i29 && i64 >= i30 && i66 <= i33 && i66 >= i34 || i67 <= i57 && i67 >= i58 && i69 <= i61 && i69 >= i62)) {
                                if (i59 < i32) {
                                    bool53 = true;
                                }
                                if (i60 > i31) {
                                    bool54 = true;
                                }
                            }
                            if (i28 == 3 && (i64 <= i29 && i64 >= i30 && i65 <= i31 && i65 >= i32 || i67 <= i57 && i67 >= i58 && i68 <= i59 && i68 >= i60)) {
                                if (i61 < i34) {
                                    bool53 = true;
                                }
                                if (i62 > i33) {
                                    bool54 = true;
                                }
                            }
                        }
                        if (bool53 && bool54) {
                            break;
                        }
                    }
                    boolean bool70 = false;
                    if (bool53 && !bool54) {
                        bool70 = true;
                    }
                    if (bool54 && !bool53) {
                        p[i27].fs *= -1;
                        bool70 = true;
                    }
                    if (bool53 && bool54) {
                        p[i27].fs = 0;
                        p[i27].gr = 40;
                        bool70 = true;
                    }
                    if (!bool70) {
                        int i71 = 0;
                        int i72 = 0;
                        if (i28 == 1) {
                            i71 = (i29 + i30) / 2;
                            i72 = i71;
                        }
                        if (i28 == 2) {
                            i71 = (i31 + i32) / 2;
                            i72 = i71;
                        }
                        if (i28 == 3) {
                            i71 = (i33 + i34) / 2;
                            i72 = i71;
                        }
                        for (int i73 = 0; i73 < npl; i73++)
                            if (i73 != i27) {
                                boolean bool74 = false;
                                final boolean[] bools = new boolean[p[i73].n];
                                for (int i75 = 0; i75 < p[i73].n; i75++) {
                                    bools[i75] = false;
                                    for (int i76 = 0; i76 < p[i27].n; i76++)
                                        if (p[i27].ox[i76] == p[i73].ox[i75] && p[i27].oy[i76] == p[i73].oy[i75] && p[i27].oz[i76] == p[i73].oz[i75]) {
                                            bools[i75] = true;
                                            bool74 = true;
                                        }
                                }
                                if (bool74) {
                                    for (int i77 = 0; i77 < p[i73].n; i77++)
                                        if (!bools[i77]) {
                                            if (i28 == 1) {
                                                if (p[i73].ox[i77] > i71) {
                                                    i71 = p[i73].ox[i77];
                                                }
                                                if (p[i73].ox[i77] < i72) {
                                                    i72 = p[i73].ox[i77];
                                                }
                                            }
                                            if (i28 == 2) {
                                                if (p[i73].oy[i77] > i71) {
                                                    i71 = p[i73].oy[i77];
                                                }
                                                if (p[i73].oy[i77] < i72) {
                                                    i72 = p[i73].oy[i77];
                                                }
                                            }
                                            if (i28 == 3) {
                                                if (p[i73].oz[i77] > i71) {
                                                    i71 = p[i73].oz[i77];
                                                }
                                                if (p[i73].oz[i77] < i72) {
                                                    i72 = p[i73].oz[i77];
                                                }
                                            }
                                        }
                                }
                            }
                        if (i28 == 1)
                            if ((i71 + i72) / 2 > (i29 + i30) / 2) {
                                p[i27].fs *= -1;
                            } else if ((i71 + i72) / 2 == (i29 + i30) / 2 && (i29 + i30) / 2 < 0) {
                                p[i27].fs *= -1;
                            }
                        if (i28 == 2)
                            if ((i71 + i72) / 2 > (i31 + i32) / 2) {
                                p[i27].fs *= -1;
                            } else if ((i71 + i72) / 2 == (i31 + i32) / 2 && (i31 + i32) / 2 < 0) {
                                p[i27].fs *= -1;
                            }
                        if (i28 == 3)
                            if ((i71 + i72) / 2 > (i33 + i34) / 2) {
                                p[i27].fs *= -1;
                            } else if ((i71 + i72) / 2 == (i33 + i34) / 2 && (i33 + i34) / 2 < 0) {
                                p[i27].fs *= -1;
                            }
                    }
                    p[i27].deltafntyp();
                }
            }
        }
    }

    ContO(final ContO conto78, final int toX, final int toY, final int toZ, final int i81) {
        keyx = new int[4];
        keyz = new int[4];
        sprkat = 0;
        tnt = 0;
        ust = 0;
        srx = 0;
        sry = 0;
        srz = 0;
        rcx = 0.0F;
        rcy = 0.0F;
        rcz = 0.0F;
        sprk = 0;
        elec = false;
        roted = false;
        edl = new int[4];
        edr = new int[4];
        elc = new int[] {
                0, 0, 0, 0
        };
        fix = false;
        fcnt = 0;
        checkpoint = 0;
        fcol = new int[] {
                0, 0, 0
        };
        scol = new int[] {
                0, 0, 0
        };
        colok = 0;
        errd = false;
        err = "";
        roofat = 0;
        wh = 0;
        npl = conto78.npl;
        maxR = conto78.maxR;
        disp = conto78.disp;
        disline = conto78.disline;
        noline = conto78.noline;
        shadow = conto78.shadow;
        grounded = conto78.grounded;
        decor = conto78.decor;
        if (Medium.loadnew && (i81 == 90 || i81 == -90)) {
            grounded += 10000.0F;
        }
        grat = conto78.grat;
        sprkat = conto78.sprkat;
        p = new Plane[conto78.npl];
        for (int i82 = 0; i82 < npl; i82++) {
            if (conto78.p[i82].master == 1) {
                conto78.p[i82].n = 20;
            }
            p[i82] = new Plane(conto78.p[i82].ox, conto78.p[i82].oz, conto78.p[i82].oy, conto78.p[i82].n, conto78.p[i82].oc, conto78.p[i82].glass, conto78.p[i82].gr, conto78.p[i82].fs, conto78.p[i82].wx, conto78.p[i82].wy, conto78.p[i82].wz, conto78.disline, conto78.p[i82].bfase, conto78.p[i82].road, conto78.p[i82].light, conto78.p[i82].solo, conto78.p[i82].randomcolor, conto78.p[i82].randoutline, conto78.p[i82].customstroke, conto78.p[i82].strokewidth, conto78.p[i82].strokecap, conto78.p[i82].strokejoin, conto78.p[i82].strokemtlimit);
            p[i82].project = conto78.p[i82].project;
        }
        x = toX;
        y = toY;
        z = toZ;
        xz = 0;
        xy = 0;
        zy = 0;
        for (int i83 = 0; i83 < npl; i83++) {
            p[i83].colnum = conto78.p[i83].colnum;
            p[i83].master = conto78.p[i83].master;
            p[i83].rot(p[i83].ox, p[i83].oz, 0, 0, i81, p[i83].n);
            p[i83].loadprojf();
        }
        if (conto78.tnt != 0) {
            for (int i84 = 0; i84 < conto78.tnt; i84++) {
                Trackers.xy[Trackers.nt] = (int) (conto78.txy[i84] * Medium.cos(i81) - conto78.tzy[i84] * Medium.sin(i81));
                Trackers.zy[Trackers.nt] = (int) (conto78.tzy[i84] * Medium.cos(i81) + conto78.txy[i84] * Medium.sin(i81));
                for (int i85 = 0; i85 < 3; i85++) {
                    Trackers.c[Trackers.nt][i85] = (int) (conto78.tc[i84][i85] + conto78.tc[i84][i85] * (Medium.snap[i85] / 100.0F));
                    if (Trackers.c[Trackers.nt][i85] > 255) {
                        Trackers.c[Trackers.nt][i85] = 255;
                    }
                    if (Trackers.c[Trackers.nt][i85] < 0) {
                        Trackers.c[Trackers.nt][i85] = 0;
                    }
                }
                Trackers.x[Trackers.nt] = (int) (x + conto78.tx[i84] * Medium.cos(i81) - conto78.tz[i84] * Medium.sin(i81));
                Trackers.z[Trackers.nt] = (int) (z + conto78.tz[i84] * Medium.cos(i81) + conto78.tx[i84] * Medium.sin(i81));
                Trackers.y[Trackers.nt] = y + conto78.ty[i84];
                Trackers.skd[Trackers.nt] = conto78.skd[i84];
                Trackers.dam[Trackers.nt] = conto78.dam[i84];
                Trackers.notwall[Trackers.nt] = conto78.notwall[i84];
                Trackers.decor[Trackers.nt] = decor;
                int i86 = Math.abs(i81);
                if (i86 == 180) {
                    i86 = 0;
                }
                Trackers.radx[Trackers.nt] = (int) Math.abs(conto78.tradx[i84] * Medium.cos(i86) + conto78.tradz[i84] * Medium.sin(i86));
                Trackers.radz[Trackers.nt] = (int) Math.abs(conto78.tradx[i84] * Medium.sin(i86) + conto78.tradz[i84] * Medium.cos(i86));
                Trackers.rady[Trackers.nt] = conto78.trady[i84];
                Trackers.nt++;
            }
        }
        for (int i87 = 0; i87 < 4; i87++) {
            keyx[i87] = conto78.keyx[i87];
            keyz[i87] = conto78.keyz[i87];
        }
        if (shadow) {
            stg = new int[20];
            sx = new int[20];
            sy = new int[20];
            sz = new int[20];
            scx = new int[20];
            scz = new int[20];
            osmag = new float[20];
            sav = new int[20];
            smag = new float[20][8];
            srgb = new int[20][3];
            sbln = new float[20];
            ust = 0;
            for (int i88 = 0; i88 < 20; i88++) {
                stg[i88] = 0;
            }
            rtg = new int[100];
            rbef = new boolean[100];
            rx = new int[100];
            ry = new int[100];
            rz = new int[100];
            vrx = new float[100];
            vry = new float[100];
            vrz = new float[100];
            for (int i89 = 0; i89 < 100; i89++) {
                rtg[i89] = 0;
            }
        }
    }

    ContO(final int i, final int i90, final int i91, final int i92, final int i93, final int i94) {
        keyx = new int[4];
        keyz = new int[4];
        sprkat = 0;
        tnt = 0;
        ust = 0;
        srx = 0;
        sry = 0;
        srz = 0;
        rcx = 0.0F;
        rcy = 0.0F;
        rcz = 0.0F;
        sprk = 0;
        elec = false;
        roted = false;
        edl = new int[4];
        edr = new int[4];
        elc = new int[] {
                0, 0, 0, 0
        };
        fix = false;
        fcnt = 0;
        checkpoint = 0;
        fcol = new int[] {
                0, 0, 0
        };
        scol = new int[] {
                0, 0, 0
        };
        colok = 0;
        errd = false;
        err = "";
        roofat = 0;
        wh = 0;
        x = i92;
        z = i93;
        y = i94;
        xz = 0;
        xy = 0;
        zy = 0;
        grat = 0;
        sprkat = 0;
        disline = 4;
        noline = true;
        shadow = false;
        grounded = 115.0F;
        decor = true;
        npl = 5;
        p = new Plane[5];
        final Random random = new Random(i);
        final int[] is = new int[8];
        final int[] is95 = new int[8];
        final int[] is96 = new int[8];
        final int[] is97 = new int[8];
        final int[] is98 = new int[8];
        float f = i90;
        float f99 = i91;
        if (f99 < 2.0F) {
            f99 = 2.0F;
        }
        if (f99 > 6.0F) {
            f99 = 6.0F;
        }
        if (f < 2.0F) {
            f = 2.0F;
        }
        if (f > 6.0F) {
            f = 6.0F;
        }
        f /= 1.5F;
        f99 /= 1.5F;
        f99 *= 1.0F + (f - 2.0F) * 0.1786F;
        float f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[0] = -(int) (f100 * f * 0.7071F);
        is95[0] = (int) (f100 * f * 0.7071F);
        f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[1] = 0;
        is95[1] = (int) (f100 * f);
        f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[2] = (int) (f100 * f * 0.7071);
        is95[2] = (int) (f100 * f * 0.7071);
        f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[3] = (int) (f100 * f);
        is95[3] = 0;
        f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[4] = (int) (f100 * f * 0.7071);
        is95[4] = -(int) (f100 * f * 0.7071);
        f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[5] = 0;
        is95[5] = -(int) (f100 * f);
        f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[6] = -(int) (f100 * f * 0.7071);
        is95[6] = -(int) (f100 * f * 0.7071);
        f100 = (float) (50.0 + 100.0 * random.nextDouble());
        is[7] = -(int) (f100 * f);
        is95[7] = 0;
        for (int i101 = 0; i101 < 8; i101++) {
            is96[i101] = (int) (is[i101] * (0.2 + 0.4 * random.nextDouble()));
            is97[i101] = (int) (is95[i101] * (0.2 + 0.4 * random.nextDouble()));
            is98[i101] = -(int) ((10.0 + 15.0 * random.nextDouble()) * f99);
        }
        maxR = 0;
        for (int i102 = 0; i102 < 8; i102++) {
            int i103 = i102 - 1;
            if (i103 == -1) {
                i103 = 7;
            }
            int i104 = i102 + 1;
            if (i104 == 8) {
                i104 = 0;
            }
            is[i102] = ((is[i103] + is[i104]) / 2 + is[i102]) / 2;
            is95[i102] = ((is95[i103] + is95[i104]) / 2 + is95[i102]) / 2;
            is96[i102] = ((is96[i103] + is96[i104]) / 2 + is96[i102]) / 2;
            is97[i102] = ((is97[i103] + is97[i104]) / 2 + is97[i102]) / 2;
            is98[i102] = ((is98[i103] + is98[i104]) / 2 + is98[i102]) / 2;
            int i105 = (int) Math.sqrt(is[i102] * is[i102] + is95[i102] * is95[i102]);
            if (i105 > maxR) {
                maxR = i105;
            }
            i105 = (int) Math.sqrt(is96[i102] * is96[i102] + is98[i102] * is98[i102] + is97[i102] * is97[i102]);
            if (i105 > maxR) {
                maxR = i105;
            }
        }
        disp = maxR / 17;
        final int[] is106 = new int[3];
        float f107 = -1.0F;
        float f108 = (f / f99 - 0.33F) / 33.4F;
        if (f108 < 0.005) {
            f108 = 0.0F;
        }
        if (f108 > 0.057) {
            f108 = 0.057F;
        }
        for (int i109 = 0; i109 < 4; i109++) {
            final int i110 = i109 * 2;
            int i111 = i110 + 2;
            if (i111 == 8) {
                i111 = 0;
            }
            final int[] is112 = new int[6];
            final int[] is113 = new int[6];
            final int[] is114 = new int[6];
            is112[0] = is[i110];
            is112[1] = is[i110 + 1];
            is112[2] = is[i111];
            is112[5] = is96[i110];
            is112[4] = is96[i110 + 1];
            is112[3] = is96[i111];
            is114[0] = is95[i110];
            is114[1] = is95[i110 + 1];
            is114[2] = is95[i111];
            is114[5] = is97[i110];
            is114[4] = is97[i110 + 1];
            is114[3] = is97[i111];
            is113[0] = 0;
            is113[1] = 0;
            is113[2] = 0;
            is113[5] = is98[i110];
            is113[4] = is98[i110 + 1];
            is113[3] = is98[i111];
            for (f100 = (float) ((0.17 - f108) * random.nextDouble()); Math.abs(f107 - f100) < 0.03 - f108 * 0.176F; f100 = (float) ((0.17 - f108) * random.nextDouble())) {

            }
            f107 = f100;
            for (int i115 = 0; i115 < 3; i115++)
                if (Medium.trk == 2) {
                    is106[i115] = (int) (390.0F / (2.2F + f100 - f108));
                } else {
                    is106[i115] = (int) ((Medium.cpol[i115] + Medium.cgrnd[i115]) / (2.2F + f100 - f108));
                }
            p[i109] = new Plane(is112, is114, is113, 6, is106, 3, -8, 0, 0, 0, 0, disline, 0, true, 0, false, false, false, false, 1, 0, 0, 10);
        }
        f100 = (float) (0.02 * random.nextDouble());
        for (int i116 = 0; i116 < 3; i116++)
            if (Medium.trk == 2) {
                is106[i116] = (int) (390.0F / (2.15F + f100));
            } else {
                is106[i116] = (int) ((Medium.cpol[i116] + Medium.cgrnd[i116]) / (2.15F + f100));
            }
        p[4] = new Plane(is96, is97, is98, 8, is106, 3, -8, 0, 0, 0, 0, disline, 0, true, 0, false, false, false, false, 1, 0, 0, 10);
        final int[] is117 = new int[2];
        final int[] is118 = new int[2];
        for (int i119 = 0; i119 < 4; i119++) {
            int i120 = i119 * 2 + 1;
            Trackers.y[Trackers.nt] = is98[i120] / 2;
            Trackers.rady[Trackers.nt] = Math.abs(is98[i120] / 2);
            if (i119 == 0 || i119 == 2) {
                Trackers.z[Trackers.nt] = (is95[i120] + is97[i120]) / 2;
                Trackers.radz[Trackers.nt] = Math.abs(Trackers.z[Trackers.nt] - is95[i120]);
                i120 = i119 * 2 + 2;
                if (i120 == 8) {
                    i120 = 0;
                }
                Trackers.x[Trackers.nt] = (is[i119 * 2] + is[i120]) / 2;
                Trackers.radx[Trackers.nt] = Math.abs(Trackers.x[Trackers.nt] - is[i119 * 2]);
            } else {
                Trackers.x[Trackers.nt] = (is[i120] + is96[i120]) / 2;
                Trackers.radx[Trackers.nt] = Math.abs(Trackers.x[Trackers.nt] - is[i120]);
                i120 = i119 * 2 + 2;
                if (i120 == 8) {
                    i120 = 0;
                }
                Trackers.z[Trackers.nt] = (is95[i119 * 2] + is95[i120]) / 2;
                Trackers.radz[Trackers.nt] = Math.abs(Trackers.z[Trackers.nt] - is95[i119 * 2]);
            }
            if (i119 == 0) {
                is118[0] = Trackers.z[Trackers.nt] - Trackers.radz[Trackers.nt];
                Trackers.zy[Trackers.nt] = (int) (Math.atan((double) Trackers.rady[Trackers.nt] / (double) Trackers.radz[Trackers.nt]) / 0.017453292519943295);
                if (Trackers.zy[Trackers.nt] > 40) {
                    Trackers.zy[Trackers.nt] = 40;
                }
                Trackers.xy[Trackers.nt] = 0;
            }
            if (i119 == 1) {
                is117[0] = Trackers.x[Trackers.nt] - Trackers.radx[Trackers.nt];
                Trackers.xy[Trackers.nt] = (int) (Math.atan((double) Trackers.rady[Trackers.nt] / (double) Trackers.radx[Trackers.nt]) / 0.017453292519943295);
                if (Trackers.xy[Trackers.nt] > 40) {
                    Trackers.xy[Trackers.nt] = 40;
                }
                Trackers.zy[Trackers.nt] = 0;
            }
            if (i119 == 2) {
                is118[1] = Trackers.z[Trackers.nt] + Trackers.radz[Trackers.nt];
                Trackers.zy[Trackers.nt] = -(int) (Math.atan((double) Trackers.rady[Trackers.nt] / (double) Trackers.radz[Trackers.nt]) / 0.017453292519943295);
                if (Trackers.zy[Trackers.nt] < -40) {
                    Trackers.zy[Trackers.nt] = -40;
                }
                Trackers.xy[Trackers.nt] = 0;
            }
            if (i119 == 3) {
                is117[1] = Trackers.x[Trackers.nt] + Trackers.radx[Trackers.nt];
                Trackers.xy[Trackers.nt] = -(int) (Math.atan((double) Trackers.rady[Trackers.nt] / (double) Trackers.radx[Trackers.nt]) / 0.017453292519943295);
                if (Trackers.xy[Trackers.nt] < -40) {
                    Trackers.xy[Trackers.nt] = -40;
                }
                Trackers.zy[Trackers.nt] = 0;
            }
            Trackers.x[Trackers.nt] += x;
            Trackers.z[Trackers.nt] += z;
            Trackers.y[Trackers.nt] += y;
            System.arraycopy(p[i119].oc, 0, Trackers.c[Trackers.nt], 0, 3);
            Trackers.skd[Trackers.nt] = 2;
            Trackers.dam[Trackers.nt] = 1;
            Trackers.notwall[Trackers.nt] = false;
            Trackers.decor[Trackers.nt] = true;
            Trackers.rady[Trackers.nt] += 10;
            Trackers.nt++;
        }
        Trackers.y[Trackers.nt] = 0;
        for (int i122 = 0; i122 < 8; i122++) {
            Trackers.y[Trackers.nt] += is98[i122];
        }
        Trackers.y[Trackers.nt] = Trackers.y[Trackers.nt] / 8;
        Trackers.y[Trackers.nt] += y;
        Trackers.rady[Trackers.nt] = 200;
        Trackers.radx[Trackers.nt] = is117[0] - is117[1];
        Trackers.radz[Trackers.nt] = is118[0] - is118[1];
        Trackers.x[Trackers.nt] = (is117[0] + is117[1]) / 2 + x;
        Trackers.z[Trackers.nt] = (is118[0] + is118[1]) / 2 + z;
        Trackers.zy[Trackers.nt] = 0;
        Trackers.xy[Trackers.nt] = 0;
        System.arraycopy(p[4].oc, 0, Trackers.c[Trackers.nt], 0, 3);
        Trackers.skd[Trackers.nt] = 4;
        Trackers.dam[Trackers.nt] = 1;
        Trackers.notwall[Trackers.nt] = false;
        Trackers.decor[Trackers.nt] = true;
        Trackers.nt++;
    }

    void d(final Graphics2D graphics2d) {
        if (dist != 0) {
            dist = 0;
        }
        final int i = Medium.cx + (int) ((x - Medium.x - Medium.cx) * Medium.cos(Medium.xz) - (z - Medium.z - Medium.cz) * Medium.sin(Medium.xz));
        final int i124 = Medium.cz + (int) ((x - Medium.x - Medium.cx) * Medium.sin(Medium.xz) + (z - Medium.z - Medium.cz) * Medium.cos(Medium.xz));
        final int i125 = Medium.cz + (int) ((y - Medium.y - Medium.cy) * Medium.sin(Medium.zy) + (i124 - Medium.cz) * Medium.cos(Medium.zy));
        int i126 = xs(i + maxR, i125) - xs(i - maxR, i125);
        if (xs(i + maxR * 2, i125) > Medium.iw && xs(i - maxR * 2, i125) < Medium.w && i125 > -maxR && (i125 < Medium.fade[disline] + maxR || Medium.trk != 0) && (i126 > disp || Medium.trk != 0) && (!decor || Medium.resdown != 2 && Medium.trk != 1)) {
            if (shadow)
                if (!Medium.crs) {
                    if (i125 < 2000) {
                        boolean bool = false;
                        if (Trackers.ncx != 0 || Trackers.ncz != 0) {
                            int i127 = (x - Trackers.sx) / 3000;
                            if (i127 > Trackers.ncx) {
                                i127 = Trackers.ncx;
                            }
                            if (i127 < 0) {
                                i127 = 0;
                            }
                            int i128 = (z - Trackers.sz) / 3000;
                            if (i128 > Trackers.ncz) {
                                i128 = Trackers.ncz;
                            }
                            if (i128 < 0) {
                                i128 = 0;
                            }
                            for (int i129 = Trackers.sect[i127][i128].length - 1; i129 >= 0; i129--) {
                                final int i130 = Trackers.sect[i127][i128][i129];
                                if (Math.abs(Trackers.zy[i130]) != 90 && Math.abs(Trackers.xy[i130]) != 90 && Math.abs(x - Trackers.x[i130]) < Trackers.radx[i130] + maxR && Math.abs(z - Trackers.z[i130]) < Trackers.radz[i130] + maxR && (!Trackers.decor[i130] || Medium.resdown != 2)) {
                                    bool = true;
                                    break;
                                }
                            }
                        }
                        if (bool) {
                            for (int i131 = 0; i131 < npl; i131++) {
                                p[i131].s(graphics2d, x - Medium.x, y - Medium.y, z - Medium.z, xz, xy, zy, 0);
                            }
                        } else {
                            final int i132 = Medium.cy + (int) ((Medium.ground - Medium.cy) * Medium.cos(Medium.zy) - (i124 - Medium.cz) * Medium.sin(Medium.zy));
                            final int i133 = Medium.cz + (int) ((Medium.ground - Medium.cy) * Medium.sin(Medium.zy) + (i124 - Medium.cz) * Medium.cos(Medium.zy));
                            if (ys(i132 + maxR, i133) > 0 && ys(i132 - maxR, i133) < Medium.h) {
                                for (int i134 = 0; i134 < npl; i134++) {
                                    p[i134].s(graphics2d, x - Medium.x, y - Medium.y, z - Medium.z, xz, xy, zy, 1);
                                }
                            }
                        }
                        Medium.addsp(x - Medium.x, z - Medium.z, (int) (maxR * 0.8));
                    } else {
                        lowshadow(graphics2d, i125);
                    }
                } else {
                    for (int i135 = 0; i135 < npl; i135++) {
                        p[i135].s(graphics2d, x - Medium.x, y - Medium.y, z - Medium.z, xz, xy, zy, 2);
                    }
                }
            final int i136 = Medium.cy + (int) ((y - Medium.y - Medium.cy) * Medium.cos(Medium.zy) - (i124 - Medium.cz) * Medium.sin(Medium.zy));
            if (ys(i136 + maxR, i125) > Medium.ih && ys(i136 - maxR, i125) < Medium.h) {
                if (elec && Medium.noelec == 0) {
                    electrify(graphics2d);
                }
                if (fix) {
                    fixit(graphics2d);
                }
                if (checkpoint != 0 && checkpoint - 1 == Medium.checkpoint) {
                    i126 = -1;
                }
                if (shadow) {
                    dist = (int) Math.sqrt((Medium.x + Medium.cx - x) * (Medium.x + Medium.cx - x) + (Medium.z - z) * (Medium.z - z) + (Medium.y + Medium.cy - y) * (Medium.y + Medium.cy - y));
                    for (int i137 = 0; i137 < 20; i137++)
                        if (stg[i137] != 0) {
                            pdust(i137, graphics2d, true);
                        }
                    dsprk(graphics2d, true);
                }
                Arrays.sort(p, 0, npl);
                
                int _npl = npl - 1;
                p[0].d(p[0], p[1], graphics2d, x - Medium.x, y - Medium.y, z - Medium.z, xz, xy, zy, wxz, wzy, noline, i126);
                for (int j = 1; j < _npl; j++) {
                    p[j].d(p[j-1], p[j+1], graphics2d, x - Medium.x, y - Medium.y, z - Medium.z, xz, xy, zy, wxz, wzy, noline, i126);
                }
                p[_npl].d(p[_npl-1], null, graphics2d, x - Medium.x, y - Medium.y, z - Medium.z, xz, xy, zy, wxz, wzy, noline, i126);
                
                if (shadow) {
                    for (int i143 = 0; i143 < 20; i143++)
                        if (stg[i143] != 0) {
                            pdust(i143, graphics2d, false);
                        }
                    dsprk(graphics2d, false);
                }
                dist = (int) (Math.sqrt((int) Math.sqrt((Medium.x + Medium.cx - x) * (Medium.x + Medium.cx - x) + (Medium.z - z) * (Medium.z - z) + (Medium.y + Medium.cy - y) * (Medium.y + Medium.cy - y))) * grounded);
            }
        }
        if (shadow && dist == 0) {
            for (int i144 = 0; i144 < 20; i144++)
                if (stg[i144] != 0) {
                    stg[i144] = 0;
                }
            for (int i145 = 0; i145 < 100; i145++)
                if (rtg[i145] != 0) {
                    rtg[i145] = 0;
                }
            if (sprk != 0) {
                sprk = 0;
            }
        }
    }

    private void dsprk(final Graphics2D graphics2d, final boolean bool) {
        if (bool && sprk != 0) {
            int i = (int) (Math.sqrt(rcx * rcx + rcy * rcy + rcz * rcz) / 10.0);
            if (i > 5) {
                boolean bool240 = false;
                if (dist < Math.sqrt((Medium.x + Medium.cx - srx) * (Medium.x + Medium.cx - srx) + (Medium.y + Medium.cy - sry) * (Medium.y + Medium.cy - sry) + (Medium.z - srz) * (Medium.z - srz))) {
                    bool240 = true;
                }
                if (i > 33) {
                    i = 33;
                }
                int i241 = 0;
                for (int i242 = 0; i242 < 100; i242++) {
                    if (rtg[i242] == 0) {
                        rtg[i242] = 1;
                        rbef[i242] = bool240;
                        i241++;
                    }
                    if (i241 == i) {
                        break;
                    }
                }
            }
        }
        for (int i = 0; i < 100; i++)
            if (rtg[i] != 0 && (rbef[i] && bool || !rbef[i] && !bool)) {
                if (rtg[i] == 1) {
                    if (sprk < 5) {
                        rx[i] = srx + 3 - (int) (Medium.random() * 6.7);
                        ry[i] = sry + 3 - (int) (Medium.random() * 6.7);
                        rz[i] = srz + 3 - (int) (Medium.random() * 6.7);
                    } else {
                        rx[i] = srx + 10 - (int) (Medium.random() * 20.0F);
                        ry[i] = sry - (int) (Medium.random() * 4.0F);
                        rz[i] = srz + 10 - (int) (Medium.random() * 20.0F);
                    }
                    final int i243 = (int) Math.sqrt(rcx * rcx + rcy * rcy + rcz * rcz);
                    final float f = 0.2F + 0.4F * Medium.random();
                    final float f244 = Medium.random() * Medium.random() * Medium.random();
                    float f245 = 1.0F;
                    if (Medium.random() > Medium.random()) {
                        if (Medium.random() > Medium.random()) {
                            f245 *= -1.0F;
                        }
                        vrx[i] = -((rcx + i243 * (1.0F - rcx / i243) * f244 * f245) * f);
                    }
                    if (Medium.random() > Medium.random()) {
                        if (Medium.random() > Medium.random()) {
                            f245 *= -1.0F;
                        }
                        if (sprk == 5) {
                            f245 = 1.0F;
                        }
                        vry[i] = -((rcy + i243 * (1.0F - rcy / i243) * f244 * f245) * f);
                    }
                    if (Medium.random() > Medium.random()) {
                        if (Medium.random() > Medium.random()) {
                            f245 *= -1.0F;
                        }
                        vrz[i] = -((rcz + i243 * (1.0F - rcz / i243) * f244 * f245) * f);
                    }
                }
                rx[i] += vrx[i];
                ry[i] += vry[i];
                rz[i] += vrz[i];
                final int i246 = Medium.cx + (int) ((rx[i] - Medium.x - Medium.cx) * Medium.cos(Medium.xz) - (rz[i] - Medium.z - Medium.cz) * Medium.sin(Medium.xz));
                int i247 = Medium.cz + (int) ((rx[i] - Medium.x - Medium.cx) * Medium.sin(Medium.xz) + (rz[i] - Medium.z - Medium.cz) * Medium.cos(Medium.xz));
                final int i248 = Medium.cy + (int) ((ry[i] - Medium.y - Medium.cy) * Medium.cos(Medium.zy) - (i247 - Medium.cz) * Medium.sin(Medium.zy));
                i247 = Medium.cz + (int) ((ry[i] - Medium.y - Medium.cy) * Medium.sin(Medium.zy) + (i247 - Medium.cz) * Medium.cos(Medium.zy));
                final int i249 = Medium.cx + (int) ((rx[i] - Medium.x - Medium.cx + vrx[i]) * Medium.cos(Medium.xz) - (rz[i] - Medium.z - Medium.cz + vrz[i]) * Medium.sin(Medium.xz));
                int i250 = Medium.cz + (int) ((rx[i] - Medium.x - Medium.cx + vrx[i]) * Medium.sin(Medium.xz) + (rz[i] - Medium.z - Medium.cz + vrz[i]) * Medium.cos(Medium.xz));
                final int i251 = Medium.cy + (int) ((ry[i] - Medium.y - Medium.cy + vry[i]) * Medium.cos(Medium.zy) - (i250 - Medium.cz) * Medium.sin(Medium.zy));
                i250 = Medium.cz + (int) ((ry[i] - Medium.y - Medium.cy + vry[i]) * Medium.sin(Medium.zy) + (i250 - Medium.cz) * Medium.cos(Medium.zy));
                final int i252 = xs(i246, i247);
                final int i253 = ys(i248, i247);
                final int i254 = xs(i249, i250);
                final int i255 = ys(i251, i250);
                if (i252 < Medium.iw && i254 < Medium.iw) {
                    rtg[i] = 0;
                }
                if (i252 > Medium.w && i254 > Medium.w) {
                    rtg[i] = 0;
                }
                if (i253 < Medium.ih && i255 < Medium.ih) {
                    rtg[i] = 0;
                }
                if (i253 > Medium.h && i255 > Medium.h) {
                    rtg[i] = 0;
                }
                if (ry[i] > 250) {
                    rtg[i] = 0;
                }
                if (rtg[i] != 0) {
                    int i256 = 255;
                    int i257 = 197 - 30 * rtg[i];
                    int i258 = 0;
                    for (int i259 = 0; i259 < 16; i259++)
                        if (i247 > Medium.fade[i259]) {
                            i256 = (i256 * Medium.fogd + Medium.cfade[0]) / (Medium.fogd + 1);
                            i257 = (i257 * Medium.fogd + Medium.cfade[1]) / (Medium.fogd + 1);
                            i258 = (i258 * Medium.fogd + Medium.cfade[2]) / (Medium.fogd + 1);
                        }
                    graphics2d.setColor(new Color(i256, i257, i258));
                    graphics2d.drawLine(i252, i253, i254, i255);
                    vrx[i] = vrx[i] * 0.8F;
                    vry[i] = vry[i] * 0.8F;
                    vrz[i] = vrz[i] * 0.8F;
                    if (rtg[i] == 3) {
                        rtg[i] = 0;
                    } else {
                        rtg[i]++;
                    }
                }
            }
        if (sprk != 0) {
            sprk = 0;
        }
    }

    void dust(final int i, final float f, final float f199, final float f200, final int i201, final int i202, final float f203, final int i204, final boolean bool) {
        boolean bool205 = false;
        if (i204 > 5 && (i == 0 || i == 2)) {
            bool205 = true;
        }
        if (i204 < -5 && (i == 1 || i == 3)) {
            bool205 = true;
        }
        float f206 = (float) ((Math.sqrt(i201 * i201 + i202 * i202) - 40.0) / 160.0);
        if (f206 > 1.0F) {
            f206 = 1.0F;
        }
        if (f206 > 0.2 && !bool205) {
            ust++;
            if (ust == 20) {
                ust = 0;
            }
            if (!bool) {
                final float f207 = Medium.random();
                sx[ust] = (int) ((f + x * f207) / (1.0F + f207));
                sz[ust] = (int) ((f200 + z * f207) / (1.0F + f207));
                sy[ust] = (int) ((f199 + y * f207) / (1.0F + f207));
            } else {
                sx[ust] = (int) ((f + (x + i201)) / 2.0F);
                sz[ust] = (int) ((f200 + (z + i202)) / 2.0F);
                sy[ust] = (int) f199;
            }
            if (sy[i] > 250) {
                sy[i] = 250;
            }
            osmag[ust] = f203 * f206;
            scx[ust] = i201;
            scz[ust] = i202;
            stg[ust] = 1;
        }
    }

    private void electrify(final Graphics2D graphics2d) {
        for (int i = 0; i < 4; i++) {
            if (elc[i] == 0) {
                edl[i] = (int) (380.0F - Medium.random() * 760.0F);
                edr[i] = (int) (380.0F - Medium.random() * 760.0F);
                elc[i] = 1;
            }
            final int i182 = (int) (edl[i] + (190.0F - Medium.random() * 380.0F));
            final int i183 = (int) (edr[i] + (190.0F - Medium.random() * 380.0F));
            final int i184 = (int) (Medium.random() * 126.0F);
            final int i185 = (int) (Medium.random() * 126.0F);
            final int[] is = new int[8];
            final int[] is186 = new int[8];
            final int[] is187 = new int[8];
            for (int i188 = 0; i188 < 8; i188++) {
                is187[i188] = z - Medium.z;
            }
            is[0] = x - Medium.x - 504;
            is186[0] = y - Medium.y - edl[i] - 5 - (int) (Medium.random() * 5.0F);
            is[1] = x - Medium.x - 252 + i185;
            is186[1] = y - Medium.y - i182 - 5 - (int) (Medium.random() * 5.0F);
            is[2] = x - Medium.x + 252 - i184;
            is186[2] = y - Medium.y - i183 - 5 - (int) (Medium.random() * 5.0F);
            is[3] = x - Medium.x + 504;
            is186[3] = y - Medium.y - edr[i] - 5 - (int) (Medium.random() * 5.0F);
            is[4] = x - Medium.x + 504;
            is186[4] = y - Medium.y - edr[i] + 5 + (int) (Medium.random() * 5.0F);
            is[5] = x - Medium.x + 252 - i184;
            is186[5] = y - Medium.y - i183 + 5 + (int) (Medium.random() * 5.0F);
            is[6] = x - Medium.x - 252 + i185;
            is186[6] = y - Medium.y - i182 + 5 + (int) (Medium.random() * 5.0F);
            is[7] = x - Medium.x - 504;
            is186[7] = y - Medium.y - edl[i] + 5 + (int) (Medium.random() * 5.0F);
            if (roted) {
                rot(is, is187, x - Medium.x, z - Medium.z, 90, 8);
            }
            rot(is, is187, Medium.cx, Medium.cz, Medium.xz, 8);
            rot(is186, is187, Medium.cy, Medium.cz, Medium.zy, 8);
            boolean bool = true;
            int i189 = 0;
            int i190 = 0;
            int i191 = 0;
            int i192 = 0;
            final int[] is193 = new int[8];
            final int[] is194 = new int[8];
            for (int i195 = 0; i195 < 8; i195++) {
                is193[i195] = xs(is[i195], is187[i195]);
                is194[i195] = ys(is186[i195], is187[i195]);
                if (is194[i195] < Medium.ih || is187[i195] < 10) {
                    i189++;
                }
                if (is194[i195] > Medium.h || is187[i195] < 10) {
                    i190++;
                }
                if (is193[i195] < Medium.iw || is187[i195] < 10) {
                    i191++;
                }
                if (is193[i195] > Medium.w || is187[i195] < 10) {
                    i192++;
                }
            }
            if (i191 == 8 || i189 == 8 || i190 == 8 || i192 == 8) {
                bool = false;
            }
            if (bool) {
                int i196 = (int) (160.0F + 160.0F * (Medium.snap[0] / 500.0F));
                if (i196 > 255) {
                    i196 = 255;
                }
                if (i196 < 0) {
                    i196 = 0;
                }
                int i197 = (int) (238.0F + 238.0F * (Medium.snap[1] / 500.0F));
                if (i197 > 255) {
                    i197 = 255;
                }
                if (i197 < 0) {
                    i197 = 0;
                }
                int i198 = (int) (255.0F + 255.0F * (Medium.snap[2] / 500.0F));
                if (i198 > 255) {
                    i198 = 255;
                }
                if (i198 < 0) {
                    i198 = 0;
                }
                i196 = (i196 * 2 + 214 * (elc[i] - 1)) / (elc[i] + 1);
                i197 = (i197 * 2 + 236 * (elc[i] - 1)) / (elc[i] + 1);
                if (Medium.trk == 1) {
                    i196 = 255;
                    i197 = 128;
                    i198 = 0;
                }
                graphics2d.setColor(new Color(i196, i197, i198));
                graphics2d.fillPolygon(is193, is194, 8);
                if (is187[0] < 4000) {
                    i196 = (int) (150.0F + 150.0F * (Medium.snap[0] / 500.0F));
                    if (i196 > 255) {
                        i196 = 255;
                    }
                    if (i196 < 0) {
                        i196 = 0;
                    }
                    i197 = (int) (227.0F + 227.0F * (Medium.snap[1] / 500.0F));
                    if (i197 > 255) {
                        i197 = 255;
                    }
                    if (i197 < 0) {
                        i197 = 0;
                    }
                    i198 = (int) (255.0F + 255.0F * (Medium.snap[2] / 500.0F));
                    if (i198 > 255) {
                        i198 = 255;
                    }
                    if (i198 < 0) {
                        i198 = 0;
                    }
                    graphics2d.setColor(new Color(i196, i197, i198));
                    graphics2d.drawPolygon(is193, is194, 8);
                }
            }
            if (elc[i] > Medium.random() * 60.0F) {
                elc[i] = 0;
            } else {
                elc[i]++;
            }
        }
        if (!roted || xz != 0) {
            xy += 11;
            if (xy > 360) {
                xy -= 360;
            }
        } else {
            zy += 11;
            if (zy > 360) {
                zy -= 360;
            }
        }
    }

    private void fixit(final Graphics2D graphics2d) {
        if (fcnt == 1) {
            for (int i = 0; i < npl; i++) {
                p[i].hsb[0] = 0.57F;
                p[i].hsb[2] = 0.8F;
                p[i].hsb[1] = 0.8F;
                final Color color = Color.getHSBColor(p[i].hsb[0], p[i].hsb[1], p[i].hsb[2]);
                int i167 = (int) (color.getRed() + color.getRed() * (Medium.snap[0] / 100.0F));
                if (i167 > 255) {
                    i167 = 255;
                }
                if (i167 < 0) {
                    i167 = 0;
                }
                int i168 = (int) (color.getGreen() + color.getGreen() * (Medium.snap[1] / 100.0F));
                if (i168 > 255) {
                    i168 = 255;
                }
                if (i168 < 0) {
                    i168 = 0;
                }
                int i169 = (int) (color.getBlue() + color.getBlue() * (Medium.snap[2] / 100.0F));
                if (i169 > 255) {
                    i169 = 255;
                }
                if (i169 < 0) {
                    i169 = 0;
                }
                Color.RGBtoHSB(i167, i168, i169, p[i].hsb);
                p[i].flx = 1;
            }
        }
        if (fcnt == 2) {
            for (int i = 0; i < npl; i++) {
                p[i].flx = 1;
            }
        }
        if (fcnt == 4) {
            for (int i = 0; i < npl; i++) {
                p[i].flx = 3;
            }
        }
        if ((fcnt == 1 || fcnt > 2) && fcnt != 9) {
            final int[] is = new int[8];
            final int[] is170 = new int[8];
            final int[] is171 = new int[4];
            for (int i = 0; i < 4; i++) {
                is[i] = keyx[i] + x - Medium.x;
                is170[i] = grat + y - Medium.y;
                is171[i] = keyz[i] + z - Medium.z;
            }
            rot(is, is170, x - Medium.x, y - Medium.y, xy, 4);
            rot(is170, is171, y - Medium.y, z - Medium.y, zy, 4);
            rot(is, is171, x - Medium.x, z - Medium.z, xz, 4);
            rot(is, is171, Medium.cx, Medium.cz, Medium.xz, 4);
            rot(is170, is171, Medium.cy, Medium.cz, Medium.zy, 4);
            int i = 0;
            int i172 = 0;
            int i173 = 0;
            for (int i174 = 0; i174 < 4; i174++) {
                for (int i175 = 0; i175 < 4; i175++) {
                    if (Math.abs(is[i174] - is[i175]) > i) {
                        i = Math.abs(is[i174] - is[i175]);
                    }
                    if (Math.abs(is170[i174] - is170[i175]) > i172) {
                        i172 = Math.abs(is170[i174] - is170[i175]);
                    }
                    if (py(is[i174], is[i175], is170[i174], is170[i175]) > i173) {
                        i173 = py(is[i174], is[i175], is170[i174], is170[i175]);
                    }
                }
            }
            i173 = (int) (Math.sqrt(i173) / 1.5);
            if (i < i173) {
                i = i173;
            }
            if (i172 < i173) {
                i172 = i173;
            }
            final int i176 = Medium.cx + (int) ((x - Medium.x - Medium.cx) * Medium.cos(Medium.xz) - (z - Medium.z - Medium.cz) * Medium.sin(Medium.xz));
            int i177 = Medium.cz + (int) ((x - Medium.x - Medium.cx) * Medium.sin(Medium.xz) + (z - Medium.z - Medium.cz) * Medium.cos(Medium.xz));
            final int i178 = Medium.cy + (int) ((y - Medium.y - Medium.cy) * Medium.cos(Medium.zy) - (i177 - Medium.cz) * Medium.sin(Medium.zy));
            i177 = Medium.cz + (int) ((y - Medium.y - Medium.cy) * Medium.sin(Medium.zy) + (i177 - Medium.cz) * Medium.cos(Medium.zy));
            is[0] = xs((int) (i176 - i / 0.8 - Medium.random() * (i / 2.4)), i177);
            is170[0] = ys((int) (i178 - i172 / 1.92 - Medium.random() * (i172 / 5.67)), i177);
            is[1] = xs((int) (i176 - i / 0.8 - Medium.random() * (i / 2.4)), i177);
            is170[1] = ys((int) (i178 + i172 / 1.92 + Medium.random() * (i172 / 5.67)), i177);
            is[2] = xs((int) (i176 - i / 1.92 - Medium.random() * (i / 5.67)), i177);
            is170[2] = ys((int) (i178 + i172 / 0.8 + Medium.random() * (i172 / 2.4)), i177);
            is[3] = xs((int) (i176 + i / 1.92 + Medium.random() * (i / 5.67)), i177);
            is170[3] = ys((int) (i178 + i172 / 0.8 + Medium.random() * (i172 / 2.4)), i177);
            is[4] = xs((int) (i176 + i / 0.8 + Medium.random() * (i / 2.4)), i177);
            is170[4] = ys((int) (i178 + i172 / 1.92 + Medium.random() * (i172 / 5.67)), i177);
            is[5] = xs((int) (i176 + i / 0.8 + Medium.random() * (i / 2.4)), i177);
            is170[5] = ys((int) (i178 - i172 / 1.92 - Medium.random() * (i172 / 5.67)), i177);
            is[6] = xs((int) (i176 + i / 1.92 + Medium.random() * (i / 5.67)), i177);
            is170[6] = ys((int) (i178 - i172 / 0.8 - Medium.random() * (i172 / 2.4)), i177);
            is[7] = xs((int) (i176 - i / 1.92 - Medium.random() * (i / 5.67)), i177);
            is170[7] = ys((int) (i178 - i172 / 0.8 - Medium.random() * (i172 / 2.4)), i177);
            if (fcnt == 3) {
                rot(is, is170, xs(i176, i177), ys(i178, i177), 22, 8);
            }
            if (fcnt == 4) {
                rot(is, is170, xs(i176, i177), ys(i178, i177), 22, 8);
            }
            if (fcnt == 5) {
                rot(is, is170, xs(i176, i177), ys(i178, i177), 0, 8);
            }
            if (fcnt == 6) {
                rot(is, is170, xs(i176, i177), ys(i178, i177), -22, 8);
            }
            if (fcnt == 7) {
                rot(is, is170, xs(i176, i177), ys(i178, i177), -22, 8);
            }
            int i179 = (int) (191.0F + 191.0F * (Medium.snap[0] / 350.0F));
            if (i179 > 255) {
                i179 = 255;
            }
            if (i179 < 0) {
                i179 = 0;
            }
            int i180 = (int) (232.0F + 232.0F * (Medium.snap[1] / 350.0F));
            if (i180 > 255) {
                i180 = 255;
            }
            if (i180 < 0) {
                i180 = 0;
            }
            int i181 = (int) (255.0F + 255.0F * (Medium.snap[2] / 350.0F));
            if (i181 > 255) {
                i181 = 255;
            }
            if (i181 < 0) {
                i181 = 0;
            }
            graphics2d.setColor(new Color(i179, i180, i181));
            graphics2d.fillPolygon(is, is170, 8);
            is[0] = xs((int) (i176 - i - Medium.random() * (i / 4)), i177);
            is170[0] = ys((int) (i178 - i172 / 2.4 - Medium.random() * (i172 / 9.6)), i177);
            is[1] = xs((int) (i176 - i - Medium.random() * (i / 4)), i177);
            is170[1] = ys((int) (i178 + i172 / 2.4 + Medium.random() * (i172 / 9.6)), i177);
            is[2] = xs((int) (i176 - i / 2.4 - Medium.random() * (i / 9.6)), i177);
            is170[2] = ys((int) (i178 + i172 + Medium.random() * (i172 / 4)), i177);
            is[3] = xs((int) (i176 + i / 2.4 + Medium.random() * (i / 9.6)), i177);
            is170[3] = ys((int) (i178 + i172 + Medium.random() * (i172 / 4)), i177);
            is[4] = xs((int) (i176 + i + Medium.random() * (i / 4)), i177);
            is170[4] = ys((int) (i178 + i172 / 2.4 + Medium.random() * (i172 / 9.6)), i177);
            is[5] = xs((int) (i176 + i + Medium.random() * (i / 4)), i177);
            is170[5] = ys((int) (i178 - i172 / 2.4 - Medium.random() * (i172 / 9.6)), i177);
            is[6] = xs((int) (i176 + i / 2.4 + Medium.random() * (i / 9.6)), i177);
            is170[6] = ys((int) (i178 - i172 - Medium.random() * (i172 / 4)), i177);
            is[7] = xs((int) (i176 - i / 2.4 - Medium.random() * (i / 9.6)), i177);
            is170[7] = ys((int) (i178 - i172 - Medium.random() * (i172 / 4)), i177);
            i179 = (int) (213.0F + 213.0F * (Medium.snap[0] / 350.0F));
            if (i179 > 255) {
                i179 = 255;
            }
            if (i179 < 0) {
                i179 = 0;
            }
            i180 = (int) (239.0F + 239.0F * (Medium.snap[1] / 350.0F));
            if (i180 > 255) {
                i180 = 255;
            }
            if (i180 < 0) {
                i180 = 0;
            }
            i181 = (int) (255.0F + 255.0F * (Medium.snap[2] / 350.0F));
            if (i181 > 255) {
                i181 = 255;
            }
            if (i181 < 0) {
                i181 = 0;
            }
            graphics2d.setColor(new Color(i179, i180, i181));
            graphics2d.fillPolygon(is, is170, 8);
        }
        if (fcnt > 7) {
            fcnt = 0;
            fix = false;
        } else {
            fcnt++;
        }
    }

    public int getpy(final int i, final int i267, final int i268) {
        return (i - x) / 10 * ((i - x) / 10) + (i267 - y) / 10 * ((i267 - y) / 10) + (i268 - z) / 10 * ((i268 - z) / 10);
    }

    private int getvalue(final String string, final String string262, final int i) {
        int i263 = 0;
        String string264 = "";
        for (int i265 = string.length() + 1; i265 < string262.length(); i265++) {
            final String string266 = "" + string262.charAt(i265);
            if (string266.equals(",") || string266.equals(")")) {
                i263++;
                i265++;
            }
            if (i263 == i) {
                string264 = "" + string264 + string262.charAt(i265);
            }
        }
        return Integer.parseInt(string264);
    }

    private void lowshadow(final Graphics2D graphics2d, final int i) {
        final int[] is = new int[4];
        final int[] is146 = new int[4];
        final int[] is147 = new int[4];
        int i148 = 1;
        int i149;
        for (i149 = Math.abs(zy); i149 > 270; i149 -= 360) {

        }
        i149 = Math.abs(i149);
        if (i149 > 90) {
            i148 = -1;
        }
        is[0] = (int) (keyx[0] * 1.2 + x - Medium.x);
        is147[0] = (int) ((keyz[0] + 30) * i148 * 1.2 + z - Medium.z);
        is[1] = (int) (keyx[1] * 1.2 + x - Medium.x);
        is147[1] = (int) ((keyz[1] + 30) * i148 * 1.2 + z - Medium.z);
        is[2] = (int) (keyx[3] * 1.2 + x - Medium.x);
        is147[2] = (int) ((keyz[3] - 30) * i148 * 1.2 + z - Medium.z);
        is[3] = (int) (keyx[2] * 1.2 + x - Medium.x);
        is147[3] = (int) ((keyz[2] - 30) * i148 * 1.2 + z - Medium.z);
        rot(is, is147, x - Medium.x, z - Medium.z, xz, 4);
        int i150 = (int) (Medium.crgrnd[0] / 1.5);
        int i151 = (int) (Medium.crgrnd[1] / 1.5);
        int i152 = (int) (Medium.crgrnd[2] / 1.5);
        for (int i153 = 0; i153 < 4; i153++) {
            is146[i153] = Medium.ground;
        }
        if (Trackers.ncx != 0 || Trackers.ncz != 0) {
            int i154 = (x - Trackers.sx) / 3000;
            if (i154 > Trackers.ncx) {
                i154 = Trackers.ncx;
            }
            if (i154 < 0) {
                i154 = 0;
            }
            int i155 = (z - Trackers.sz) / 3000;
            if (i155 > Trackers.ncz) {
                i155 = Trackers.ncz;
            }
            if (i155 < 0) {
                i155 = 0;
            }
            for (int i156 = Trackers.sect[i154][i155].length - 1; i156 >= 0; i156--) {
                final int i157 = Trackers.sect[i154][i155][i156];
                int i158 = 0;
                for (int i159 = 0; i159 < 4; i159++)
                    if (Math.abs(Trackers.zy[i157]) != 90 && Math.abs(Trackers.xy[i157]) != 90 && Trackers.rady[i157] != 801 && Math.abs(is[i159] - (Trackers.x[i157] - Medium.x)) < Trackers.radx[i157] && Math.abs(is147[i159] - (Trackers.z[i157] - Medium.z)) < Trackers.radz[i157] && (!Trackers.decor[i157] || Medium.resdown != 2)) {
                        i158++;
                    }
                if (i158 > 2) {
                    for (int i160 = 0; i160 < 4; i160++) {
                        is146[i160] = Trackers.y[i157] - Medium.y;
                        if (Trackers.zy[i157] != 0) {
                            is146[i160] += (is147[i160] - (Trackers.z[i157] - Medium.z - Trackers.radz[i157])) * Medium.sin(Trackers.zy[i157]) / Medium.sin(90 - Trackers.zy[i157]) - Trackers.radz[i157] * Medium.sin(Trackers.zy[i157]) / Medium.sin(90 - Trackers.zy[i157]);
                        }
                        if (Trackers.xy[i157] != 0) {
                            is146[i160] += (is[i160] - (Trackers.x[i157] - Medium.x - Trackers.radx[i157])) * Medium.sin(Trackers.xy[i157]) / Medium.sin(90 - Trackers.xy[i157]) - Trackers.radx[i157] * Medium.sin(Trackers.xy[i157]) / Medium.sin(90 - Trackers.xy[i157]);
                        }
                    }
                    i150 = (int) (Trackers.c[i157][0] / 1.5);
                    i151 = (int) (Trackers.c[i157][1] / 1.5);
                    i152 = (int) (Trackers.c[i157][2] / 1.5);
                    break;
                }
            }
        }
        rot(is, is147, Medium.cx, Medium.cz, Medium.xz, 4);
        rot(is146, is147, Medium.cy, Medium.cz, Medium.zy, 4);
        boolean bool = true;
        int i161 = 0;
        int i162 = 0;
        int i163 = 0;
        int i164 = 0;
        for (int i165 = 0; i165 < 4; i165++) {
            is[i165] = xs(is[i165], is147[i165]);
            is146[i165] = ys(is146[i165], is147[i165]);
            if (is146[i165] < Medium.ih || is147[i165] < 10) {
                i161++;
            }
            if (is146[i165] > Medium.h || is147[i165] < 10) {
                i162++;
            }
            if (is[i165] < Medium.iw || is147[i165] < 10) {
                i163++;
            }
            if (is[i165] > Medium.w || is147[i165] < 10) {
                i164++;
            }
        }
        if (i163 == 4 || i161 == 4 || i162 == 4 || i164 == 4) {
            bool = false;
        }
        if (bool) {
            for (int i166 = 0; i166 < 16; i166++)
                if (i > Medium.fade[i166]) {
                    i150 = (i150 * Medium.fogd + Medium.cfade[0]) / (Medium.fogd + 1);
                    i151 = (i151 * Medium.fogd + Medium.cfade[1]) / (Medium.fogd + 1);
                    i152 = (i152 * Medium.fogd + Medium.cfade[2]) / (Medium.fogd + 1);
                }
            graphics2d.setColor(new Color(i150, i151, i152));
            graphics2d.fillPolygon(is, is146, 4);
        }
    }

    private void pdust(final int i, final Graphics2D graphics2d, final boolean bool) {
        if (bool) {
            sav[i] = (int) Math.sqrt((Medium.x + Medium.cx - sx[i]) * (Medium.x + Medium.cx - sx[i]) + (Medium.y + Medium.cy - sy[i]) * (Medium.y + Medium.cy - sy[i]) + (Medium.z - sz[i]) * (Medium.z - sz[i]));
        }
        if (bool && sav[i] > dist || !bool && sav[i] <= dist) {
            if (stg[i] == 1) {
                sbln[i] = 0.6F;
                boolean bool208 = false;
                final int[] is = new int[3];
                for (int i209 = 0; i209 < 3; i209++) {
                    is[i209] = (int) (255.0F + 255.0F * (Medium.snap[i209] / 100.0F));
                    if (is[i209] > 255) {
                        is[i209] = 255;
                    }
                    if (is[i209] < 0) {
                        is[i209] = 0;
                    }
                }
                int i210 = (x - Trackers.sx) / 3000;
                if (i210 > Trackers.ncx) {
                    i210 = Trackers.ncx;
                }
                if (i210 < 0) {
                    i210 = 0;
                }
                int i211 = (z - Trackers.sz) / 3000;
                if (i211 > Trackers.ncz) {
                    i211 = Trackers.ncz;
                }
                if (i211 < 0) {
                    i211 = 0;
                }
                for (int i212 = 0; i212 < Trackers.sect[i210][i211].length; i212++) {
                    final int i213 = Trackers.sect[i210][i211][i212];
                    if (Math.abs(Trackers.zy[i213]) != 90 && Math.abs(Trackers.xy[i213]) != 90 && Math.abs(sx[i] - Trackers.x[i213]) < Trackers.radx[i213] && Math.abs(sz[i] - Trackers.z[i213]) < Trackers.radz[i213]) {
                        if (Trackers.skd[i213] == 0) {
                            sbln[i] = 0.2F;
                        }
                        if (Trackers.skd[i213] == 1) {
                            sbln[i] = 0.4F;
                        }
                        if (Trackers.skd[i213] == 2) {
                            sbln[i] = 0.45F;
                        }
                        for (int i214 = 0; i214 < 3; i214++) {
                            srgb[i][i214] = (Trackers.c[i213][i214] + is[i214]) / 2;
                        }
                        bool208 = true;
                    }
                }
                if (!bool208) {
                    for (int i215 = 0; i215 < 3; i215++) {
                        srgb[i][i215] = (Medium.crgrnd[i215] + is[i215]) / 2;
                    }
                }
                float f = (float) (0.1 + Medium.random());
                if (f > 1.0F) {
                    f = 1.0F;
                }
                scx[i] = (int) (scx[i] * f);
                scz[i] = (int) (scx[i] * f);
                for (int i216 = 0; i216 < 8; i216++) {
                    smag[i][i216] = osmag[i] * Medium.random() * 50.0F;
                }
                for (int i217 = 0; i217 < 8; i217++) {
                    int i218 = i217 - 1;
                    if (i218 == -1) {
                        i218 = 7;
                    }
                    int i219 = i217 + 1;
                    if (i219 == 8) {
                        i219 = 0;
                    }
                    smag[i][i217] = ((smag[i][i218] + smag[i][i219]) / 2.0F + smag[i][i217]) / 2.0F;
                }
                smag[i][6] = smag[i][7];
            }
            final int i220 = Medium.cx + (int) ((sx[i] - Medium.x - Medium.cx) * Medium.cos(Medium.xz) - (sz[i] - Medium.z - Medium.cz) * Medium.sin(Medium.xz));
            int i221 = Medium.cz + (int) ((sx[i] - Medium.x - Medium.cx) * Medium.sin(Medium.xz) + (sz[i] - Medium.z - Medium.cz) * Medium.cos(Medium.xz));
            final int i222 = Medium.cy + (int) ((sy[i] - Medium.y - Medium.cy - smag[i][7]) * Medium.cos(Medium.zy) - (i221 - Medium.cz) * Medium.sin(Medium.zy));
            i221 = Medium.cz + (int) ((sy[i] - Medium.y - Medium.cy - smag[i][7]) * Medium.sin(Medium.zy) + (i221 - Medium.cz) * Medium.cos(Medium.zy));
            sx[i] += scx[i] / (stg[i] + 1);
            sz[i] += scz[i] / (stg[i] + 1);
            final int[] is = new int[8];
            final int[] is223 = new int[8];
            is[0] = xs((int) (i220 + smag[i][0] * 0.9238F * 1.5F), i221);
            is223[0] = ys((int) (i222 + smag[i][0] * 0.3826F * 1.5F), i221);
            is[1] = xs((int) (i220 + smag[i][1] * 0.9238F * 1.5F), i221);
            is223[1] = ys((int) (i222 - smag[i][1] * 0.3826F * 1.5F), i221);
            is[2] = xs((int) (i220 + smag[i][2] * 0.3826F), i221);
            is223[2] = ys((int) (i222 - smag[i][2] * 0.9238F), i221);
            is[3] = xs((int) (i220 - smag[i][3] * 0.3826F), i221);
            is223[3] = ys((int) (i222 - smag[i][3] * 0.9238F), i221);
            is[4] = xs((int) (i220 - smag[i][4] * 0.9238F * 1.5F), i221);
            is223[4] = ys((int) (i222 - smag[i][4] * 0.3826F * 1.5F), i221);
            is[5] = xs((int) (i220 - smag[i][5] * 0.9238F * 1.5F), i221);
            is223[5] = ys((int) (i222 + smag[i][5] * 0.3826F * 1.5F), i221);
            is[6] = xs((int) (i220 - smag[i][6] * 0.3826F * 1.7F), i221);
            is223[6] = ys((int) (i222 + smag[i][6] * 0.9238F), i221);
            is[7] = xs((int) (i220 + smag[i][7] * 0.3826F * 1.7F), i221);
            is223[7] = ys((int) (i222 + smag[i][7] * 0.9238F), i221);
            for (int i224 = 0; i224 < 7; i224++) {
                smag[i][i224] += 5.0F + Medium.random() * 15.0F;
            }
            smag[i][7] = smag[i][6];
            boolean bool225 = true;
            int i226 = 0;
            int i227 = 0;
            int i228 = 0;
            int i229 = 0;
            for (int i230 = 0; i230 < 8; i230++) {
                if (is223[i230] < Medium.ih || i221 < 10) {
                    i226++;
                }
                if (is223[i230] > Medium.h || i221 < 10) {
                    i227++;
                }
                if (is[i230] < Medium.iw || i221 < 10) {
                    i228++;
                }
                if (is[i230] > Medium.w || i221 < 10) {
                    i229++;
                }
            }
            if (i228 == 4 || i226 == 4 || i227 == 4 || i229 == 4) {
                bool225 = false;
            }
            if (bool225) {
                int i231 = srgb[i][0];
                int i232 = srgb[i][1];
                int i233 = srgb[i][2];
                for (int i234 = 0; i234 < 16; i234++)
                    if (sav[i] > Medium.fade[i234]) {
                        i231 = (i231 * Medium.fogd + Medium.cfade[0]) / (Medium.fogd + 1);
                        i232 = (i232 * Medium.fogd + Medium.cfade[1]) / (Medium.fogd + 1);
                        i233 = (i233 * Medium.fogd + Medium.cfade[2]) / (Medium.fogd + 1);
                    }
                graphics2d.setColor(new Color(i231, i232, i233));
                final float f = sbln[i] - stg[i] * (sbln[i] / 8.0F);
                graphics2d.setComposite(AlphaComposite.getInstance(3, f));
                graphics2d.fillPolygon(is, is223, 8);
                graphics2d.setComposite(AlphaComposite.getInstance(3, 1.0F));
            }
            if (stg[i] == 7) {
                stg[i] = 0;
            } else {
                stg[i]++;
            }
        }
    }

    private int py(final int i, final int i269, final int i270, final int i271) {
        return (i - i269) * (i - i269) + (i270 - i271) * (i270 - i271);
    }

    private void rot(final int[] is, final int[] is272, final int i, final int i273, final int i274, final int i275) {
        if (i274 != 0) {
            for (int i276 = 0; i276 < i275; i276++) {
                final int i277 = is[i276];
                final int i278 = is272[i276];
                is[i276] = i + (int) ((i277 - i) * Medium.cos(i274) - (i278 - i273) * Medium.sin(i274));
                is272[i276] = i273 + (int) ((i277 - i) * Medium.sin(i274) + (i278 - i273) * Medium.cos(i274));
            }
        }
    }

    void sprk(final float f, final float f235, final float f236, final float f237, final float f238, final float f239, final int i) {
        if (i != 1) {
            srx = (int) (f - sprkat * Medium.sin(xz));
            sry = (int) (f235 - sprkat * Medium.cos(zy) * Medium.cos(xy));
            srz = (int) (f236 + sprkat * Medium.cos(xz));
            sprk = 1;
        } else {
            sprk++;
            if (sprk == 4) {
                srx = (int) (x + f237);
                sry = (int) f235;
                srz = (int) (z + f239);
                sprk = 5;
            } else {
                srx = (int) f;
                sry = (int) f235;
                srz = (int) f236;
            }
        }
        if (i == 2) {
            sprk = 6;
        }
        rcx = f237;
        rcy = f238;
        rcz = f239;
    }

    private int xs(final int i, int i260) {
        if (i260 < 50) {
            i260 = 50;
        }
        return (i260 - Medium.focusPoint) * (Medium.cx - i) / i260 + i;
    }

    private int ys(final int i, int i261) {
        if (i261 < 50) {
            i261 = 50;
        }
        return (i261 - Medium.focusPoint) * (Medium.cy - i) / i261 + i;
    }

    @Override
    public float x() {
        return x;
    }

    @Override
    public float y() {
        return y;
    }

    @Override
    public float z() {
        return z;
    }

    @Override
    public float xz() {
        return xz;
    }
}
//package nfm.open;

/**
 * @author Omar Waly
 * @author Partial docs by Ten Graves
 * @author Rafael
 */
class Control {
    /**
     * The car that the AI will attack. 0 means it's gonna attack you, 6 means it's gonna attack the boss car, so on and so forth.
     */
    private int acr = 0;
    /**
     * The time it takes (in frames) for the AI to "press" a key.
     */
    private int actwait = 0;
    /**
     * Multiplier for the delay between each turn. <i>Trivia: In custom stages, acuracy is always 0.</i>
     */
    private int acuracy = 0;
    /**
     * Just used for a few things regarding aggressiveness of the AI (if afta is true the AI will be willing to attack you, except that there about 1000000 other things that affect this, this is just one of the checks). As you suggested, it really doesn't affect much.
     */
    private boolean afta = false;
    /**
     * True if the AI is aggro'd on another car.
     * Agressed actually just affects turns - when it's false, the AI cars stop holding up while turning, whereas when it's true they hold up as normal.
     * 
     */
    private boolean agressed = false;
    /**
     * Makes the AI more precise when targeting another car. <i>Trivia: This works by making the AI think the target is farther away than it is, thus making the AI take smoother turns. Nice one, Omar.</i>
     * <br><br>
     * When it's at 1.0F, it means that the AI will target their opponent at their exact location. Which sounds great, but in practice it doesn't work well as it does not account for dodging at all.<br>
     * <br>
     * The beauty lies in if aim is slightly below 1.0F or slightly above 1.0F - when you do that it aims for its target slightly off to its location. This means that the AI will still get a solid hit even if you dodge it (you'll have to do quite a large dodge to avoid getting hit completely). Of course, there is the chance that you dodge the other way and dodge them completely, but especially if the AI are wasting in packs, it does make dodging a whole lot tougher.<br>
     * <br>
     * In terms of using this piece of code, you could probably use something like this:<br>
     * <br>
     * {@code        aim = (m.random() / 2) + 0.75F;}<br>
     * <br>
     * Which causes aim to be any value from 0.75F to 1.25F, meaning that the AI will be completely unpredictable in which way they'll target you.
     */
    private float aim = 0.0F;
    private int apunch = 0;
    boolean arrace = false;
    /**
     * An "attack timer"; if it's 0, the AI will race, if it's anything else, the AI will waste, and every frame it keeps counting down to 0. Basically, the "temper" of the AI.
     */
    private int attack = 0;
    private int avoidnlev = 0;
    /**
     * Its main function is to make cars go through the stage backwards. On its own, though, it's not really helpful so what you could do is make the AI attack other cars when it gets close to them (like in Stage 11).
     * 
     */
    private boolean bulistc = false;
    int chatup = 0;
    /**
     * The "squeezing room" (in degrees) that the AI has to make turns. Lower means more accurate turns, higher means less accurate turns. <i>Trivia: To quote Ten of Graves: Do NOT put this at 0, or they'll keep swerving from side to side (because they keep trying to be at exactly the center of the road piece).</i>
     */
    private int clrnce = 5;
    private int cntrn = 0;
    boolean down = false;
    boolean enter = false;
    boolean exit = false;
    private boolean exitattack = false;
    private int flycnt = 0;
    /**
     * Makes the AI prioritize fixing over racing.
     */
    private boolean forget = false;
    /**
     * The (up to 5) fix points in a stage.
     */
    private final int[] fpnt = new int[5];
    private int frad = 0;
    /**
     * The X coordinate range from which the AI will start to move from the camping spot and go for you.
     */
    private int frx = 0;
    /**
     * The Z coordinate range from which the AI will start to move from the camping spot and go for you.
     */
    private int frz = 0;
    /**
     * If it's true, the AI will go to its camping spot
     */
    private boolean gowait = false;
    boolean handb = false;
    /**
     * Think of hold as a timer that decreases every frame (like attack) - while it's greater than 0, the AI cars will never turn. So if I set hold to be 100 then it will take 100 frames before the AI cars will be able to turn.
     * 
     */
    private int hold = 0;
    private boolean lastl = false;
    boolean left = false;
    int lookback = 0;
    private boolean lrbare = false;
    private boolean lrcomp = false;
    private int lrdirect = 0;
    private int lrstart = 0;
    private boolean lrswt = false;
    private int lwall = -1;
    int multion = 0;
    /**
     * The higher this is, the less risky stunts the AI will perform. <i>Trivia: When the AI car's power is under 50%, it will perform risky stunts to get its power back (this value is set to 0)</i>
     */
    private float mustland = 0.5F;
    boolean mutem = false;
    boolean mutes = false;
    private boolean onced = false;
    private boolean oncel = false;
    private boolean oncer = false;
    private boolean onceu = false;
    private int oupnt = 0;
    private int oxy = 0;
    private int ozy = 0;
    /**
     * the "destination" angle of the AI car, as in "pan to". Mathematically, it is the tangent of the distance between the car's Z and the destination Z divided by the car's X and the destination X. For example, if you set this to 180, the car will turn to the 180 angle. Don't confuse this with "turning 180 degrees".
     */
    private int pan = 0;
    /**
     * Affects how well the AI cars land from a stunt - if it's true, they land a lot more accurately than when it's false. It's best to just keep it true at all times.
     * 
     */
    private boolean perfection = false;
    boolean radar = false;
    /**
     * Not really an important variable, but it basically controls how willing the AI cars are to go up ramps and stunt.<br><br>
     * 
     * Picture this: an AI car is going through a stage pretty smoothly on a road piece. One of the next few pieces is a ramp piece. When rampp is 1, the next piece the AI would go to would be the ramp piece to try and stunt. If it was -1 (which it is when the AI is at max power) it would instead target the piece immediately after it (so it'll basically ignore the ramp piece).<br><br>
     * 
     * The only problem is that even if the AI do ignore a ramp piece, it doesn't mean they will actively try and avoid it. If rampp is -1 but a ramp is in their way to the next piece (which happens 95% of the time), they'll still go up it and even stunt as normal.<br><br>
     * 
     * The only real situation where this variable actually does something is when the AI gets back onto course after being launched or something - as they approach the track again, they can decide which piece to go to next. But in practice, this variable makes very little difference so don't worry about it too much.
     */
    private int rampp = 0;
    /**
     * The actual delay between each turn. Affected by acuracy.
     */
    private int randtcnt = 0;
    /**
     * How long the AI reverses for after the start of a race.
     */
    private int revstart = 0;
    boolean right = false;
    /**
     * A timer for how long bulistc is true. When it reaches 0, bulistc is toggled to false.
     */
    private int runbul = 0;
    /**
     * It basically affects how soon the AI cars begin to prepare for landing from a stunt. Higher values of saftey mean that they prepare for landing closer to the ground (generally a saftey value of 5-10 works pretty well for me), so a saftey value of 0 means that they play it very safe (but barely do any stunts).
     * 
     */
    private int saftey = 30;
    /**
     * The lower this is, the higher the chance that the AI will cut through a corner. <i>Trivia: If a car is in last place, this value keeps decreasing until the AI cuts ahead of the other players.</i>
     */
    private float skiplev = 1.0F;
    private int statusque = 0;
    private int stcnt = 0;
    private int stuntf = 0;
    private int swat = 0;
    /**
     * When trfix is 2, the AI go to their set fixing point (determined by the fpnt[] variable as you said). As the AI get within range of the fixing hoop, trfix becomes 3 which prepares the AI for fixing (like what stunts they should do, setting clrnce and acuracy to be 0 so they're as accurate as possible, etc.)
     * 
     */
    private int trfix = 0;
    /**
     * When trickfase is 0, the AI isn't stunting.<br>
     * When trickfase is 1, the AI does its main part of the stunt (forward loops, backloops, etc.).<br>
     * When trickfase is 2, the AI begins preparing its car for landing from the stunt. Best not to edit it seeing as it's a pretty logical system.
     */
    private int trickfase = 0;
    private float trickprf = 0.5F;
    private int turncnt = 0;
    /**
     * What type of turn the AI is making/will make.<br>
0 means the AI will turn without braking<br>
1 means the AI will turn and brake<br>
2 means the AI will turn and handbrake
     */
    private int turntyp = 0;
    private boolean udbare = false;
    private boolean udcomp = false;
    private int uddirect = 0;
    private int udstart = 0;
    private boolean udswt = false;
    boolean up = false;
    private int upcnt = 0;
    /**
     * The time it takes (in frames) for the AI to "release" a key.
     */
    private int upwait = 0;
    /**
     * Basically means whether to treat bouncing (like from a stunt) as racing on the ground or racing in the air. In practice it really doesn't affect much so don't worry too much about it, although it is generally good practice to leave it as true so that the AI doesn't get needless bad landings from trying to stunt from a heavy bounce or something (which happens rarely anyway).
     * 
     */
    private boolean usebounce = false;
    int wall = -1;
    private boolean wlastl = false;
    /**
     * The X coordinate of a camp out location. This changes based on how far the player is into the race.
     */
    private int wtx = 0;
    /**
     * The Z coordinate of a camp out location. This changes based on how far the player is into the race.
     */
    private int wtz = 0;
    /**
     * Inverts the ZY angle. It is true if the AI is going backwards.
     */
    boolean zyinv = false;

    void falseo(final int i) {
        left = false;
        right = false;
        up = false;
        down = false;
        handb = false;
        lookback = 0;
        enter = false;
        exit = false;
        if (i != 1) {
            radar = false;
            arrace = false;
            chatup = 0;
            if (i != 2) {
                multion = 0;
            }
            if (i != 3) {
                mutem = false;
                mutes = false;
            }
        }
    }

    void preform(final Mad mad, final ContO conto) {
        left = false;
        right = false;
        up = false;
        down = false;
        handb = false;
        if (!mad.dest) {
            if (mad.mtouch)
                if (stcnt > statusque) {
                    acuracy = (7 - CheckPoints.pos[mad.im]) * CheckPoints.pos[0] * (6 - CheckPoints.stage * 2);
                    if (acuracy < 0 || CheckPoints.stage == -1) {
                        acuracy = 0;
                    }
                    clrnce = 5;
                    if (CheckPoints.stage == 16 || CheckPoints.stage == 21) {
                        clrnce = 2;
                    }
                    if (CheckPoints.stage == 22 && (mad.pcleared == 27 || mad.pcleared == 17)) {
                        clrnce = 3;
                    }
                    if (CheckPoints.stage == 26 && mad.pcleared == 33) {
                        clrnce = 3;
                    }
                    float f = 0.0F;
                    if (CheckPoints.stage == 1) {
                        f = 2.0F;
                    }
                    if (CheckPoints.stage == 2) {
                        f = 1.5F;
                    }
                    if (CheckPoints.stage == 3 && mad.cn != 6) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 4) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 11) {
                        f = 2.0F;
                    }
                    if (CheckPoints.stage == 12) {
                        f = 1.5F;
                    }
                    if (CheckPoints.stage == 13 && mad.cn != 9) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 14) {
                        f = 0.5F;
                    }
                    upwait = (int) ((CheckPoints.pos[0] - CheckPoints.pos[mad.im]) * (CheckPoints.pos[0] - CheckPoints.pos[mad.im]) * (CheckPoints.pos[0] - CheckPoints.pos[mad.im]) * f);
                    if (upwait > 80) {
                        upwait = 80;
                    }
                    if ((CheckPoints.stage == 11 || CheckPoints.stage == 1) && upwait < 20) {
                        upwait = 20;
                    }
                    f = 0.0F;
                    if (CheckPoints.stage == 1 || CheckPoints.stage == 2) {
                        f = 1.0F;
                    }
                    if (CheckPoints.stage == 4) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 7) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 10) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 11 || CheckPoints.stage == 12) {
                        f = 1.0F;
                    }
                    if (CheckPoints.stage == 13) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 14) {
                        f = 0.5F;
                    }
                    if (CheckPoints.stage == 15) {
                        f = 0.2F;
                    }
                    if (CheckPoints.pos[mad.im] - CheckPoints.pos[0] >= -1) {
                        skiplev -= 0.1;
                        if (skiplev < 0.0F) {
                            skiplev = 0.0F;
                        }
                    } else {
                        skiplev += 0.2;
                        if (skiplev > f) {
                            skiplev = f;
                        }
                    }
                    if (CheckPoints.stage == 18)
                        if (mad.pcleared >= 10 && mad.pcleared <= 24) {
                            skiplev = 1.0F;
                        } else {
                            skiplev = 0.0F;
                        }
                    if (CheckPoints.stage == 21) {
                        skiplev = 0.0F;
                        if (mad.pcleared == 5) {
                            skiplev = 1.0F;
                        }
                        if (mad.pcleared == 28 || mad.pcleared == 35) {
                            skiplev = 0.5F;
                        }
                    }
                    if (CheckPoints.stage == 23) {
                        skiplev = 0.5F;
                    }
                    if (CheckPoints.stage == 24 || CheckPoints.stage == 22) {
                        skiplev = 1.0F;
                    }
                    if (CheckPoints.stage == 26 || CheckPoints.stage == 25 || CheckPoints.stage == 20) {
                        skiplev = 0.0F;
                    }
                    rampp = (int) (Medium.random() * 4.0F - 2.0F);
                    if (mad.power == 98.0F) {
                        rampp = -1;
                    }
                    if (mad.power < 75.0F && rampp == -1) {
                        rampp = 0;
                    }
                    if (mad.power < 60.0F) {
                        rampp = 1;
                    }
                    if (CheckPoints.stage == 6) {
                        rampp = 2;
                    }
                    if (CheckPoints.stage == 18 && mad.pcleared >= 45) {
                        rampp = 2;
                    }
                    if (CheckPoints.stage == 22 && mad.pcleared == 17) {
                        rampp = 2;
                    }
                    if (CheckPoints.stage == 25 || CheckPoints.stage == 26) {
                        rampp = 0;
                    }
                    if (cntrn == 0) {
                        agressed = false;
                        turntyp = (int) (Medium.random() * 4.0F);
                        if (CheckPoints.stage == 3 && mad.cn == 6) {
                            turntyp = 1;
                            if (attack == 0) {
                                agressed = true;
                            }
                        }
                        if (CheckPoints.stage == 9 && mad.cn == 15) {
                            turntyp = 1;
                            if (attack == 0) {
                                agressed = true;
                            }
                        }
                        if (CheckPoints.stage == 13 && mad.cn == 9) {
                            turntyp = 1;
                            if (attack == 0) {
                                agressed = true;
                            }
                        }
                        if (CheckPoints.pos[0] - CheckPoints.pos[mad.im] < 0) {
                            turntyp = (int) (Medium.random() * 2.0F);
                        }
                        if (CheckPoints.stage == 10) {
                            turntyp = 2;
                        }
                        if (CheckPoints.stage == 18) {
                            turntyp = 2;
                        }
                        if (CheckPoints.stage == 20) {
                            turntyp = 0;
                        }
                        if (CheckPoints.stage == 23) {
                            turntyp = 1;
                        }
                        if (CheckPoints.stage == 24) {
                            turntyp = 0;
                        }
                        if (attack != 0) {
                            turntyp = 2;
                            if (CheckPoints.stage == 9 || CheckPoints.stage == 10 || CheckPoints.stage == 19 || CheckPoints.stage == 21 || CheckPoints.stage == 23 || CheckPoints.stage == 27) {
                                turntyp = (int) (Medium.random() * 3.0F);
                            }
                            if (CheckPoints.stage == 26 && CheckPoints.clear[mad.im] - CheckPoints.clear[0] >= 5) {
                                turntyp = 0;
                            }
                        }
                        if (CheckPoints.stage == 6) {
                            turntyp = 1;
                            agressed = true;
                        }
                        if (CheckPoints.stage == 7 || CheckPoints.stage == 9 || CheckPoints.stage == 10 || CheckPoints.stage == 16 || CheckPoints.stage == 17 || CheckPoints.stage == 19 || CheckPoints.stage == 20 || CheckPoints.stage == 21 || CheckPoints.stage == 22 || CheckPoints.stage == 24 || CheckPoints.stage == 26 || CheckPoints.stage == 27) {
                            agressed = true;
                        }
                        if (CheckPoints.stage == -1)
                            agressed = Medium.random() > Medium.random();
                        cntrn = 5;
                    } else {
                        cntrn--;
                    }
                    saftey = (int) ((98.0F - mad.power) / 2.0F * (Medium.random() / 2.0F + 0.5));
                    if (saftey > 20) {
                        saftey = 20;
                    }
                    f = 0.0F;
                    if (CheckPoints.stage == 1 || CheckPoints.stage == 11) {
                        f = 0.9F;
                    }
                    if (CheckPoints.stage == 2 || CheckPoints.stage == 12) {
                        f = 0.7F;
                    }
                    if (CheckPoints.stage == 4 || CheckPoints.stage == 13) {
                        f = 0.4F;
                    }
                    mustland = f + (float) (Medium.random() / 2.0F - 0.25);
                    f = 1.0F;
                    if (CheckPoints.stage == 1 || CheckPoints.stage == 11) {
                        f = 5.0F;
                    }
                    if (CheckPoints.stage == 2 || CheckPoints.stage == 12) {
                        f = 2.0F;
                    }
                    if (CheckPoints.stage == 4 || CheckPoints.stage == 13) {
                        f = 1.5F;
                    }
                    if (mad.power > 50.0F) {
                        if (CheckPoints.pos[0] - CheckPoints.pos[mad.im] > 0) {
                            saftey *= f;
                        } else {
                            mustland = 0.0F;
                        }
                    } else {
                        mustland -= 0.5F;
                    }
                    if (CheckPoints.stage == 18 || CheckPoints.stage == 20 || CheckPoints.stage == 22 || CheckPoints.stage == 24) {
                        mustland = 0.0F;
                    }
                    stuntf = 0;
                    if (CheckPoints.stage == 8) {
                        stuntf = 17;
                    }
                    if (CheckPoints.stage == 18 && mad.pcleared == 57) {
                        stuntf = 1;
                    }
                    if (CheckPoints.stage == 19 && mad.pcleared == 3) {
                        stuntf = 2;
                    }
                    if (CheckPoints.stage == 20)
                        if (CheckPoints.pos[0] < CheckPoints.pos[mad.im] || Math.abs(CheckPoints.clear[0] - mad.clear) >= 2 || mad.clear < 2) {
                            stuntf = 4;
                            saftey = 10;
                        } else {
                            stuntf = 3;
                        }
                    if (CheckPoints.stage == 21 && mad.pcleared == 21) {
                        stuntf = 1;
                    }
                    if (CheckPoints.stage == 24) {
                        saftey = 10;
                        if (mad.pcleared >= 4 && mad.pcleared < 70) {
                            stuntf = 4;
                        } else if (mad.cn == 12 || mad.cn == 8) {
                            stuntf = 2;
                        }
                        if (mad.cn == 14) {
                            stuntf = 6;
                        }
                    }
                    if (CheckPoints.stage == 26) {
                        mustland = 0.0F;
                        saftey = 10;
                        if ((mad.pcleared == 15 || mad.pcleared == 51) && (Medium.random() > 0.4 || trfix != 0)) {
                            stuntf = 7;
                        }
                        if (mad.pcleared == 42) {
                            stuntf = 1;
                        }
                        if (mad.pcleared == 77) {
                            stuntf = 7;
                        }
                        avoidnlev = (int) (2700.0F * Medium.random());
                    }
                    trickprf = (mad.power - 38.0F) / 50.0F - Medium.random() / 2.0F;
                    if (mad.power < 60.0F) {
                        trickprf = -1.0F;
                    }
                    if (CheckPoints.stage == 6 && trickprf > 0.5) {
                        trickprf = 0.5F;
                    }
                    if (CheckPoints.stage == 3 && mad.cn == 6 && trickprf > 0.7) {
                        trickprf = 0.7F;
                    }
                    if (CheckPoints.stage == 13 && mad.cn == 9 && trickprf > 0.7) {
                        trickprf = 0.7F;
                    }
                    if (CheckPoints.stage == 16 && trickprf > 0.3) {
                        trickprf = 0.3F;
                    }
                    if (CheckPoints.stage == 18 && trickprf > 0.2) {
                        trickprf = 0.2F;
                    }
                    if (CheckPoints.stage == 19) {
                        if (trickprf > 0.5) {
                            trickprf = 0.5F;
                        }
                        if ((mad.im == 6 || mad.im == 5) && trickprf > 0.3) {
                            trickprf = 0.3F;
                        }
                    }
                    if (CheckPoints.stage == 21 && trickprf != -1.0F) {
                        trickprf *= 0.75F;
                    }
                    if (CheckPoints.stage == 22 && (mad.pcleared == 55 || mad.pcleared == 7)) {
                        trickprf = -1.0F;
                        stuntf = 5;
                    }
                    if (CheckPoints.stage == 23 && trickprf > 0.4) {
                        trickprf = 0.4F;
                    }
                    if (CheckPoints.stage == 24 && trickprf > 0.5) {
                        trickprf = 0.5F;
                    }
                    if (CheckPoints.stage == 27) {
                        trickprf = -1.0F;
                    }
                    usebounce = Medium.random() > mad.power / 100.0F;
                    if (CheckPoints.stage == 9) {
                        usebounce = false;
                    }
                    if (CheckPoints.stage == 14 || CheckPoints.stage == 16) {
                        usebounce = true;
                    }
                    if (CheckPoints.stage == 20 || CheckPoints.stage == 24) {
                        usebounce = false;
                    }
                    perfection = Medium.random() <= (float) mad.hitmag / (float) mad.stat.maxmag;
                    if (100.0F * mad.hitmag / mad.stat.maxmag > 60.0F) {
                        perfection = true;
                    }
                    if (CheckPoints.stage == 3 && mad.cn == 6) {
                        perfection = true;
                    }
                    if (CheckPoints.stage == 6 || CheckPoints.stage == 8 || CheckPoints.stage == 9 || CheckPoints.stage == 10 || CheckPoints.stage == 16 || CheckPoints.stage == 18 || CheckPoints.stage == 19 || CheckPoints.stage == 20 || CheckPoints.stage == 21 || CheckPoints.stage == 22 || CheckPoints.stage == 24 || CheckPoints.stage == 26 || CheckPoints.stage == 27) {
                        perfection = true;
                    }
                    if (attack == 0) {
                        boolean bool = true;
                        if (CheckPoints.stage == 3 || CheckPoints.stage == 1 || CheckPoints.stage == 4 || CheckPoints.stage == 9 || CheckPoints.stage == 13 || CheckPoints.stage == 11 || CheckPoints.stage == 14 || CheckPoints.stage == 19 || CheckPoints.stage == 23 || CheckPoints.stage == 26) {
                            bool = afta;
                        }
                        if (CheckPoints.stage == 8 || CheckPoints.stage == 6 || CheckPoints.stage == 18 || CheckPoints.stage == 16 || CheckPoints.stage == 20 || CheckPoints.stage == 24) {
                            bool = false;
                        }
                        if (CheckPoints.stage == 3 && mad.cn == 6) {
                            bool = false;
                        }
                        if (CheckPoints.stage == -1 && Medium.random() > Medium.random()) {
                            bool = false;
                        }
                        boolean bool4 = false;
                        if (CheckPoints.stage == 13 && mad.cn == 9) {
                            bool4 = true;
                        }
                        if (CheckPoints.stage == 18 && mad.cn == 11) {
                            bool4 = true;
                        }
                        if (CheckPoints.stage == 19 && CheckPoints.clear[0] >= 20) {
                            bool4 = true;
                        }
                        if (CheckPoints.stage == 4 || CheckPoints.stage == 10 || CheckPoints.stage == 21 || CheckPoints.stage == 22 || CheckPoints.stage == 23 || CheckPoints.stage == 25 || CheckPoints.stage == 26) {
                            bool4 = true;
                        }
                        if (CheckPoints.stage == 3 && mad.cn == 6) {
                            bool4 = true;
                        }
                        int i5 = 60;
                        if (CheckPoints.stage == 5) {
                            i5 = 40;
                        }
                        if (CheckPoints.stage == 6 && bulistc) {
                            i5 = 40;
                        }
                        if (CheckPoints.stage == 9 && bulistc) {
                            i5 = 30;
                        }
                        if (CheckPoints.stage == 3 || CheckPoints.stage == 13 || CheckPoints.stage == 21 || CheckPoints.stage == 27 || CheckPoints.stage == 20 || CheckPoints.stage == 18) {
                            i5 = 30;
                        }
                        if ((CheckPoints.stage == 12 || CheckPoints.stage == 23) && mad.cn == 13) {
                            i5 = 50;
                        }
                        if (CheckPoints.stage == 14) {
                            i5 = 20;
                        }
                        if (CheckPoints.stage == 15 && mad.im != 6) {
                            i5 = 40;
                        }
                        if (CheckPoints.stage == 17) {
                            i5 = 40;
                        }
                        if (CheckPoints.stage == 18 && mad.cn == 11) {
                            i5 = 40;
                        }
                        if (CheckPoints.stage == 19 && bool4) {
                            i5 = 30;
                        }
                        if (CheckPoints.stage == 21 && bulistc) {
                            i5 = 30;
                        }
                        if (CheckPoints.stage == 22) {
                            i5 = 50;
                        }
                        if (CheckPoints.stage == 25 && bulistc) {
                            i5 = 40;
                        }
                        if (CheckPoints.stage == 26) {
                            if (mad.cn == 11 && CheckPoints.clear[0] == 27) {
                                i5 = 0;
                            }
                            if (mad.cn == 15 || mad.cn == 9) {
                                i5 = 50;
                            }
                            if (mad.cn == 11) {
                                i5 = 40;
                            }
                            if (CheckPoints.pos[0] > CheckPoints.pos[mad.im]) {
                                i5 = 80;
                            }
                        }
                        for (int i6 = 0; i6 < 7; i6++)
                            if (i6 != mad.im && CheckPoints.clear[i6] != -1) {
                                int i7 = conto.xz;
                                if (zyinv) {
                                    i7 += 180;
                                }
                                for (/**/; i7 < 0; i7 += 360) {

                                }
                                for (/**/; i7 > 180; i7 -= 360) {

                                }
                                int i8 = 0;
                                if (CheckPoints.opx[i6] - conto.x >= 0) {
                                    i8 = 180;
                                }
                                int i9;
                                for (i9 = (int) (90 + i8 + Math.atan((double) (CheckPoints.opz[i6] - conto.z) / (double) (CheckPoints.opx[i6] - conto.x)) / 0.017453292519943295); i9 < 0; i9 += 360) {

                                }
                                for (/**/; i9 > 180; i9 -= 360) {

                                }
                                int i10 = Math.abs(i7 - i9);
                                if (i10 > 180) {
                                    i10 = Math.abs(i10 - 360);
                                }
                                int i11 = 2000 * (Math.abs(CheckPoints.clear[i6] - mad.clear) + 1);
                                if ((CheckPoints.stage == 6 || CheckPoints.stage == 9) && bulistc) {
                                    i11 = 6000;
                                }
                                if (CheckPoints.stage == 3 && mad.cn == 6 && CheckPoints.wasted < 2 && i11 > 4000) {
                                    i11 = 4000;
                                }
                                if (CheckPoints.stage == 13 && mad.cn == 9 && i11 < 12000) {
                                    i11 = 12000;
                                }
                                if (CheckPoints.stage == 14 && i11 < 4000) {
                                    i11 = 4000;
                                }
                                if (CheckPoints.stage == 18 && mad.cn == 11) {
                                    if (i11 < 12000) {
                                        i11 = 12000;
                                    }
                                    i10 = 10;
                                }
                                if (CheckPoints.stage == 19 && (mad.pcleared == 13 || mad.pcleared == 33 || bool4) && i11 < 12000) {
                                    i11 = 12000;
                                }
                                if (CheckPoints.stage == 21)
                                    if (bulistc) {
                                        i11 = 8000;
                                        i10 = 10;
                                        afta = true;
                                    } else if (i11 < 6000) {
                                        i11 = 6000;
                                    }
                                if (CheckPoints.stage == 22 && bulistc) {
                                    i11 = 6000;
                                    i10 = 10;
                                }
                                if (CheckPoints.stage == 23) {
                                    i11 = 21000;
                                }
                                if (CheckPoints.stage == 25) {
                                    i11 *= Math.abs(CheckPoints.clear[i6] - mad.clear) + 1;
                                    if (bulistc) {
                                        i11 = 4000 * (Math.abs(CheckPoints.clear[i6] - mad.clear) + 1);
                                        i10 = 10;
                                    }
                                }
                                if (CheckPoints.stage == 20) {
                                    i11 = 16000;
                                }
                                if (CheckPoints.stage == 26) {
                                    if (mad.cn == 13 && bulistc) {
                                        if (oupnt == 33) {
                                            i11 = 17000;
                                        }
                                        if (oupnt == 51) {
                                            i11 = 30000;
                                        }
                                        if (oupnt == 15 && CheckPoints.clear[0] >= 14) {
                                            i11 = 60000;
                                        }
                                        i10 = 10;
                                    }
                                    if (mad.cn == 15 || mad.cn == 9) {
                                        i11 *= Math.abs(CheckPoints.clear[i6] - mad.clear) + 1;
                                    }
                                    if (mad.cn == 11) {
                                        i11 = 4000 * (Math.abs(CheckPoints.clear[i6] - mad.clear) + 1);
                                    }
                                }
                                int i12 = 85 + 15 * (Math.abs(CheckPoints.clear[i6] - mad.clear) + 1);
                                if (CheckPoints.stage == 23) {
                                    i12 = 45;
                                }
                                if (CheckPoints.stage == 26 && (mad.cn == 15 || mad.cn == 9 || mad.cn == 11 || mad.cn == 14)) {
                                    i12 = 50 + 70 * Math.abs(CheckPoints.clear[i6] - mad.clear);
                                }
                                if (i10 < i12 && py(conto.x / 100, CheckPoints.opx[i6] / 100, conto.z / 100, CheckPoints.opz[i6] / 100) < i11 && afta && mad.power > i5) {
                                    float f13 = 35 - Math.abs(CheckPoints.clear[i6] - mad.clear) * 10;
                                    if (f13 < 1.0F) {
                                        f13 = 1.0F;
                                    }
                                    float f14 = (CheckPoints.pos[mad.im] + 1) * (5 - CheckPoints.pos[i6]) / f13;
                                    if (CheckPoints.stage != 27 && f14 > 0.7) {
                                        f14 = 0.7F;
                                    }
                                    if (i6 != 0 && CheckPoints.pos[0] < CheckPoints.pos[mad.im]) {
                                        f14 = 0.0F;
                                    }
                                    if (i6 != 0 && bool4) {
                                        f14 = 0.0F;
                                    }
                                    if (bool4 && CheckPoints.stage == 3 && i6 == 0)
                                        if (CheckPoints.wasted >= 2) {
                                            f14 *= 0.5F;
                                        } else {
                                            f14 = 0.0F;
                                        }
                                    if ((CheckPoints.stage == 3 || CheckPoints.stage == 9) && i6 == 4) {
                                        f14 = 0.0F;
                                    }
                                    if (CheckPoints.stage == 6) {
                                        f14 = 0.0F;
                                        if (bulistc && i6 == 0) {
                                            f14 = 1.0F;
                                        }
                                    }
                                    if (CheckPoints.stage == 8) {
                                        f14 = 0.0F;
                                        if (bulistc && mad.cn != 11 && mad.cn != 13) {
                                            f14 = 1.0F;
                                        }
                                    }
                                    if (CheckPoints.stage == 9 && mad.cn == 15) {
                                        f14 = 0.0F;
                                    }
                                    if (CheckPoints.stage == 9 && bulistc)
                                        if (i6 == 0) {
                                            f14 = 1.0F;
                                        } else {
                                            f14 = 0.0F;
                                        }
                                    if (CheckPoints.stage == 9 && (CheckPoints.pos[i6] == 4 || CheckPoints.pos[i6] == 3)) {
                                        f14 = 0.0F;
                                    }
                                    if (CheckPoints.stage == 13)
                                        if (mad.cn == 9 || mad.cn == 13 && bulistc) {
                                            f14 *= 2.0F;
                                        } else {
                                            f14 *= 0.5F;
                                        }
                                    if (CheckPoints.stage == 16) {
                                        f14 = 0.0F;
                                    }
                                    if (CheckPoints.stage == 17 && mad.im == 6 && i6 == 0) {
                                        f14 *= 1.5;
                                    }
                                    if (CheckPoints.stage == 18)
                                        if (mad.cn == 11 || mad.cn == 13 && bulistc) {
                                            f14 *= 1.5F;
                                        } else {
                                            f14 = 0.0F;
                                        }
                                    if (CheckPoints.stage == 19) {
                                        if (i6 != 0) {
                                            f14 *= 0.5;
                                        }
                                        if (mad.pcleared != 13 && mad.pcleared != 33 && !bool4) {
                                            f14 *= 0.5F;
                                        }
                                        if ((mad.im == 6 || mad.im == 5) && i6 != 0) {
                                            f14 = 0.0F;
                                        }
                                    }
                                    if (CheckPoints.stage == 20) {
                                        f14 = 0.0F;
                                        if (bulistc && mad.cn != 11 && mad.cn != 13) {
                                            f14 = 1.0F;
                                        }
                                    }
                                    if (CheckPoints.stage == 21 && bulistc && i6 == 0) {
                                        f14 = 1.0F;
                                    }
                                    if (CheckPoints.stage == 22) {
                                        if (mad.cn != 11 && mad.cn != 13) {
                                            f14 = 0.0F;
                                        }
                                        if (mad.cn == 13 && i6 == 0) {
                                            f14 = 1.0F;
                                        }
                                    }
                                    if (CheckPoints.stage == 24) {
                                        f14 = 0.0F;
                                    }
                                    if (CheckPoints.stage == 25) {
                                        if (CheckPoints.pos[mad.im] == 0) {
                                            f14 *= 0.5;
                                        }
                                        if (CheckPoints.pos[0] < CheckPoints.pos[mad.im]) {
                                            f14 *= 2.0F;
                                        }
                                        if (bulistc && i6 == 0) {
                                            f14 = 1.0F;
                                        }
                                    }
                                    if (CheckPoints.stage == 26) {
                                        if (mad.cn != 14) {
                                            if (CheckPoints.pos[0] < CheckPoints.pos[mad.im] && CheckPoints.clear[0] - CheckPoints.clear[mad.im] != 1) {
                                                f14 *= 2.0F;
                                            }
                                        } else {
                                            f14 *= 0.5;
                                        }
                                        if (mad.cn == 13 && i6 == 0) {
                                            f14 = 1.0F;
                                        }
                                        if (CheckPoints.pos[mad.im] == 0 || CheckPoints.pos[mad.im] == 1 && CheckPoints.pos[0] == 0) {
                                            f14 = 0.0F;
                                        }
                                        if (CheckPoints.clear[mad.im] - CheckPoints.clear[0] >= 5 && i6 == 0) {
                                            f14 = 1.0F;
                                        }
                                        if (mad.cn == 10 || mad.cn == 12) {
                                            f14 = 0.0F;
                                        }
                                    }
                                    if (Medium.random() < f14) {
                                        attack = 40 * (Math.abs(CheckPoints.clear[i6] - mad.clear) + 1);
                                        if (attack > 500) {
                                            attack = 500;
                                        }
                                        aim = 0.0F;
                                        if (CheckPoints.stage == 13 && mad.cn == 9 && Medium.random() > Medium.random()) {
                                            aim = 1.0F;
                                        }
                                        if (CheckPoints.stage == 14)
                                            if (i6 == 0 && CheckPoints.pos[0] < CheckPoints.pos[mad.im]) {
                                                aim = 1.5F;
                                            } else {
                                                aim = Medium.random();
                                            }
                                        if (CheckPoints.stage == 15) {
                                            aim = Medium.random() * 1.5F;
                                        }
                                        if (CheckPoints.stage == 17 && mad.im != 6 && (Medium.random() > Medium.random() || CheckPoints.pos[0] < CheckPoints.pos[mad.im])) {
                                            aim = 1.0F;
                                        }
                                        if (CheckPoints.stage == 18 && mad.cn == 11 && Medium.random() > Medium.random()) {
                                            aim = 0.76F + Medium.random() * 0.76F;
                                        }
                                        if (CheckPoints.stage == 19 && (mad.pcleared == 13 || mad.pcleared == 33)) {
                                            aim = 1.0F;
                                        }
                                        if (CheckPoints.stage == 21)
                                            if (bulistc) {
                                                aim = 0.7F;
                                                if (attack > 150) {
                                                    attack = 150;
                                                }
                                            } else {
                                                aim = Medium.random();
                                            }
                                        if (CheckPoints.stage == 22) {
                                            if (Medium.random() > Medium.random()) {
                                                aim = 0.7F;
                                            }
                                            if (bulistc && attack > 150) {
                                                attack = 150;
                                            }
                                        }
                                        if (CheckPoints.stage == 23 && attack > 60) {
                                            attack = 60;
                                        }
                                        if (CheckPoints.stage == 25) {
                                            aim = Medium.random() * 1.5F;
                                            attack = attack / 2;
                                            exitattack = Medium.random() > Medium.random();
                                        }
                                        if (CheckPoints.stage == 26)
                                            if (mad.cn == 13) {
                                                aim = 0.76F;
                                                attack = 150;
                                            } else {
                                                aim = Medium.random() * 1.5F;
                                                if (Math.abs(CheckPoints.clear[i6] - mad.clear) <= 2 || mad.cn == 14) {
                                                    attack = attack / 3;
                                                }
                                            }
                                        if (CheckPoints.stage == -1 && Medium.random() > Medium.random()) {
                                            aim = Medium.random() * 1.5F;
                                        }
                                        acr = i6;
                                        turntyp = (int) (1.0F + Medium.random() * 2.0F);
                                    }
                                }
                                if (bool && i10 > 100 && py(conto.x / 100, CheckPoints.opx[i6] / 100, conto.z / 100, CheckPoints.opz[i6] / 100) < 300 && Medium.random() > 0.6 - CheckPoints.pos[mad.im] / 10.0F) {
                                    clrnce = 0;
                                    acuracy = 0;
                                }
                            }
                    }
                    boolean bool = false;
                    if (CheckPoints.stage == 6 || CheckPoints.stage == 8) {
                        bool = true;
                    }
                    if (CheckPoints.stage == 9 && mad.cn == 15) {
                        bool = true;
                    }
                    if (CheckPoints.stage == 16 || CheckPoints.stage == 20 || CheckPoints.stage == 21 || CheckPoints.stage == 27) {
                        bool = true;
                    }
                    if (CheckPoints.stage == 18 && mad.pcleared != 73) {
                        bool = true;
                    }
                    if (CheckPoints.stage == -1 && Medium.random() > Medium.random()) {
                        bool = true;
                    }
                    if (trfix != 3) {
                        trfix = 0;
                        int i15 = 50;
                        if (CheckPoints.stage == 26) {
                            i15 = 40;
                        }
                        if (100.0F * mad.hitmag / mad.stat.maxmag > i15) {
                            trfix = 1;
                        }
                        if (!bool) {
                            int i16 = 80;
                            if (CheckPoints.stage == 18 && mad.cn != 11) {
                                i16 = 50;
                            }
                            if (CheckPoints.stage == 19) {
                                i16 = 70;
                            }
                            if (CheckPoints.stage == 25 && mad.pcleared == 91) {
                                i16 = 50;
                            }
                            if (CheckPoints.stage == 26 && CheckPoints.clear[mad.im] - CheckPoints.clear[0] >= 5 && mad.cn != 10 && mad.cn != 12) {
                                i16 = 50;
                            }
                            if (100.0F * mad.hitmag / mad.stat.maxmag > i16) {
                                trfix = 2;
                            }
                        }
                    } else {
                        upwait = 0;
                        acuracy = 0;
                        skiplev = 1.0F;
                        clrnce = 2;
                    }
                    if (!bulistc) {
                        if (CheckPoints.stage == 18 && mad.cn == 11 && mad.pcleared == 35) {
                            mad.pcleared = 73;
                            mad.clear = 0;
                            bulistc = true;
                            runbul = (int) (100.0F * Medium.random());
                        }
                        if (CheckPoints.stage == 21 && mad.cn == 13) {
                            bulistc = true;
                        }
                        if (CheckPoints.stage == 22 && mad.cn == 13) {
                            bulistc = true;
                        }
                        if (CheckPoints.stage == 25 && CheckPoints.clear[0] - mad.clear >= 3 && trfix == 0) {
                            bulistc = true;
                            oupnt = -1;
                        }
                        if (CheckPoints.stage == 26) {
                            if (mad.cn == 13 && CheckPoints.pcleared == 8) {
                                bulistc = true;
                                attack = 0;
                            }
                            if (mad.cn == 11 && CheckPoints.clear[0] - mad.clear >= 2 && trfix == 0) {
                                bulistc = true;
                                oupnt = -1;
                            }
                        }
                        if ((CheckPoints.stage == 6 || CheckPoints.stage == 8 || CheckPoints.stage == 12 || CheckPoints.stage == 13 || CheckPoints.stage == 14 || CheckPoints.stage == 15 || CheckPoints.stage == 18 || CheckPoints.stage == 20 || CheckPoints.stage == 23) && mad.cn == 13 && Math.abs(CheckPoints.clear[0] - mad.clear) >= 2) {
                            bulistc = true;
                        }
                        if ((CheckPoints.stage == 8 || CheckPoints.stage == 20) && mad.cn == 11 && Math.abs(CheckPoints.clear[0] - mad.clear) >= 1) {
                            bulistc = true;
                        }
                        if (CheckPoints.stage == 6 && mad.cn == 11) {
                            bulistc = true;
                        }
                        if (CheckPoints.stage == 9 && afta && (CheckPoints.pos[mad.im] == 4 || CheckPoints.pos[mad.im] == 3) && mad.cn != 15 && trfix != 0) {
                            bulistc = true;
                        }
                    } else if (CheckPoints.stage == 18) {
                        runbul--;
                        if (mad.pcleared == 10) {
                            runbul = 0;
                        }
                        if (runbul <= 0) {
                            bulistc = false;
                        }
                    }
                    stcnt = 0;
                    statusque = (int) (20.0F * Medium.random());
                } else {
                    stcnt++;
                }
            boolean bool;
            if (usebounce) {
                bool = mad.wtouch;
            } else {
                bool = mad.mtouch;
            }
            if (bool) {
                if (trickfase != 0) {
                    trickfase = 0;
                }
                if (trfix == 2 || trfix == 3) {
                    attack = 0;
                }
                if (attack == 0) {
                    if (upcnt < 30)
                        if (revstart <= 0) {
                            up = true;
                        } else {
                            down = true;
                            revstart--;
                        }
                    if (upcnt < 25 + actwait) {
                        upcnt++;
                    } else {
                        upcnt = 0;
                        actwait = upwait;
                    }
                    int i = mad.point;
                    int i17 = 50;
                    if (CheckPoints.stage == 9) {
                        i17 = 20;
                    }
                    if (CheckPoints.stage == 18) {
                        i17 = 20;
                    }
                    if (CheckPoints.stage == 25) {
                        i17 = 40;
                    }
                    if (CheckPoints.stage == 26) {
                        i17 = 20;
                    }
                    if (!bulistc || trfix == 2 || trfix == 3 || trfix == 4 || mad.power < i17) {
                        if (rampp == 1 && CheckPoints.typ[i] <= 0) {
                            int i18 = i + 1;
                            if (i18 >= CheckPoints.n) {
                                i18 = 0;
                            }
                            if (CheckPoints.typ[i18] == -2) {
                                i = i18;
                            }
                        }
                        if (rampp == -1 && CheckPoints.typ[i] == -2 && ++i >= CheckPoints.n) {
                            i = 0;
                        }
                        if (Medium.random() > skiplev) {
                            int i19 = i;
                            boolean bool20 = false;
                            if (CheckPoints.typ[i19] > 0) {
                                int i21 = 0;
                                for (int i22 = 0; i22 < CheckPoints.n; i22++)
                                    if (CheckPoints.typ[i22] > 0 && i22 < i19) {
                                        i21++;
                                    }
                                bool20 = mad.clear != i21 + mad.nlaps * CheckPoints.nsp;
                            }
                            while (CheckPoints.typ[i19] == 0 || CheckPoints.typ[i19] == -1 || CheckPoints.typ[i19] == -3 || bool20) {
                                i = i19;
                                if (++i19 >= CheckPoints.n) {
                                    i19 = 0;
                                }
                                bool20 = false;
                                if (CheckPoints.typ[i19] > 0) {
                                    int i23 = 0;
                                    for (int i24 = 0; i24 < CheckPoints.n; i24++)
                                        if (CheckPoints.typ[i24] > 0 && i24 < i19) {
                                            i23++;
                                        }
                                    bool20 = mad.clear != i23 + mad.nlaps * CheckPoints.nsp;
                                }
                            }
                        } else if (Medium.random() > skiplev) {
                            while (CheckPoints.typ[i] == -1)
                                if (++i >= CheckPoints.n) {
                                    i = 0;
                                }
                        }
                        if (CheckPoints.stage == 18 && mad.pcleared == 73 && trfix == 0 && mad.clear != 0) {
                            i = 10;
                        }
                        if (CheckPoints.stage == 19 && mad.pcleared == 18 && trfix == 0) {
                            i = 27;
                        }
                        if (CheckPoints.stage == 21) {
                            if (mad.pcleared == 5 && trfix == 0 && mad.power < 70.0F)
                                if (i <= 16) {
                                    i = 16;
                                } else {
                                    i = 21;
                                }
                            if (mad.pcleared == 50) {
                                i = 57;
                            }
                        }
                        if (CheckPoints.stage == 22 && (mad.pcleared == 27 || mad.pcleared == 37)) {
                            while (CheckPoints.typ[i] == -1)
                                if (++i >= CheckPoints.n) {
                                    i = 0;
                                }
                        }
                        if (CheckPoints.stage == 23) {
                            while (CheckPoints.typ[i] == -1)
                                if (++i >= CheckPoints.n) {
                                    i = 0;
                                }
                        }
                        if (CheckPoints.stage == 24) {
                            while (CheckPoints.typ[i] == -1)
                                if (++i >= CheckPoints.n) {
                                    i = 0;
                                }
                            if (!mad.gtouch) {
                                while (CheckPoints.typ[i] == -2)
                                    if (++i >= CheckPoints.n) {
                                        i = 0;
                                    }
                            }
                            if (oupnt >= 68) {
                                i = 70;
                            } else {
                                oupnt = i;
                            }
                        }
                        if (CheckPoints.stage == 25) {
                            if (mad.pcleared != 91 && CheckPoints.pos[0] < CheckPoints.pos[mad.im] && mad.cn != 13 || CheckPoints.pos[mad.im] == 0 && (mad.clear == 12 || mad.clear == 20)) {
                                while (CheckPoints.typ[i] == -4)
                                    if (++i >= CheckPoints.n) {
                                        i = 0;
                                    }
                            }
                            if (mad.pcleared == 9) {
                                if (py(conto.x / 100, 297, conto.z / 100, 347) < 400) {
                                    oupnt = 1;
                                }
                                if (oupnt == 1 && i < 22) {
                                    i = 22;
                                }
                            }
                            if (mad.pcleared == 67) {
                                if (py(conto.x / 100, 28, conto.z / 100, 494) < 4000) {
                                    oupnt = 2;
                                }
                                if (oupnt == 2) {
                                    i = 76;
                                }
                            }
                            if (mad.pcleared == 76) {
                                if (py(conto.x / 100, -50, conto.z / 100, 0) < 2000) {
                                    oupnt = 3;
                                }
                                if (oupnt == 3) {
                                    i = 91;
                                } else {
                                    i = 89;
                                }
                            }
                        }
                        if (CheckPoints.stage == 26) {
                            if (mad.pcleared == 128) {
                                if (py(conto.x / 100, 0, conto.z / 100, 229) < 1500 || conto.z > 23000) {
                                    oupnt = 128;
                                }
                                if (oupnt != 128) {
                                    i = 3;
                                }
                            }
                            if (mad.pcleared == 8) {
                                if (py(conto.x / 100, -207, conto.z / 100, 549) < 1500 || conto.x < -20700) {
                                    oupnt = 8;
                                }
                                if (oupnt != 8) {
                                    i = 12;
                                }
                            }
                            if (mad.pcleared == 33) {
                                if (py(conto.x / 100, -60, conto.z / 100, 168) < 250 || conto.z > 17000) {
                                    oupnt = 331;
                                }
                                if (py(conto.x / 100, -112, conto.z / 100, 414) < 10000 || conto.z > 40000) {
                                    oupnt = 332;
                                }
                                if (oupnt != 331 && oupnt != 332)
                                    if (trfix != 1) {
                                        i = 38;
                                    } else {
                                        i = 39;
                                    }
                                if (oupnt == 331) {
                                    i = 71;
                                }
                            }
                            if (mad.pcleared == 42) {
                                if (py(conto.x / 100, -269, conto.z / 100, 493) < 100 || conto.x < -27000) {
                                    oupnt = 142;
                                }
                                if (oupnt != 142) {
                                    i = 47;
                                }
                            }
                            if (mad.pcleared == 51) {
                                if (py(conto.x / 100, -352, conto.z / 100, 260) < 100 || conto.z < 25000) {
                                    oupnt = 511;
                                }
                                if (py(conto.x / 100, -325, conto.z / 100, 10) < 2000 || conto.x > -32000) {
                                    oupnt = 512;
                                }
                                if (oupnt != 511 && oupnt != 512) {
                                    i = 80;
                                }
                                if (oupnt == 511) {
                                    i = 61;
                                }
                            }
                            if (mad.pcleared == 77) {
                                if (py(conto.x / 100, -371, conto.z / 100, 319) < 100 || conto.z < 31000) {
                                    oupnt = 77;
                                }
                                if (oupnt != 77) {
                                    i = 78;
                                    mad.nofocus = true;
                                }
                            }
                            if (mad.pcleared == 105) {
                                if (py(conto.x / 100, -179, conto.z / 100, 10) < 2300 || conto.z < 1050) {
                                    oupnt = 105;
                                }
                                if (oupnt != 105) {
                                    i = 65;
                                } else {
                                    i = 125;
                                }
                            }
                            if (trfix == 3) {
                                if (py(conto.x / 100, -52, conto.z / 100, 448) < 100 || conto.z > 45000) {
                                    oupnt = 176;
                                }
                                if (oupnt != 176) {
                                    i = 41;
                                } else {
                                    i = 43;
                                }
                            }
                            if (CheckPoints.clear[mad.im] - CheckPoints.clear[0] >= 2 && py(conto.x / 100, CheckPoints.opx[0] / 100, conto.z / 100, CheckPoints.opz[0] / 100) < 1000 + avoidnlev) {
                                int i25 = conto.xz;
                                if (zyinv) {
                                    i25 += 180;
                                }
                                for (/**/; i25 < 0; i25 += 360) {

                                }
                                for (/**/; i25 > 180; i25 -= 360) {

                                }
                                int i26 = 0;
                                if (CheckPoints.opx[0] - conto.x >= 0) {
                                    i26 = 180;
                                }
                                int i27;
                                for (i27 = (int) (90 + i26 + Math.atan((double) (CheckPoints.opz[0] - conto.z) / (double) (CheckPoints.opx[0] - conto.x)) / 0.017453292519943295); i27 < 0; i27 += 360) {

                                }
                                for (/**/; i27 > 180; i27 -= 360) {

                                }
                                int i28 = Math.abs(i25 - i27);
                                if (i28 > 180) {
                                    i28 = Math.abs(i28 - 360);
                                }
                                if (i28 < 90) {
                                    wall = 0;
                                }
                            }
                        }
                        if (rampp == 2) {
                            int i29 = i + 1;
                            if (i29 >= CheckPoints.n) {
                                i29 = 0;
                            }
                            if (CheckPoints.typ[i29] == -2 && i != mad.point && --i < 0) {
                                i += CheckPoints.n;
                            }
                        }
                        if (bulistc) {
                            mad.nofocus = true;
                            if (gowait) {
                                gowait = false;
                            }
                        }
                    } else {
                        if (CheckPoints.stage != 25 && CheckPoints.stage != 26 || runbul == 0) {
                            i -= 2;
                            if (i < 0) {
                                i += CheckPoints.n;
                            }
                            if (CheckPoints.stage == 9 && i > 76) {
                                i = 76;
                            }
                            while (CheckPoints.typ[i] == -4)
                                if (--i < 0) {
                                    i += CheckPoints.n;
                                }
                        }
                        if (CheckPoints.stage == 21) {
                            if (i >= 14 && i <= 19) {
                                i = 13;
                            }
                            if (oupnt == 72 && i != 56) {
                                i = 57;
                            } else if (oupnt == 54 && i != 52) {
                                i = 53;
                            } else if (oupnt == 39 && i != 37) {
                                i = 38;
                            } else {
                                oupnt = i;
                            }
                        }
                        if (CheckPoints.stage == 22) {
                            if (!gowait) {
                                if (CheckPoints.clear[0] == 0) {
                                    wtx = -3500;
                                    wtz = 19000;
                                    frx = -3500;
                                    frz = 39000;
                                    frad = 12000;
                                    oupnt = 37;
                                    gowait = true;
                                    afta = false;
                                }
                                if (CheckPoints.clear[0] == 7) {
                                    wtx = -44800;
                                    wtz = 40320;
                                    frx = -44800;
                                    frz = 34720;
                                    frad = 30000;
                                    oupnt = 27;
                                    gowait = true;
                                    afta = false;
                                }
                                if (CheckPoints.clear[0] == 10) {
                                    wtx = 0;
                                    wtz = 48739;
                                    frx = 0;
                                    frz = 38589;
                                    frad = 90000;
                                    oupnt = 55;
                                    gowait = true;
                                    afta = false;
                                }
                                if (CheckPoints.clear[0] == 14) {
                                    wtx = -3500;
                                    wtz = 19000;
                                    frx = -14700;
                                    frz = 39000;
                                    frad = 45000;
                                    oupnt = 37;
                                    gowait = true;
                                    afta = false;
                                }
                                if (CheckPoints.clear[0] == 18) {
                                    wtx = -48300;
                                    wtz = -4550;
                                    frx = -48300;
                                    frz = 5600;
                                    frad = 90000;
                                    oupnt = 17;
                                    gowait = true;
                                    afta = false;
                                }
                            }
                            if (gowait) {
                                if (py(conto.x / 100, wtx / 100, conto.z / 100, wtz / 100) < 10000 && mad.speed > 50.0F) {
                                    up = false;
                                }
                                if (py(conto.x / 100, wtx / 100, conto.z / 100, wtz / 100) < 200) {
                                    up = false;
                                    handb = true;
                                }
                                if (CheckPoints.pcleared == oupnt && py(CheckPoints.opx[0] / 100, frx / 100, CheckPoints.opz[0] / 100, frz / 100) < frad) {
                                    afta = true;
                                    gowait = false;
                                }
                                if (py(conto.x / 100, CheckPoints.opx[0] / 100, conto.z / 100, CheckPoints.opz[0] / 100) < 25) {
                                    afta = true;
                                    gowait = false;
                                    attack = 200;
                                    acr = 0;
                                }
                            }
                        }
                        if (CheckPoints.stage == 25) {
                            if (oupnt == -1) {
                                int i30 = -10;
                                for (int i31 = 0; i31 < CheckPoints.n; i31++)
                                    if ((CheckPoints.typ[i31] == -2 || CheckPoints.typ[i31] == -4) && (i31 < 50 || i31 > 54) && (py(conto.x / 100, CheckPoints.x[i31] / 100, conto.z / 100, CheckPoints.z[i31] / 100) < i30 || i30 == -10)) {
                                        i30 = py(conto.x / 100, CheckPoints.x[i31] / 100, conto.z / 100, CheckPoints.z[i31] / 100);
                                        oupnt = i31;
                                    }
                                oupnt--;
                                if (i < 0) {
                                    oupnt += CheckPoints.n;
                                }
                            }
                            if (oupnt >= 0 && oupnt < CheckPoints.n) {
                                i = oupnt;
                                if (py(conto.x / 100, CheckPoints.x[i] / 100, conto.z / 100, CheckPoints.z[i] / 100) < 800) {
                                    oupnt = -(int) (75.0F + Medium.random() * 200.0F);
                                    runbul = (int) (50.0F + Medium.random() * 100.0F);
                                }
                            }
                            if (oupnt < -1) {
                                oupnt++;
                            }
                            if (runbul != 0) {
                                runbul--;
                            }
                        }
                        if (CheckPoints.stage == 26) {
                            boolean bool32 = false;
                            if (mad.cn == 13) {
                                if (!gowait) {
                                    if (CheckPoints.clear[0] == 1) {
                                        if (Medium.random() > 0.5) {
                                            wtx = -14000;
                                            wtz = 48000;
                                            frx = -5600;
                                            frz = 47600;
                                            frad = 88000;
                                            oupnt = 33;
                                        } else {
                                            wtx = -5600;
                                            wtz = 8000;
                                            frx = -7350;
                                            frz = -4550;
                                            frad = 22000;
                                            oupnt = 15;
                                        }
                                        gowait = true;
                                        afta = false;
                                    }
                                    if (CheckPoints.clear[0] == 4) {
                                        wtx = -12700;
                                        wtz = 14000;
                                        frx = -31000;
                                        frz = 1050;
                                        frad = 11000;
                                        oupnt = 51;
                                        gowait = true;
                                        afta = false;
                                    }
                                    if (CheckPoints.clear[0] == 14) {
                                        wtx = -35350;
                                        wtz = 6650;
                                        frx = -48300;
                                        frz = 54950;
                                        frad = 11000;
                                        oupnt = 15;
                                        gowait = true;
                                        afta = false;
                                    }
                                    if (CheckPoints.clear[0] == 17) {
                                        wtx = -42700;
                                        wtz = 41000;
                                        frx = -40950;
                                        frz = 49350;
                                        frad = 7000;
                                        oupnt = 42;
                                        gowait = true;
                                        afta = false;
                                    }
                                    if (CheckPoints.clear[0] == 21) {
                                        wtx = -1750;
                                        wtz = -15750;
                                        frx = -25900;
                                        frz = -14000;
                                        frad = 11000;
                                        oupnt = 125;
                                        gowait = true;
                                        afta = false;
                                    }
                                }
                                if (gowait) {
                                    if (py(conto.x / 100, wtx / 100, conto.z / 100, wtz / 100) < 10000 && mad.speed > 50.0F) {
                                        up = false;
                                    }
                                    if (py(conto.x / 100, wtx / 100, conto.z / 100, wtz / 100) < 200) {
                                        up = false;
                                        handb = true;
                                    }
                                    if (CheckPoints.pcleared == oupnt && py(CheckPoints.opx[0] / 100, frx / 100, CheckPoints.opz[0] / 100, frz / 100) < frad) {
                                        runbul = 0;
                                        afta = true;
                                        gowait = false;
                                    }
                                    if (py(conto.x / 100, CheckPoints.opx[0] / 100, conto.z / 100, CheckPoints.opz[0] / 100) < 25) {
                                        afta = true;
                                        gowait = false;
                                        attack = 200;
                                        acr = 0;
                                    }
                                    if (CheckPoints.clear[0] == 21 && oupnt != 125) {
                                        gowait = false;
                                    }
                                }
                                if (CheckPoints.clear[0] >= 11 && !gowait || mad.power < 60.0F && CheckPoints.clear[0] < 21) {
                                    bool32 = true;
                                    if (!exitattack) {
                                        oupnt = -1;
                                        exitattack = true;
                                    }
                                } else if (exitattack) {
                                    exitattack = false;
                                }
                            }
                            if (mad.cn == 11) {
                                bool32 = true;
                            }
                            if (bool32) {
                                if (oupnt == -1) {
                                    int i33 = -10;
                                    for (int i34 = 0; i34 < CheckPoints.n; i34++)
                                        if (CheckPoints.typ[i34] == -4 && (py(conto.x / 100, CheckPoints.x[i34] / 100, conto.z / 100, CheckPoints.z[i34] / 100) < i33 && Medium.random() > 0.6 || i33 == -10)) {
                                            i33 = py(conto.x / 100, CheckPoints.x[i34] / 100, conto.z / 100, CheckPoints.z[i34] / 100);
                                            oupnt = i34;
                                        }
                                    oupnt--;
                                    if (i < 0) {
                                        oupnt += CheckPoints.n;
                                    }
                                }
                                if (oupnt >= 0 && oupnt < CheckPoints.n) {
                                    i = oupnt;
                                    if (py(conto.x / 100, CheckPoints.x[i] / 100, conto.z / 100, CheckPoints.z[i] / 100) < 800) {
                                        oupnt = -(int) (75.0F + Medium.random() * 200.0F);
                                        runbul = (int) (50.0F + Medium.random() * 100.0F);
                                    }
                                }
                                if (oupnt < -1) {
                                    oupnt++;
                                }
                                if (runbul != 0) {
                                    runbul--;
                                }
                            }
                        }
                        mad.nofocus = true;
                    }
                    if (CheckPoints.stage != 27) {
                        if (CheckPoints.stage == 10 || CheckPoints.stage == 19 || CheckPoints.stage == 18 && mad.pcleared == 73 || CheckPoints.stage == 26) {
                            forget = true;
                        }
                        if ((mad.missedcp == 0 || forget || trfix == 4) && trfix != 0) {
                            int i35 = 0;
                            if (CheckPoints.stage == 25 || CheckPoints.stage == 26) {
                                i35 = 3;
                            }
                            if (trfix == 2) {
                                int i36 = -10;
                                int i37 = 0;
                                for (int i38 = i35; i38 < CheckPoints.fn; i38++)
                                    if (py(conto.x / 100, CheckPoints.x[fpnt[i38]] / 100, conto.z / 100, CheckPoints.z[fpnt[i38]] / 100) < i36 || i36 == -10) {
                                        i36 = py(conto.x / 100, CheckPoints.x[fpnt[i38]] / 100, conto.z / 100, CheckPoints.z[fpnt[i38]] / 100);
                                        i37 = i38;
                                    }
                                if (CheckPoints.stage == 18 || CheckPoints.stage == 22) {
                                    i37 = 1;
                                }
                                i = fpnt[i37];
                                forget = CheckPoints.special[i37];
                            }
                            for (int i39 = i35; i39 < CheckPoints.fn; i39++)
                                if (py(conto.x / 100, CheckPoints.x[fpnt[i39]] / 100, conto.z / 100, CheckPoints.z[fpnt[i39]] / 100) < 2000) {
                                    forget = false;
                                    actwait = 0;
                                    upwait = 0;
                                    turntyp = 2;
                                    randtcnt = -1;
                                    acuracy = 0;
                                    rampp = 0;
                                    trfix = 3;
                                }
                            if (trfix == 3) {
                                mad.nofocus = true;
                            }
                        }
                    }
                    if (turncnt > randtcnt) {
                        if (!gowait) {
                            int i40 = 0;
                            if (CheckPoints.x[i] - conto.x >= 0) {
                                i40 = 180;
                            }
                            pan = (int) (90 + i40 + Math.atan((double) (CheckPoints.z[i] - conto.z) / (double) (CheckPoints.x[i] - conto.x)) / 0.017453292519943295);
                        } else {
                            int i41 = 0;
                            if (wtx - conto.x >= 0) {
                                i41 = 180;
                            }
                            pan = (int) (90 + i41 + Math.atan((double) (wtz - conto.z) / (double) (wtx - conto.x)) / 0.017453292519943295);
                        }
                        turncnt = 0;
                        randtcnt = (int) (acuracy * Medium.random());
                    } else {
                        turncnt++;
                    }
                } else {
                    up = true;
                    int i = 0;
                    final int i42 = (int) (pys(conto.x, CheckPoints.opx[acr], conto.z, CheckPoints.opz[acr]) / 2.0F * aim);
                    final int i43 = (int) (CheckPoints.opx[acr] - i42 * Medium.sin(CheckPoints.omxz[acr]));
                    final int i44 = (int) (CheckPoints.opz[acr] + i42 * Medium.cos(CheckPoints.omxz[acr]));
                    if (i43 - conto.x >= 0) {
                        i = 180;
                    }
                    pan = (int) (90 + i + Math.atan((double) (i44 - conto.z) / (double) (i43 - conto.x)) / 0.017453292519943295);
                    attack--;
                    if (attack <= 0) {
                        attack = 0;
                    }
                    if (CheckPoints.stage == 25 && exitattack && !bulistc && mad.missedcp != 0) {
                        attack = 0;
                    }
                    if (CheckPoints.stage == 26 && mad.cn == 13 && (CheckPoints.clear[0] == 4 || CheckPoints.clear[0] == 13 || CheckPoints.clear[0] == 21)) {
                        attack = 0;
                    }
                    if (CheckPoints.stage == 26 && mad.missedcp != 0 && (CheckPoints.pos[mad.im] == 0 || CheckPoints.pos[mad.im] == 1 && CheckPoints.pos[0] == 0)) {
                        attack = 0;
                    }
                    if (CheckPoints.stage == 26 && CheckPoints.pos[0] > CheckPoints.pos[mad.im] && mad.power < 80.0F) {
                        attack = 0;
                    }
                }
                int i = conto.xz;
                if (zyinv) {
                    i += 180;
                }
                for (/**/; i < 0; i += 360) {

                }
                for (/**/; i > 180; i -= 360) {

                }
                for (/**/; pan < 0; pan += 360) {

                }
                for (/**/; pan > 180; pan -= 360) {

                }
                if (wall != -1 && hold == 0) {
                    clrnce = 0;
                }
                if (hold == 0)
                    if (Math.abs(i - pan) < 180) {
                        if (Math.abs(i - pan) > clrnce) {
                            if (i < pan) {
                                left = true;
                                lastl = true;
                            } else {
                                right = true;
                                lastl = false;
                            }
                            if (Math.abs(i - pan) > 50 && mad.speed > mad.stat.swits[0] && turntyp != 0) {
                                if (turntyp == 1) {
                                    down = true;
                                }
                                if (turntyp == 2) {
                                    handb = true;
                                }
                                if (!agressed) {
                                    up = false;
                                }
                            }
                        }
                    } else if (Math.abs(i - pan) < 360 - clrnce) {
                        if (i < pan) {
                            right = true;
                            lastl = false;
                        } else {
                            left = true;
                            lastl = true;
                        }
                        if (Math.abs(i - pan) < 310 && mad.speed > mad.stat.swits[0] && turntyp != 0) {
                            if (turntyp == 1) {
                                down = true;
                            }
                            if (turntyp == 2) {
                                handb = true;
                            }
                            if (!agressed) {
                                up = false;
                            }
                        }
                    }
                if (CheckPoints.stage == 24 && wall != -1) {
                    if (Trackers.dam[wall] == 0 || mad.pcleared == 45) {
                        wall = -1;
                    }
                    if (mad.pcleared == 58 && CheckPoints.opz[mad.im] < 36700) {
                        wall = -1;
                        hold = 0;
                    }
                }
                if (wall != -1) {
                    if (lwall != wall) {
                        if (lastl) {
                            left = true;
                        } else {
                            right = true;
                        }
                        wlastl = lastl;
                        lwall = wall;
                    } else if (wlastl) {
                        left = true;
                    } else {
                        right = true;
                    }
                    if (Trackers.dam[wall] != 0) {
                        int i45 = 1;
                        if (Trackers.skd[wall] == 1) {
                            i45 = 3;
                        }
                        hold += i45;
                        if (hold > 10 * i45) {
                            hold = 10 * i45;
                        }
                    } else {
                        hold = 1;
                    }
                    wall = -1;
                } else if (hold != 0) {
                    hold--;
                }
            } else {
                if (trickfase == 0) {
                    final int i = (int) ((mad.scy[0] + mad.scy[1] + mad.scy[2] + mad.scy[3]) * (conto.y - 300) / 4000.0F);
                    int i46 = 3;
                    if (CheckPoints.stage == 25) {
                        i46 = 10;
                    }
                    if (i > 7 && (Medium.random() > trickprf / i46 || stuntf == 4 || stuntf == 3 || stuntf == 5 || stuntf == 6 || CheckPoints.stage == 26)) {
                        oxy = mad.pxy;
                        ozy = mad.pzy;
                        flycnt = 0;
                        uddirect = 0;
                        lrdirect = 0;
                        udswt = false;
                        lrswt = false;
                        trickfase = 1;
                        if (i < 16) {
                            if (stuntf != 6) {
                                uddirect = -1;
                                udstart = 0;
                                udswt = false;
                            } else if (oupnt != 70) {
                                uddirect = 1;
                                udstart = 0;
                                udswt = false;
                            }
                        } else if (Medium.random() > Medium.random() && stuntf != 1 || stuntf == 4 || stuntf == 6 || stuntf == 7 || stuntf == 17) {
                            if ((Medium.random() > Medium.random() || stuntf == 2 || stuntf == 7) && stuntf != 4 && stuntf != 6) {
                                uddirect = -1;
                            } else {
                                uddirect = 1;
                            }
                            udstart = (int) (10.0F * Medium.random() * trickprf);
                            if (stuntf == 6) {
                                udstart = 0;
                            }
                            if (CheckPoints.stage == 26) {
                                udstart = 0;
                            }
                            if (CheckPoints.stage == 24 && (oupnt == 68 || oupnt == 69)) {
                                apunch = 20;
                                oupnt = 70;
                            }
                            if (Medium.random() > 0.85 && stuntf != 4 && stuntf != 3 && stuntf != 6 && stuntf != 17 && CheckPoints.stage != 26) {
                                udswt = true;
                            }
                            if (Medium.random() > trickprf + 0.3F && stuntf != 4 && stuntf != 6) {
                                if (Medium.random() > Medium.random()) {
                                    lrdirect = -1;
                                } else {
                                    lrdirect = 1;
                                }
                                lrstart = (int) (30.0F * Medium.random());
                                if (Medium.random() > 0.75) {
                                    lrswt = true;
                                }
                            }
                        } else {
                            if (Medium.random() > Medium.random()) {
                                lrdirect = -1;
                            } else {
                                lrdirect = 1;
                            }
                            lrstart = (int) (10.0F * Medium.random() * trickprf);
                            if (Medium.random() > 0.75 && CheckPoints.stage != 26) {
                                lrswt = true;
                            }
                            if (Medium.random() > trickprf + 0.3F) {
                                if (Medium.random() > Medium.random()) {
                                    uddirect = -1;
                                } else {
                                    uddirect = 1;
                                }
                                udstart = (int) (30.0F * Medium.random());
                                if (Medium.random() > 0.85) {
                                    udswt = true;
                                }
                            }
                        }
                        if (trfix == 3 || trfix == 4) {
                            if (CheckPoints.stage != 18 && CheckPoints.stage != 8) {
                                if (CheckPoints.stage != 25 && lrdirect == -1)
                                    if (CheckPoints.stage != 19) {
                                        uddirect = -1;
                                    } else {
                                        uddirect = 1;
                                    }
                                lrdirect = 0;
                                if ((CheckPoints.stage == 19 || CheckPoints.stage == 25) && uddirect == -1) {
                                    uddirect = 1;
                                }
                                if (mad.power < 60.0F) {
                                    uddirect = -1;
                                }
                            } else {
                                if (uddirect != 0) {
                                    uddirect = -1;
                                }
                                lrdirect = 0;
                            }
                            if (CheckPoints.stage == 20) {
                                uddirect = 1;
                                lrdirect = 0;
                            }
                            if (CheckPoints.stage == 26) {
                                uddirect = -1;
                                lrdirect = 0;
                                if (mad.cn != 11 && mad.cn != 13) {
                                    udstart = 7;
                                    if (mad.cn == 14 && mad.power > 30.0F) {
                                        udstart = 14;
                                    }
                                } else {
                                    udstart = 0;
                                }
                                if (mad.cn == 11) {
                                    lrdirect = -1;
                                    lrstart = 0;
                                }
                            }
                        }
                    } else {
                        trickfase = -1;
                    }
                    if (!afta) {
                        afta = true;
                    }
                    if (trfix == 3) {
                        trfix = 4;
                        statusque += 30;
                    }
                }
                if (trickfase == 1) {
                    flycnt++;
                    if (lrdirect != 0 && flycnt > lrstart) {
                        if (lrswt && Math.abs(mad.pxy - oxy) > 180) {
                            if (lrdirect == -1) {
                                lrdirect = 1;
                            } else {
                                lrdirect = -1;
                            }
                            lrswt = false;
                        }
                        if (lrdirect == -1) {
                            handb = true;
                            left = true;
                        } else {
                            handb = true;
                            right = true;
                        }
                    }
                    if (uddirect != 0 && flycnt > udstart) {
                        if (udswt && Math.abs(mad.pzy - ozy) > 180) {
                            if (uddirect == -1) {
                                uddirect = 1;
                            } else {
                                uddirect = -1;
                            }
                            udswt = false;
                        }
                        if (uddirect == -1) {
                            handb = true;
                            down = true;
                        } else {
                            handb = true;
                            up = true;
                            if (apunch > 0) {
                                down = true;
                                apunch--;
                            }
                        }
                    }
                    if ((mad.scy[0] + mad.scy[1] + mad.scy[2] + mad.scy[3]) * 100.0F / (conto.y - 300) < -saftey) {
                        onceu = false;
                        onced = false;
                        oncel = false;
                        oncer = false;
                        lrcomp = false;
                        udcomp = false;
                        udbare = false;
                        lrbare = false;
                        trickfase = 2;
                        swat = 0;
                    }
                }
                if (trickfase == 2) {
                    if (swat == 0) {
                        if (mad.dcomp != 0.0F || mad.ucomp != 0.0F) {
                            udbare = true;
                        }
                        if (mad.lcomp != 0.0F || mad.rcomp != 0.0F) {
                            lrbare = true;
                        }
                        swat = 1;
                    }
                    if (mad.wtouch) {
                        if (swat == 1) {
                            swat = 2;
                        }
                    } else if (swat == 2) {
                        if (mad.capsized && Medium.random() > mustland)
                            if (udbare) {
                                lrbare = true;
                                udbare = false;
                            } else if (lrbare) {
                                udbare = true;
                                lrbare = false;
                            }
                        swat = 3;
                    }
                    if (udbare) {
                        int i;
                        for (i = mad.pzy + 90; i < 0; i += 360) {

                        }
                        for (/**/; i > 180; i -= 360) {

                        }
                        i = Math.abs(i);
                        if (mad.lcomp - mad.rcomp < 5.0F && (onced || onceu)) {
                            udcomp = true;
                        }
                        if (mad.dcomp > mad.ucomp) {
                            if (mad.capsized) {
                                if (udcomp) {
                                    if (i > 90) {
                                        up = true;
                                    } else {
                                        down = true;
                                    }
                                } else if (!onced) {
                                    down = true;
                                }
                            } else {
                                if (udcomp) {
                                    if (perfection && Math.abs(i - 90) > 30)
                                        if (i > 90) {
                                            up = true;
                                        } else {
                                            down = true;
                                        }
                                } else if (Medium.random() > mustland) {
                                    up = true;
                                }
                                onced = true;
                            }
                        } else if (mad.capsized) {
                            if (udcomp) {
                                if (i > 90) {
                                    up = true;
                                } else {
                                    down = true;
                                }
                            } else if (!onceu) {
                                up = true;
                            }
                        } else {
                            if (udcomp) {
                                if (perfection && Math.abs(i - 90) > 30)
                                    if (i > 90) {
                                        up = true;
                                    } else {
                                        down = true;
                                    }
                            } else if (Medium.random() > mustland) {
                                down = true;
                            }
                            onceu = true;
                        }
                    }
                    if (lrbare) {
                        int i = mad.pxy + 90;
                        if (zyinv) {
                            i += 180;
                        }
                        for (/**/; i < 0; i += 360) {

                        }
                        for (/**/; i > 180; i -= 360) {

                        }
                        i = Math.abs(i);
                        if (mad.lcomp - mad.rcomp < 10.0F && (oncel || oncer)) {
                            lrcomp = true;
                        }
                        if (mad.lcomp > mad.rcomp) {
                            if (mad.capsized) {
                                if (lrcomp) {
                                    if (i > 90) {
                                        left = true;
                                    } else {
                                        right = true;
                                    }
                                } else if (!oncel) {
                                    left = true;
                                }
                            } else {
                                if (lrcomp) {
                                    if (perfection && Math.abs(i - 90) > 30)
                                        if (i > 90) {
                                            left = true;
                                        } else {
                                            right = true;
                                        }
                                } else if (Medium.random() > mustland) {
                                    right = true;
                                }
                                oncel = true;
                            }
                        } else if (mad.capsized) {
                            if (lrcomp) {
                                if (i > 90) {
                                    left = true;
                                } else {
                                    right = true;
                                }
                            } else if (!oncer) {
                                right = true;
                            }
                        } else {
                            if (lrcomp) {
                                if (perfection && Math.abs(i - 90) > 30)
                                    if (i > 90) {
                                        left = true;
                                    } else {
                                        right = true;
                                    }
                            } else if (Medium.random() > mustland) {
                                left = true;
                            }
                            oncer = true;
                        }
                    }
                }
            }
        }
    }

    private int py(final int i, final int i47, final int i48, final int i49) {
        return (i - i47) * (i - i47) + (i48 - i49) * (i48 - i49);
    }

    private int pys(final int i, final int i50, final int i51, final int i52) {
        return (int) Math.sqrt((i - i50) * (i - i50) + (i51 - i52) * (i51 - i52));
    }

    void reset(final int i) {
        pan = 0;
        attack = 0;
        acr = 0;
        afta = false;
        trfix = 0;
        acuracy = 0;
        upwait = 0;
        forget = false;
        bulistc = false;
        runbul = 0;
        revstart = 0;
        oupnt = 0;
        gowait = false;
        apunch = 0;
        exitattack = false;
        if (CheckPoints.stage == 16 || CheckPoints.stage == 18) {
            hold = 50;
        }
        if (CheckPoints.stage == 17) {
            hold = 10;
        }
        if (CheckPoints.stage == 20) {
            hold = 30;
        }
        if (CheckPoints.stage == 21) {
            if (i != 13) {
                hold = 35;
                revstart = 25;
            } else {
                hold = 5;
            }
            statusque = 0;
        }
        if (CheckPoints.stage == 22) {
            if (i != 13) {
                hold = (int) (20.0F + 10.0F * Medium.random());
                revstart = (int) (10.0F + 10.0F * Medium.random());
            } else {
                hold = 5;
            }
            statusque = 0;
        }
        if (CheckPoints.stage == 24) {
            hold = 30;
            statusque = 0;
            if (i != 14) {
                revstart = 1;
            }
        }
        if (CheckPoints.stage == 25) {
            hold = 40;
        }
        if (CheckPoints.stage == 26) {
            hold = 20;
        }
        if (CheckPoints.stage != 19 && CheckPoints.stage != 26) {
            for (int i0 = 0; i0 < CheckPoints.fn; i0++) {
                int i1 = -10;
                for (int i2 = 0; i2 < CheckPoints.n; i2++)
                    if (py(CheckPoints.fx[i0] / 100, CheckPoints.x[i2] / 100, CheckPoints.fz[i0] / 100, CheckPoints.z[i2] / 100) < i1 || i1 == -10) {
                        i1 = py(CheckPoints.fx[i0] / 100, CheckPoints.x[i2] / 100, CheckPoints.fz[i0] / 100, CheckPoints.z[i2] / 100);
                        fpnt[i0] = i2;
                    }
            }
            for (int i3 = 0; i3 < CheckPoints.fn; i3++) {
                fpnt[i3] -= 4;
                if (fpnt[i3] < 0) {
                    fpnt[i3] += CheckPoints.nsp;
                }
            }
        } else {
            if (CheckPoints.stage == 19) {
                fpnt[0] = 14;
                fpnt[1] = 36;
            }
            if (CheckPoints.stage == 26) {
                fpnt[3] = 39;
            }
        }
        left = false;
        right = false;
        up = false;
        down = false;
        handb = false;
        lookback = 0;
        arrace = false;
        mutem = false;
        mutes = false;
    }
}
//package nfm.open;
/* GameSparker - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */

//importjavax.swing.*;
//importjavax.swing.Timer;

//importnfm.open.xtGraphics.Images;
//importnfm.open.util.FileUtil;

//importjava.awt.*;
//importjava.awt.event.*;
//importjava.awt.image.BufferedImage;
//importjava.io.*;
//importjava.net.URI;
//importjava.net.URL;
//importjava.util.*;
//importjava.util.concurrent.ThreadLocalRandom;
//importjava.util.zip.ZipEntry;
//importjava.util.zip.ZipInputStream;

class GameSparker extends JPanel
        implements KeyListener, MouseListener, MouseMotionListener, FocusListener {
    /**
     *
     */
    private static final long serialVersionUID = -5976860556958716653L;

    private static final Comparator<int[]> contoComparator = (arg0, arg1) -> Integer.compare(arg1[1], arg0[1]);

    /**
     * Game size multiplier
     */
    static private float apmult = 1.0F;

    /**
     * Whether JVM vendor is Apple or not
     */
    static boolean applejava = false;

    /**
     * Game's X position in window
     */
    static private int apx = 0;

    /**
     * Game's Y position in window
     */
    static private int apy = 0;
    static private Image blb;
    static private final Image[] carmaker = new Image[2];
    static private final Image[] chkbx = new Image[2];
    static private final Smenu clanlev = new Smenu(8);
    static private final Smenu clcars = new Smenu(707);
    static TextField cmsg;
    static private final Smenu datat = new Smenu(26);
    static private boolean exwist = false;
    static private int fcscnt = 0;
    static private Image fulls;
    static final Smenu gmode = new Smenu(3);
    static private final Smenu icars = new Smenu(5);
    static private final Smenu ilaps = new Smenu(18);
    static Checkbox keplo;
    static private int lasth = 0;
    static private int lastw = 0;
    static private int lmxz = 0;
    static private boolean lostfcs = false;
    static final Smenu mcars = new Smenu(707);
    static private int mload = 1;
    static private TextArea mmsg;
    /**
     * 0 = Motion effects off
     * 1 = Motion effects on
     */
    static int moto = 0;
    static private boolean moused = false;
    static int mouses = 0;
    static private int mousew = 0;
    static final Smenu mstgs = new Smenu(707);
    /**
     * Applies transparency to every polygon (20 is 20% opacity, 100 is 100% opacity)
     */
    static private int mvect = 100;
    static Checkbox mycar;
    static private int nob = 0;
    static private int notb = 0;
    static Checkbox notp;
    static final BufferedImage offImage = createOffImage();
    static private boolean onbar = false;
    static private boolean oncarm = false;
    static private boolean onfulls = false;
    static private boolean onstgm = false;
    static boolean openm = false;
    static final Smenu pgame = new Smenu(11);
    static private final Smenu proitem = new Smenu(707);
    final static Graphics2D rd = offImage.createGraphics();;
    static private float reqmult = 0.0F;
    static final Smenu rooms = new Smenu(7);
    static final Smenu scars = new Smenu(4);
    static final Smenu sclass = new Smenu(7);
    static private final Smenu senditem = new Smenu(707);
    static private final Smenu sendtyp = new Smenu(6);
    static final Smenu sfix = new Smenu(7);
    static final Smenu sgame = new Smenu(8);
    static private int shaka = 0;
    static private int showsize = 0;
    static private Image sizebar;
    static final Smenu slaps = new Smenu(17);
    static private int smooth = 1;
    static final Smenu snbts = new Smenu(8);
    //Smenu snfm1 = new Smenu(12);
    //Smenu snfm2 = new Smenu(19);
    static final Smenu snfmm = new Smenu(xtGraphics.nTracks + 2);
    static final Smenu snpls = new Smenu(9);
    static private final Image[] stagemaker = new Image[2];
    static final Smenu swait = new Smenu(6);
    static TextField temail;
    static TextField tnick;
    static TextField tpass;
    static final Control[] u = new Control[8];
    static private int view = 0;
    static final Smenu vnpls = new Smenu(5);
    static final Smenu vtyp = new Smenu(6);
    static final Smenu warb = new Smenu(102);
    static final Smenu wgame = new Smenu(4);
    static private int xm = 0;
    static private int ym = 0;

    /**
     * Used for internal time measurement (usage is analogous to System.currentTimeMilis())
     */
    static private Date date;
    static private int clicknowtime;
    /**
     * ContO array for cars
     */
    static private ContO[] carContos;
    /**
     * ContO array for track pieces
     */
    static private ContO[] contos;
    /**
     * ContO array for the current stage's contents themselves
     */
    static private ContO[] stageContos;
    static Mad[] mads;
    static private Login login = null;
    static private Lobby lobby = null;
    //private Globe globe = null;
    static private final UDPMistro udpmistro = new UDPMistro();
    static private boolean bool = false;
    static private int recordtime;
    static private int finishrecording;
    static private int wastedpoint;
    static private boolean flashingscreen;

    /* Also for time measurement: */
    static private long l1;
    static private float f2;
    static private boolean bool3;
    static private int i4;
    static private int i5;
    static private float f;

    /**
     * List of car .rad files.
     */
    private final static String[] carRads = {
            "2000tornados", "formula7", "canyenaro", "lescrab", "nimi", "maxrevenge", "leadoxide", "koolkat", "drifter",
            "policecops", "mustang", "king", "audir8", "masheen", "radicalone", "drmonster"
    };
    /**
     * List of track part .rad files.
     */
    public final static String[] stageRads = {
            "road", "froad", "twister2", "twister1", "turn", "offroad", "bumproad", "offturn", "nroad", "nturn",
            "roblend", "noblend", "rnblend", "roadend", "offroadend", "hpground", "ramp30", "cramp35", "dramp15",
            "dhilo15", "slide10", "takeoff", "sramp22", "offbump", "offramp", "sofframp", "halfpipe", "spikes", "rail",
            "thewall", "checkpoint", "fixpoint", "offcheckpoint", "sideoff", "bsideoff", "uprise", "riseroad", "sroad",
            "soffroad", "tside", "launchpad", "thenet", "speedramp", "offhill", "slider", "uphill", "roll1", "roll2",
            "roll3", "roll4", "roll5", "roll6", "opile1", "opile2", "aircheckpoint", "tree1", "tree2", "tree3", "tree4",
            "tree5", "tree6", "tree7", "tree8", "cac1", "cac2", "cac3", "8sroad", "8soffroad"
    };

    /**
     * Triple-buffer for motion effects
     */
    static private BufferedImage tribuffer;
    /**
     * {@link #tribuffer}'s Graphics2D object
     */
    static private Graphics2D tg;

    private final static GraphicsConfiguration gfxConfig = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();

    static private boolean gameLoaded = false;

    private static GameSparker gsPanel;

    /**
     * Loads models.zip
     */
    static private void loadbase() {
        if (carRads.length < xtGraphics.nCars)
            throw new RuntimeException("too many cars and not enough rad files!");
        int totalSize = 0;
        xtGraphics.dnload += 6;
        try {
            FileUtil.loadFiles("data/cars", carRads, prep -> {
                return new File(prep.parent, prep.file + ".rad").toPath();
            }, (is, id) -> {
                carContos[id] = new ContO(is);
                if (!carContos[id].shadow) {
                    throw new RuntimeException("car " + CarDefine.names[id] + " does not have a shadow");
                }
            });

            FileUtil.loadFiles("data/stageparts", stageRads, prep -> {
                return new File(prep.parent, prep.file + ".rad").toPath();
            }, (is, id) -> {
                contos[id] = new ContO(is);
            });
            
            xtGraphics.dnload++;
            
            for (int i = 0; i < stageRads.length; i++) {
                if (contos[i] == null) {
                    throw new Error("No valid ContO (Stage Part) has been assigned to ID " + i + " (" + stageRads[i] + ")");
                }
            }
            for (int i = 0; i < carRads.length; i++) {
                if (carContos[i] == null) {
                    throw new Error("No valid ContO (Vehicle) has been assigned to ID " + i + " (" + stageRads[i] + ")");
                }
            }

        } catch (final Exception exception) {
            if (exception instanceof RuntimeException)
                throw new RuntimeException("Intentional error loading models.zip", exception);
            else {
                System.err.println("Error Reading Models: " + exception);
                exception.printStackTrace();
                new Thread(() -> {
                    new Thread(() -> { // if no response in 20s, force terminate
                        try {
                            Thread.sleep(20_000L);
                        } catch (InterruptedException ignored) {
                        }
                        System.exit(1);
                    });
                    JOptionPane.showMessageDialog(null, "Fatal error loading models.zip:\n" + exception + "\n(Stack trace in console)", "Fatal error", JOptionPane.ERROR_MESSAGE);
                    System.exit(1);
                }).start();
            }
        }
        System.gc();
        if (mload != -1 && totalSize != 615671) {
            mload = 2;
        }
    }

    private static BufferedImage createOffImage() {
        try {
            BufferedImage _offImage = gfxConfig.createCompatibleImage(800, 450, Transparency.OPAQUE);

            if (_offImage == null)
                throw new AssertionError("this should never happen");
            return _offImage;
        } catch (final Throwable e) { //fallback image creation
            e.printStackTrace();

            return new BufferedImage(800, 450, BufferedImage.TYPE_INT_RGB);
        }
    }

    /**
     * Loads stage currently set by checkpoints.stage onto stageContos
     */
    static private void loadstage() {
        if (xtGraphics.testdrive == 2 || xtGraphics.testdrive == 4) {
            xtGraphics.nplayers = 1;
        }
        xtGraphics.nplayers = 7;
        /*if (xtgraphics.gmode == 1) {
        	xtgraphics.nplayers = 5;
        	xtgraphics.xstart[4] = 0;
        	xtgraphics.zstart[4] = 760;
        }*/
        Trackers.nt = 0;
        nob = xtGraphics.nplayers;
        notb = 0;
        CheckPoints.n = 0;
        CheckPoints.nsp = 0;
        CheckPoints.fn = 0;
        CheckPoints.trackname = "";
        CheckPoints.haltall = false;
        CheckPoints.wasted = 0;
        CheckPoints.catchfin = 0;
        Medium.resdown = 0;
        Medium.rescnt = 5;
        Medium.lightson = false;
        Medium.noelec = 0;
        Medium.ground = 250;
        Medium.trk = 0;
        view = 0;
        int i = 0;
        int k = 100;
        int l = 0;
        int m = 100;
        xtGraphics.newparts = false;
        String string = "";
        try {
            BufferedReader stageDataReader;
            if (xtGraphics.multion == 0 && CheckPoints.stage != -2) {
                String customStagePath = "stages/" + CheckPoints.stage + "";
                if (CheckPoints.stage == -1) {
                    customStagePath = "mystages/" + CheckPoints.name + "";
                }
                final File customStageFile = new File("" + Madness.fpath + "" + customStagePath + ".txt");
                stageDataReader = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(customStageFile))));
            } else if (CheckPoints.stage > 0) {
                final URL url = new URL("http://multiplayer.needformadness.com/stages/" + CheckPoints.stage + ".txt");
                stageDataReader = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream())));
            } else {
                String stagelink = "http://multiplayer.needformadness.com/tracks/" + CheckPoints.name + ".radq";
                stagelink = stagelink.replace(' ', '_');
                final URL url = new URL(stagelink);
                final int connectionlength = url.openConnection().getContentLength();
                final DataInputStream datainputstream = new DataInputStream(url.openStream());
                final byte[] is = new byte[connectionlength];
                datainputstream.readFully(is);
                ZipInputStream zipinputstream;
                if (is[0] == 80 && is[1] == 75 && is[2] == 3) {
                    zipinputstream = new ZipInputStream(new ByteArrayInputStream(is));
                } else {
                    final byte[] is2 = new byte[connectionlength - 40];
                    for (int n = 0; n < connectionlength - 40; n++) {
                        int o = 20;
                        if (n >= 500) {
                            o = 40;
                        }
                        is2[n] = is[n + o];
                    }
                    zipinputstream = new ZipInputStream(new ByteArrayInputStream(is2));
                }
                final ZipEntry zipentry = zipinputstream.getNextEntry();
                int n = Integer.parseInt(zipentry.getName());
                final byte[] is2 = new byte[n];
                int o = 0;
                int p;
                for (; n > 0; n -= p) {
                    p = zipinputstream.read(is2, o, n);
                    o += p;
                }
                zipinputstream.close();
                datainputstream.close();
                stageDataReader = new BufferedReader(new InputStreamReader(new DataInputStream(new ByteArrayInputStream(is2))));
            }
            String line;
            while ((line = stageDataReader.readLine()) != null) {
                string = "" + line.trim();
                if (string.startsWith("snap")) {
                    Medium.setsnap(getint("snap", string, 0), getint("snap", string, 1), getint("snap", string, 2));
                }
                if (string.startsWith("sky")) {
                    Medium.setsky(getint("sky", string, 0), getint("sky", string, 1), getint("sky", string, 2));
                    xtGraphics.snap(CheckPoints.stage);
                }
                if (string.startsWith("ground")) {
                    Medium.setgrnd(getint("ground", string, 0), getint("ground", string, 1), getint("ground", string, 2));
                }
                if (string.startsWith("polys")) {
                    Medium.setpolys(getint("polys", string, 0), getint("polys", string, 1), getint("polys", string, 2));
                }
                if (string.startsWith("fog")) {
                    Medium.setfade(getint("fog", string, 0), getint("fog", string, 1), getint("fog", string, 2));
                }
                if (string.startsWith("texture")) {
                    Medium.setexture(getint("texture", string, 0), getint("texture", string, 1), getint("texture", string, 2), getint("texture", string, 3));
                }
                if (string.startsWith("clouds")) {
                    Medium.setcloads(getint("clouds", string, 0), getint("clouds", string, 1), getint("clouds", string, 2), getint("clouds", string, 3), getint("clouds", string, 4));
                }
                if (string.startsWith("density")) {
                    Medium.fogd = (getint("density", string, 0) + 1) * 2 - 1;
                    if (Medium.fogd < 1) {
                        Medium.fogd = 1;
                    }
                    if (Medium.fogd > 30) {
                        Medium.fogd = 30;
                    }
                }
                if (string.startsWith("fadefrom")) {
                    Medium.fadfrom(getint("fadefrom", string, 0));
                }
                if (string.startsWith("lightson")) {
                    Medium.lightson = true;
                }
                if (string.startsWith("mountains")) {
                    Medium.mgen = getint("mountains", string, 0);
                }
                if (string.startsWith("set")) {
                    int setindex = getint("set", string, 0);
                    if (xtGraphics.nplayers == 8) {
                        if (setindex == 47) {
                            setindex = 76;
                        }
                        if (setindex == 48) {
                            setindex = 77;
                        }
                    }
                    boolean bool = true;
                    if (setindex >= 65 && setindex <= 75 && CheckPoints.notb) {
                        bool = false;
                    }
                    if (bool) {
                        if (setindex == 49 || setindex == 64 || setindex >= 56 && setindex <= 61) {
                            xtGraphics.newparts = true;
                        }
                        if ((CheckPoints.stage < 0 || CheckPoints.stage >= 28) && setindex >= 10 && setindex <= 25) {
                            Medium.loadnew = true;
                        }
                        setindex -= 10;
                        System.out.println("Setindex is: " + setindex);
                        stageContos[nob] = new ContO(contos[setindex], getint("set", string, 1), Medium.ground - contos[setindex].grat, getint("set", string, 2), getint("set", string, 3));
                        if (string.contains(")p")) {
                            CheckPoints.x[CheckPoints.n] = getint("set", string, 1);
                            CheckPoints.z[CheckPoints.n] = getint("set", string, 2);
                            CheckPoints.y[CheckPoints.n] = 0;
                            CheckPoints.typ[CheckPoints.n] = 0;
                            if (string.contains(")pt")) {
                                CheckPoints.typ[CheckPoints.n] = -1;
                            }
                            if (string.contains(")pr")) {
                                CheckPoints.typ[CheckPoints.n] = -2;
                            }
                            if (string.contains(")po")) {
                                CheckPoints.typ[CheckPoints.n] = -3;
                            }
                            if (string.contains(")ph")) {
                                CheckPoints.typ[CheckPoints.n] = -4;
                            }
                            if (string.contains("out")) {
                                System.out.println("out: " + CheckPoints.n);
                            }
                            CheckPoints.n++;
                            notb = nob + 1;
                        }
                        nob++;
                        if (Medium.loadnew) {
                            Medium.loadnew = false;
                        }
                    }
                }
                if (string.startsWith("chk")) {
                    int chkindex = getint("chk", string, 0);
                    chkindex -= 10;
                    int chkheight = Medium.ground - contos[chkindex].grat;
                    if (chkindex == 110) {
                        chkheight = getint("chk", string, 4);
                    }
                    stageContos[nob] = new ContO(contos[chkindex], getint("chk", string, 1), chkheight, getint("chk", string, 2), getint("chk", string, 3));
                    CheckPoints.x[CheckPoints.n] = getint("chk", string, 1);
                    CheckPoints.z[CheckPoints.n] = getint("chk", string, 2);
                    CheckPoints.y[CheckPoints.n] = chkheight;
                    if (getint("chk", string, 3) == 0) {
                        CheckPoints.typ[CheckPoints.n] = 1;
                    } else {
                        CheckPoints.typ[CheckPoints.n] = 2;
                    }
                    CheckPoints.pcs = CheckPoints.n;
                    CheckPoints.n++;
                    stageContos[nob].checkpoint = CheckPoints.nsp + 1;
                    CheckPoints.nsp++;
                    nob++;
                    notb = nob;
                }
                if (CheckPoints.nfix != 5 && string.startsWith("fix")) {
                    int fixindex = getint("fix", string, 0);
                    fixindex -= 10;
                    stageContos[nob] = new ContO(contos[fixindex], getint("fix", string, 1), getint("fix", string, 3), getint("fix", string, 2), getint("fix", string, 4));
                    CheckPoints.fx[CheckPoints.fn] = getint("fix", string, 1);
                    CheckPoints.fz[CheckPoints.fn] = getint("fix", string, 2);
                    CheckPoints.fy[CheckPoints.fn] = getint("fix", string, 3);
                    stageContos[nob].elec = true;
                    if (getint("fix", string, 4) != 0) {
                        CheckPoints.roted[CheckPoints.fn] = true;
                        stageContos[nob].roted = true;
                    } else {
                        CheckPoints.roted[CheckPoints.fn] = false;
                    }
                    CheckPoints.special[CheckPoints.fn] = string.indexOf(")s") != -1;
                    CheckPoints.fn++;
                    nob++;
                    notb = nob;
                }
                if (!CheckPoints.notb && string.startsWith("pile")) {
                    stageContos[nob] = new ContO(getint("pile", string, 0), getint("pile", string, 1), getint("pile", string, 2), getint("pile", string, 3), getint("pile", string, 4), Medium.ground);
                    nob++;
                }
                if (xtGraphics.multion == 0 && string.startsWith("nlaps")) {
                    CheckPoints.nlaps = getint("nlaps", string, 0);
                }
                //if (checkpoints.nlaps < 1)
                //	checkpoints.nlaps = 1;
                //if (checkpoints.nlaps > 15)
                //	checkpoints.nlaps = 15;
                if (CheckPoints.stage > 0 && string.startsWith("name")) {
                    CheckPoints.name = getstring("name", string, 0).replace('|', ',');
                }
                if (string.startsWith("stagemaker")) {
                    CheckPoints.maker = getstring("stagemaker", string, 0);
                }
                if (string.startsWith("publish")) {
                    CheckPoints.pubt = getint("publish", string, 0);
                }
                if (string.startsWith("soundtrack")) {
                    CheckPoints.trackname = getstring("soundtrack", string, 0);
                    CheckPoints.trackvol = getint("soundtrack", string, 1);
                    if (CheckPoints.trackvol < 50) {
                        CheckPoints.trackvol = 50;
                    }
                    if (CheckPoints.trackvol > 300) {
                        CheckPoints.trackvol = 300;
                    }
                    xtGraphics.sndsize[32] = getint("soundtrack", string, 2);
                }
                if (string.startsWith("maxr")) {
                    final int n = getint("maxr", string, 0);
                    final int o = getint("maxr", string, 1);
                    i = o;
                    final int p = getint("maxr", string, 2);
                    for (int q = 0; q < n; q++) {
                        stageContos[nob] = new ContO(contos[29], o, Medium.ground - contos[29].grat, //29 may need to be 85 or xtgraphics.nCars - 16
                        q * 4800 + p, 0);
                        nob++;
                    }
                    Trackers.y[Trackers.nt] = -5000;
                    Trackers.rady[Trackers.nt] = 7100;
                    Trackers.x[Trackers.nt] = o + 500;
                    Trackers.radx[Trackers.nt] = 600;
                    Trackers.z[Trackers.nt] = n * 4800 / 2 + p - 2400;
                    Trackers.radz[Trackers.nt] = n * 4800 / 2;
                    Trackers.xy[Trackers.nt] = 90;
                    Trackers.zy[Trackers.nt] = 0;
                    Trackers.dam[Trackers.nt] = 167;
                    Trackers.decor[Trackers.nt] = false;
                    Trackers.skd[Trackers.nt] = 0;
                    Trackers.nt++;
                }
                if (string.startsWith("maxl")) {
                    final int n = getint("maxl", string, 0);
                    final int o = getint("maxl", string, 1);
                    k = o;
                    final int p = getint("maxl", string, 2);
                    for (int q = 0; q < n; q++) {
                        stageContos[nob] = new ContO(contos[29], o, Medium.ground - contos[29].grat, q * 4800 + p, 180);
                        nob++;
                    }
                    Trackers.y[Trackers.nt] = -5000;
                    Trackers.rady[Trackers.nt] = 7100;
                    Trackers.x[Trackers.nt] = o - 500;
                    Trackers.radx[Trackers.nt] = 600;
                    Trackers.z[Trackers.nt] = n * 4800 / 2 + p - 2400;
                    Trackers.radz[Trackers.nt] = n * 4800 / 2;
                    Trackers.xy[Trackers.nt] = -90;
                    Trackers.zy[Trackers.nt] = 0;
                    Trackers.dam[Trackers.nt] = 167;
                    Trackers.decor[Trackers.nt] = false;
                    Trackers.skd[Trackers.nt] = 0;
                    Trackers.nt++;
                }
                if (string.startsWith("maxt")) {
                    final int n = getint("maxt", string, 0);
                    final int o = getint("maxt", string, 1);
                    l = o;
                    final int p = getint("maxt", string, 2);
                    for (int q = 0; q < n; q++) {
                        stageContos[nob] = new ContO(contos[29], q * 4800 + p, Medium.ground - contos[29].grat, o, 90);
                        nob++;
                    }
                    Trackers.y[Trackers.nt] = -5000;
                    Trackers.rady[Trackers.nt] = 7100;
                    Trackers.z[Trackers.nt] = o + 500;
                    Trackers.radz[Trackers.nt] = 600;
                    Trackers.x[Trackers.nt] = n * 4800 / 2 + p - 2400;
                    Trackers.radx[Trackers.nt] = n * 4800 / 2;
                    Trackers.zy[Trackers.nt] = 90;
                    Trackers.xy[Trackers.nt] = 0;
                    Trackers.dam[Trackers.nt] = 167;
                    Trackers.decor[Trackers.nt] = false;
                    Trackers.skd[Trackers.nt] = 0;
                    Trackers.nt++;
                }
                if (string.startsWith("maxb")) {
                    final int n = getint("maxb", string, 0);
                    final int o = getint("maxb", string, 1);
                    m = o;
                    final int p = getint("maxb", string, 2);
                    for (int q = 0; q < n; q++) {
                        stageContos[nob] = new ContO(contos[29], q * 4800 + p, Medium.ground - contos[29].grat, o, -90);
                        nob++;
                    }
                    Trackers.y[Trackers.nt] = -5000;
                    Trackers.rady[Trackers.nt] = 7100;
                    Trackers.z[Trackers.nt] = o - 500;
                    Trackers.radz[Trackers.nt] = 600;
                    Trackers.x[Trackers.nt] = n * 4800 / 2 + p - 2400;
                    Trackers.radx[Trackers.nt] = n * 4800 / 2;
                    Trackers.zy[Trackers.nt] = -90;
                    Trackers.xy[Trackers.nt] = 0;
                    Trackers.dam[Trackers.nt] = 167;
                    Trackers.decor[Trackers.nt] = false;
                    Trackers.skd[Trackers.nt] = 0;
                    Trackers.nt++;
                }
            }
            stageDataReader.close();
            Medium.newpolys(k, i - k, m, l - m,  notb);
            Medium.newclouds(k, i, m, l);
            Medium.newmountains(k, i, m, l);
            Medium.newstars();
            Trackers.devidetrackers(k, i - k, m, l - m);
        } catch (final Exception exception) {
            System.out.println("Error in stage " + CheckPoints.stage);
            System.out.println("At line: " + string);
            CheckPoints.stage = -3;
            exception.printStackTrace();
        }
        if (CheckPoints.nsp < 2) {
            CheckPoints.stage = -3;
        }
        if (Medium.nrw * Medium.ncl >= 16000) {
            CheckPoints.stage = -3;
        }
        if (CheckPoints.stage != -3) {
            CheckPoints.top20 = Math.abs(CheckPoints.top20);
            if (CheckPoints.stage == 26) {
                Medium.lightn = 0;
            } else {
                Medium.lightn = -1;
            }
            Medium.nochekflk = !(CheckPoints.stage == 1 || CheckPoints.stage == 11);
            for (int n = 0; n < xtGraphics.nplayers; n++) {
                u[n].reset(xtGraphics.sc[n]);
                mads[n].setStat(new Stat(xtGraphics.sc[n]));
            }
            xtGraphics.resetstat(CheckPoints.stage);
            CheckPoints.calprox();

            for (int j = 0; j < xtGraphics.nplayers; j++) {

                if (xtGraphics.fase == 22) {
                    xtGraphics.colorCar(carContos[xtGraphics.sc[j]], j);
                }
                stageContos[j] = new ContO(carContos[xtGraphics.sc[j]], xtGraphics.xstart[j], 250 - carContos[xtGraphics.sc[j]].grat, xtGraphics.zstart[j], 0);
                mads[j].reseto(xtGraphics.sc[j], stageContos[j]);
            }
            if (xtGraphics.fase == 2 || xtGraphics.fase == -22) {
                Medium.trx = (k + i) / 2;
                Medium.trz = (l + m) / 2;
                Medium.ptr = 0;
                Medium.ptcnt = -10;
                Medium.hit = 45000;
                Medium.fallen = 0;
                Medium.nrnd = 0;
                Medium.trk = 1;
                Medium.ih = 25;
                Medium.iw = 65;
                Medium.h = 425;
                Medium.w = 735;
                xtGraphics.fase = 1;
                mouses = 0;
            }
            if (xtGraphics.fase == 22) {
                Medium.crs = false;
                xtGraphics.fase = 5;
            }
            if (CheckPoints.stage > 0) {
                xtGraphics.asay = "Stage " + CheckPoints.stage + ":  " + CheckPoints.name + " ";
            } else {
                xtGraphics.asay = "Custom Stage:  " + CheckPoints.name + " ";
            }
            Record.reset(stageContos);
        } else if (xtGraphics.fase == 2) {
            xtGraphics.fase = 1;
        }
        System.gc();
    }

    static private boolean loadstagePreview(final int i, final String string, final ContO[] contos, final ContO[] contos147) {
        boolean bool = true;
        if (i < 100) {
            CheckPoints.stage = i;
            if (CheckPoints.stage < 0) {
                CheckPoints.name = string;
            }
        } else {
            CheckPoints.stage = -2;
            if (sgame.getSelectedIndex() == 3 || sgame.getSelectedIndex() == 4) {
                CheckPoints.name = mstgs.getSelectedItem();
            } else {
                final int i148 = mstgs.getSelectedItem().indexOf(' ') + 1;
                if (i148 > 0) {
                    CheckPoints.name = mstgs.getSelectedItem().substring(i148);
                }
            }
        }
        nob = 0;
        CheckPoints.n = 0;
        CheckPoints.nsp = 0;
        CheckPoints.fn = 0;
        CheckPoints.haltall = false;
        CheckPoints.wasted = 0;
        CheckPoints.catchfin = 0;
        Medium.ground = 250;
        view = 0;
        Medium.trx = 0L;
        Medium.trz = 0L;
        int i149 = 0;
        int i150 = 100;
        int i151 = 0;
        int i152 = 100;
        String string153 = "";
        try {
            BufferedReader datainputstream;
            if (CheckPoints.stage > 0) {
                final URL url = new URL("http://multiplayer.needformadness.com/stages/" + CheckPoints.stage + ".txt");
                datainputstream = new BufferedReader(new InputStreamReader(new DataInputStream(url.openStream())));
            } else {
                String string154 = "http://multiplayer.needformadness.com/tracks/" + CheckPoints.name + ".radq";
                string154 = string154.replace(' ', '_');
                final URL url = new URL(string154);
                final int i155 = url.openConnection().getContentLength();
                final DataInputStream datainputstream156 = new DataInputStream(url.openStream());
                final byte[] is = new byte[i155];
                datainputstream156.readFully(is);
                ZipInputStream zipinputstream;
                if (is[0] == 80 && is[1] == 75 && is[2] == 3) {
                    zipinputstream = new ZipInputStream(new ByteArrayInputStream(is));
                } else {
                    final byte[] is157 = new byte[i155 - 40];
                    for (int i158 = 0; i158 < i155 - 40; i158++) {
                        int i159 = 20;
                        if (i158 >= 500) {
                            i159 = 40;
                        }
                        is157[i158] = is[i158 + i159];
                    }
                    zipinputstream = new ZipInputStream(new ByteArrayInputStream(is157));
                }
                final ZipEntry zipentry = zipinputstream.getNextEntry();
                int i160 = Integer.parseInt(zipentry.getName());
                final byte[] is161 = new byte[i160];
                int i162 = 0;
                int i163;
                for (; i160 > 0; i160 -= i163) {
                    i163 = zipinputstream.read(is161, i162, i160);
                    i162 += i163;
                }
                zipinputstream.close();
                datainputstream156.close();
                datainputstream = new BufferedReader(new InputStreamReader(new DataInputStream(new ByteArrayInputStream(is161))));
            }
            String string164;
            while ((string164 = datainputstream.readLine()) != null) {
                string153 = "" + string164.trim();
                if (string153.startsWith("snap")) {
                    Medium.setsnap(getint("snap", string153, 0), getint("snap", string153, 1), getint("snap", string153, 2));
                }
                if (string153.startsWith("sky")) {
                    Medium.setsky(getint("sky", string153, 0), getint("sky", string153, 1), getint("sky", string153, 2));
                }
                if (string153.startsWith("ground")) {
                    Medium.setgrnd(getint("ground", string153, 0), getint("ground", string153, 1), getint("ground", string153, 2));
                }
                if (string153.startsWith("polys")) {
                    Medium.setpolys(getint("polys", string153, 0), getint("polys", string153, 1), getint("polys", string153, 2));
                }
                if (string153.startsWith("fog")) {
                    Medium.setfade(getint("fog", string153, 0), getint("fog", string153, 1), getint("fog", string153, 2));
                }
                if (string153.startsWith("texture")) {
                    Medium.setexture(getint("texture", string153, 0), getint("texture", string153, 1), getint("texture", string153, 2), getint("texture", string153, 3));
                }
                if (string153.startsWith("clouds")) {
                    Medium.setcloads(getint("clouds", string153, 0), getint("clouds", string153, 1), getint("clouds", string153, 2), getint("clouds", string153, 3), getint("clouds", string153, 4));
                }
                if (string153.startsWith("density")) {
                    Medium.fogd = (getint("density", string153, 0) + 1) * 2 - 1;
                    if (Medium.fogd < 1) {
                        Medium.fogd = 1;
                    }
                    if (Medium.fogd > 30) {
                        Medium.fogd = 30;
                    }
                }
                if (string153.startsWith("fadefrom")) {
                    Medium.fadfrom(getint("fadefrom", string153, 0));
                }
                if (string153.startsWith("lightson")) {
                    Medium.lightson = true;
                }
                if (string153.startsWith("mountains")) {
                    Medium.mgen = getint("mountains", string153, 0);
                }
                if (string153.startsWith("soundtrack")) {
                    CheckPoints.trackname = getstring("soundtrack", string153, 0);
                    CheckPoints.trackvol = getint("soundtrack", string153, 1);
                    if (CheckPoints.trackvol < 50) {
                        CheckPoints.trackvol = 50;
                    }
                    if (CheckPoints.trackvol > 300) {
                        CheckPoints.trackvol = 300;
                    }
                }
                if (string153.startsWith("set")) {
                    int i165 = getint("set", string153, 0);
                    i165 -= 10;
                    contos[nob] = new ContO(contos147[i165], getint("set", string153, 1), Medium.ground - contos147[i165].grat, getint("set", string153, 2), getint("set", string153, 3));
                    Trackers.nt = 0;
                    if (string153.contains(")p")) {
                        CheckPoints.x[CheckPoints.n] = getint("chk", string153, 1);
                        CheckPoints.z[CheckPoints.n] = getint("chk", string153, 2);
                        CheckPoints.y[CheckPoints.n] = 0;
                        CheckPoints.typ[CheckPoints.n] = 0;
                        if (string153.contains(")pt")) {
                            CheckPoints.typ[CheckPoints.n] = -1;
                        }
                        if (string153.contains(")pr")) {
                            CheckPoints.typ[CheckPoints.n] = -2;
                        }
                        if (string153.contains(")po")) {
                            CheckPoints.typ[CheckPoints.n] = -3;
                        }
                        if (string153.contains(")ph")) {
                            CheckPoints.typ[CheckPoints.n] = -4;
                        }
                        if (string153.contains("out")) {
                            System.out.println("out: " + CheckPoints.n);
                        }
                        CheckPoints.n++;
                    }
                    nob++;
                }
                if (string153.startsWith("chk")) {
                    int i166 = getint("chk", string153, 0);
                    i166 -= 10;
                    int i167 = Medium.ground - contos147[i166].grat;
                    if (i166 == 110) {
                        i167 = getint("chk", string153, 4);
                    }
                    contos[nob] = new ContO(contos147[i166], getint("chk", string153, 1), i167, getint("chk", string153, 2), getint("chk", string153, 3));
                    CheckPoints.x[CheckPoints.n] = getint("chk", string153, 1);
                    CheckPoints.z[CheckPoints.n] = getint("chk", string153, 2);
                    CheckPoints.y[CheckPoints.n] = i167;
                    if (getint("chk", string153, 3) == 0) {
                        CheckPoints.typ[CheckPoints.n] = 1;
                    } else {
                        CheckPoints.typ[CheckPoints.n] = 2;
                    }
                    CheckPoints.pcs = CheckPoints.n;
                    CheckPoints.n++;
                    contos[nob].checkpoint = CheckPoints.nsp + 1;
                    CheckPoints.nsp++;
                    nob++;
                }
                if (string153.startsWith("fix")) {
                    int i168 = getint("fix", string153, 0);
                    i168 -= 10;
                    contos[nob] = new ContO(contos147[i168], getint("fix", string153, 1), getint("fix", string153, 3), getint("fix", string153, 2), getint("fix", string153, 4));
                    CheckPoints.fx[CheckPoints.fn] = getint("fix", string153, 1);
                    CheckPoints.fz[CheckPoints.fn] = getint("fix", string153, 2);
                    CheckPoints.fy[CheckPoints.fn] = getint("fix", string153, 3);
                    contos[nob].elec = true;
                    if (getint("fix", string153, 4) != 0) {
                        CheckPoints.roted[CheckPoints.fn] = true;
                        contos[nob].roted = true;
                    } else {
                        CheckPoints.roted[CheckPoints.fn] = false;
                    }
                    CheckPoints.special[CheckPoints.fn] = string153.contains(")s");
                    CheckPoints.fn++;
                    nob++;
                }
                if (string153.startsWith("nlaps")) {
                    CheckPoints.nlaps = getint("nlaps", string153, 0);
                    if (CheckPoints.nlaps < 1) {
                        CheckPoints.nlaps = 1;
                    }
                    if (CheckPoints.nlaps > 15) {
                        CheckPoints.nlaps = 15;
                    }
                }
                if (CheckPoints.stage > 0 && string153.startsWith("name")) {
                    CheckPoints.name = getstring("name", string153, 0).replace('|', ',');
                }
                if (string153.startsWith("stagemaker")) {
                    CheckPoints.maker = getstring("stagemaker", string153, 0);
                }
                if (string153.startsWith("publish")) {
                    CheckPoints.pubt = getint("publish", string153, 0);
                }
                if (string153.startsWith("maxr")) {
                    i149 = getint("maxr", string153, 1);
                }
                //i149 = i169;
                if (string153.startsWith("maxl")) {
                    i150 = getint("maxl", string153, 1);
                }
                //i150 = i170;
                if (string153.startsWith("maxt")) {
                    i151 = getint("maxt", string153, 1);
                }
                //i151 = i171;
                if (string153.startsWith("maxb")) {
                    i152 = getint("maxb", string153, 1);
                    //i152 = i172;
                }
            }
            datainputstream.close();
            Medium.newpolys(i150, i149 - i150, i152, i151 - i152, notb);
            Medium.newclouds(i150, i149, i152, i151);
            Medium.newmountains(i150, i149, i152, i151);
            Medium.newstars();
        } catch (final Exception exception) {
            bool = false;
            System.out.println("Error in stage " + CheckPoints.stage);
            System.out.println("" + exception);
            System.out.println("At line: " + string153);
        }
        if (CheckPoints.nsp < 2) {
            bool = false;
        }
        if (Medium.nrw * Medium.ncl >= 16000) {
            bool = false;
        }
        Medium.trx = (i150 + i149) / 2;
        Medium.trz = (i151 + i152) / 2;
        System.gc();
        return bool;
    }

    /**
     * handles clicking the 'Radical Play' link
     */
    static private void catchlink() {
        if (!lostfcs)
            if (xm > 65 && xm < 735 && ym > 135 && ym < 194 || xm > 275 && xm < 525 && ym > 265 && ym < 284) {
                gsPanel.setCursor(new Cursor(12));
                if (mouses == 2) {
                    openurl("http://www.radicalplay.com/");
                }
            } else {
                gsPanel.setCursor(new Cursor(0));
            }
    }

    static private void checkmemory() {
        if (applejava || Runtime.getRuntime().freeMemory() / 1048576L < 50L) {
            xtGraphics.badmac = true;
        }
    }

    /**
     * I forgot what this does lmao
     *
     * @param graphics2d graphics2d object
     * @param x X position
     * @param y Y position
     */
    static private void cropit(final Graphics2D graphics2d, final int x, final int y) {
        if (x != 0 || y != 0) {
            graphics2d.setComposite(AlphaComposite.getInstance(3, 1.0F));
            graphics2d.setColor(new Color(0, 0, 0));
        }
        if (x != 0)
            if (x < 0) {
                graphics2d.fillRect(apx + x, apy - (int) (25.0F * apmult), Math.abs(x), (int) (500.0F * apmult));
            } else {
                graphics2d.fillRect(apx + (int) (800.0F * apmult), apy - (int) (25.0F * apmult), x, (int) (500.0F * apmult));
            }
        if (y != 0)
            if (y < 0) {
                graphics2d.fillRect(apx - (int) (25.0F * apmult), apy + y, (int) (850.0F * apmult), Math.abs(y));
            } else {
                graphics2d.fillRect(apx - (int) (25.0F * apmult), apy + (int) (450.0F * apmult), (int) (850.0F * apmult), y);
            }
    }

    /**
     * Draws SMenus
     */
    static void drawms() {
        openm = gmode.draw(rd, xm, ym, moused, 450, true);
        if (swait.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (slaps.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (snpls.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (snbts.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (scars.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (sgame.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        //if (snfm1.draw(rd, xm, ym, moused, 450, false))
        //  openm = true;
        //if (snfm2.draw(rd, xm, ym, moused, 450, false))
        //  openm = true;
        if (snfmm.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (mstgs.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (mcars.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (pgame.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (vnpls.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (vtyp.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (warb.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (wgame.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (rooms.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (sendtyp.draw(rd, xm, ym, moused, 450, true)) {
            openm = true;
        }
        if (senditem.draw(rd, xm, ym, moused, 450, true)) {
            openm = true;
        }
        if (datat.draw(rd, xm, ym, moused, 450, true)) {
            openm = true;
        }
        if (clanlev.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (clcars.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (ilaps.draw(rd, xm, ym, moused, 450, true)) {
            openm = true;
        }
        if (icars.draw(rd, xm, ym, moused, 450, true)) {
            openm = true;
        }
        if (proitem.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (sfix.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
        if (sclass.draw(rd, xm, ym, moused, 450, false)) {
            openm = true;
        }
    }

    static void editlink(final String accountid, final boolean isLogged) {
        String logged = "";
        if (isLogged) {
            logged = "?display=upgrade";
        }
        openurl("http://multiplayer.needformadness.com/edit.pl" + logged + "#" + accountid + "");
    }

    static private int getint(final String string, final String string4, final int i) {
        int j = 0;
        String string2 = "";
        for (int k = string.length() + 1; k < string4.length(); k++) {
            final String string3 = "" + string4.charAt(k);
            if (string3.equals(",") || string3.equals(")")) {
                j++;
                k++;
            }
            if (j == i) {
                string2 = string2 + string4.charAt(k);
            }
        }
        return Integer.parseInt(string2);
    }

    /**
     * Gets string in format: {@code <string2>} string(A,B,1231,{@code i},C,1.5) {@code </string2>}
     *
     * @param string the tag
     * @param string2 the whole line
     * @param i the position of the string
     * @return tthe string at the position
     */
    static private String getstring(final String string, final String string2, final int i) {
        int j = 0;
        String string3 = "";
        for (int k = string.length() + 1; k < string2.length(); k++) {
            final String string4 = "" + string2.charAt(k);
            if (string4.equals(",") || string4.equals(")")) {
                j++;
                k++;
            }
            if (j == i) {
                string3 = string3 + string2.charAt(k);
            }
        }
        return string3;
    }

    /**
     * Hides SMenus
     */
    static private void hidefields() {
        ilaps.setVisible(false);
        icars.setVisible(false);
        proitem.setVisible(false);
        clcars.setVisible(false);
        clanlev.setVisible(false);
        mmsg.setVisible(false);
        datat.setVisible(false);
        senditem.setVisible(false);
        sendtyp.setVisible(false);
        rooms.setVisible(false);
        mcars.setVisible(false);
        mstgs.setVisible(false);
        gmode.setVisible(false);
        sclass.setVisible(false);
        scars.setVisible(false);
        sfix.setVisible(false);
        mycar.setVisible(false);
        notp.setVisible(false);
        keplo.setVisible(false);
        tnick.setVisible(false);
        tpass.setVisible(false);
        temail.setVisible(false);
        cmsg.setVisible(false);
        sgame.setVisible(false);
        wgame.setVisible(false);
        pgame.setVisible(false);
        vnpls.setVisible(false);
        vtyp.setVisible(false);
        warb.setVisible(false);
        slaps.setVisible(false);
        //snfm1.setVisible(false);
        snfmm.setVisible(false);
        //snfm2.setVisible(false);
        snpls.setVisible(false);
        snbts.setVisible(false);
        swait.setVisible(false);
    }

    //@Override
    static private void initFields() {
        tnick = new TextField("Nickbname");
        tnick.setFont(new Font("Arial", 1, 13));
        tpass = new TextField("");
        tpass.setFont(new Font("Arial", 1, 13));
        tpass.setEchoChar('*');
        temail = new TextField("");
        temail.setFont(new Font("Arial", 1, 13));
        cmsg = new TextField("");
        if (System.getProperty("java.vendor").toLowerCase().contains("oracle")) {
            cmsg.addKeyListener(new KeyAdapter() {
                @Override
                public void keyPressed(final KeyEvent e) {
                    if (e.getKeyCode() == 10 && u[0] != null) {
                        u[0].enter = true;
                    }
                }
            });
        }
        mmsg = new TextArea("", 200, 20, 3);
        cmsg.setFont(new Font("Tahoma", 0, 11));
        mmsg.setFont(new Font("Tahoma", 0, 11));
        mycar = new Checkbox("Sword of Justice Game!");
        notp = new Checkbox("No Trees & Piles");
        keplo = new Checkbox("Stay logged in");
        keplo.setState(true);
        gsPanel.add(tnick);
        gsPanel.add(tpass);
        gsPanel.add(temail);
        gsPanel.add(cmsg);
        gsPanel.add(mmsg);
        gsPanel.add(mycar);
        gsPanel.add(notp);
        gsPanel.add(keplo);
        sgame.setFont();
        wgame.setFont();
        warb.setFont();
        pgame.setFont();
        vnpls.setFont();
        vtyp.setFont();
        snfmm.setFont();
        //snfm1.setFont(new Font("Arial", 1, 13));
        //snfm2.setFont(new Font("Arial", 1, 13));
        mstgs.setFont();
        mcars.setFont();
        slaps.setFont();
        snpls.setFont();
        snbts.setFont();
        swait.setFont();
        sclass.setFont();
        scars.setFont();
        sfix.setFont();
        mycar.setFont(new Font("Arial", 1, 12));
        notp.setFont(new Font("Arial", 1, 12));
        keplo.setFont(new Font("Arial", 1, 12));
        gmode.setFont();
        rooms.setFont();
        sendtyp.setFont();
        senditem.setFont();
        datat.setFont();
        clanlev.setFont();
        clcars.setFont();
        clcars.alphad = true;
        ilaps.setFont();
        icars.setFont();
        proitem.setFont();
    }
    
    static void madlink() {
        openurl("http://www.needformadness.com/");
    }

    static public void mouseW(final int i) {
        if (!exwist) {
            mousew += i * 4;
        }
    }

    static void movefield(final Component component, int i, int i99, final int i100, final int i101) {
        if (i100 == 360 || i100 == 576) {
            i = (int) (i * apmult + apx + component.getWidth() / 2 * (apmult - 1.0F));
            i99 = (int) (i99 * apmult + apy + 12.0F * (apmult - 1.0F));
        } else {
            i = (int) (i * apmult + apx);
            i99 = (int) (i99 * apmult + apy + 12.0F * (apmult - 1.0F));
        }
        if (component.getX() != i || component.getY() != i99) {
            component.setBounds(i, i99, i100, i101);
        }
    }

    static public void movefielda(final TextArea textarea, int i, int i105, final int i106, final int i107) {
        if (applejava) {
            if (xm > i && xm < i + i106 && ym > i105 && ym < i105 + i107 || !textarea.getText().equals(" ")) {
                if (!textarea.isShowing()) {
                    textarea.setVisible(true);
                    textarea.requestFocus();
                }
                if (i106 == 360 || i106 == 576) {
                    i = (int) (i * apmult + apx + textarea.getWidth() / 2 * (apmult - 1.0F));
                    i105 = (int) (i105 * apmult + apy + 12.0F * (apmult - 1.0F));
                } else {
                    i = (int) (i * apmult + apx);
                    i105 = (int) (i105 * apmult + apy + 12.0F * (apmult - 1.0F));
                }
                if (textarea.getX() != i || textarea.getY() != i105) {
                    textarea.setBounds(i, i105, i106, i107);
                }
            } else {
                if (textarea.isShowing()) {
                    textarea.setVisible(false);
                    gsPanel.requestFocus();
                }
                rd.setColor(textarea.getBackground());
                rd.fillRect(i, i105, i106 - 1, i107 - 1);
                rd.setColor(textarea.getBackground().darker());
                rd.drawRect(i, i105, i106 - 1, i107 - 1);
            }
        } else {
            if (!textarea.isShowing()) {
                textarea.setVisible(true);
            }
            movefield(textarea, i, i105, i106, i107);
        }
    }

    static void movefieldd(final TextField textfield, int i, int i102, final int i103, final int i104, final boolean bool) {
        if (applejava) {
            if (bool)
                if (xm > i && xm < i + i103 && ym > i102 && ym < i102 + i104 || !textfield.getText().equals("")) {
                    if (!textfield.isShowing()) {
                        textfield.setVisible(true);
                        textfield.requestFocus();
                    }
                    if (i103 == 360 || i103 == 576) {
                        i = (int) (i * apmult + apx + textfield.getWidth() / 2 * (apmult - 1.0F));
                        i102 = (int) (i102 * apmult + apy + 12.0F * (apmult - 1.0F));
                    } else {
                        i = (int) (i * apmult + apx);
                        i102 = (int) (i102 * apmult + apy + 12.0F * (apmult - 1.0F));
                    }
                    if (textfield.getX() != i || textfield.getY() != i102) {
                        textfield.setBounds(i, i102, i103, i104);
                    }
                } else {
                    if (textfield.isShowing()) {
                        textfield.setVisible(false);
                        gsPanel.requestFocus();
                    }
                    rd.setColor(textfield.getBackground());
                    rd.fillRect(i, i102, i103 - 1, i104 - 1);
                    rd.setColor(textfield.getBackground().darker());
                    rd.drawRect(i, i102, i103 - 1, i104 - 1);
                }
        } else {
            if (bool && !textfield.isShowing()) {
                textfield.setVisible(true);
            }
            movefield(textfield, i, i102, i103, i104);
        }
    }

    static void multlink() {
        openurl("http://multiplayer.needformadness.com/");
    }

    static void musiclink() {
        openurl("http://multiplayer.needformadness.com/music.html");
    }

    static void onfmmlink() {
        openurl("https://github.com/chrishansen69/OpenNFMM");
    }

    static private void openurl(final String string) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(string));
            } catch (final Exception ignored) {

            }
        } else {
            try {
                Runtime.getRuntime().exec("" + Madness.urlopen() + " " + string + "");
            } catch (final Exception ignored) {

            }
        }
    }

    static private void trash() {
        rd.dispose();
        xtGraphics.stopallnow();
        //cardefine.stopallnow();
        //udpmistro.UDPquit();
        System.gc();
    }

    @Override
    public void paintComponent(final Graphics g) {
        final Graphics2D g2 = (Graphics2D) g;
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, getWidth(), getHeight());

        try {
            gameTick();
        } catch (final Exception e) {
            e.printStackTrace();
            exwist = true;
            trash();
            System.exit(3);
        }
        if (lastw != getWidth() || lasth != getHeight()) {
            lastw = getWidth();
            lasth = getHeight();
            showsize = 100;
            if (lastw <= 800 || lasth <= 550) {
                reqmult = 0.0F;
            }
            if (Madness.fullscreen) {
                apx = (int) (getWidth() / 2 - 400.0F * apmult);
                apy = (int) (getHeight() / 2 - 225.0F * apmult);
            }
        }
        int i = 0;
        int i97 = 0;
        if (moto == 1 && shaka > 0) {
            i = (int) ((shaka * 2 * ThreadLocalRandom.current().nextDouble() - shaka) * apmult);
            i97 = (int) ((shaka * 2 * ThreadLocalRandom.current().nextDouble() - shaka) * apmult);
            shaka--;
        }
        if (!Madness.fullscreen) {
            if (showsize != 0) {
                float f = (getWidth() - 40) / 800.0F - 1.0F;
                if (f > (getHeight() - 70) / 450.0F - 1.0F) {
                    f = (getHeight() - 70) / 450.0F - 1.0F;
                }
                if (f > 1.0F) {
                    f = 1.0F;
                }
                if (f < 0.0F) {
                    f = 0.0F;
                }
                apmult = 1.0F + f * reqmult;
                if (!oncarm) {
                    g2.drawImage(carmaker[0], 50, 14, this);
                } else {
                    g2.drawImage(carmaker[1], 50, 14, this);
                }
                if (!onstgm) {
                    g2.drawImage(stagemaker[0], getWidth() - 208, 14, this);
                } else {
                    g2.drawImage(stagemaker[1], getWidth() - 208, 14, this);
                }
                g2.drawImage(sizebar, getWidth() / 2 - 230, 23, this);
                g2.drawImage(blb, (int) (getWidth() / 2 - 222 + 141.0F * reqmult), 23, this);
                g2.drawImage(chkbx[smooth], getWidth() / 2 - 53, 23, this);
                g2.setFont(new Font("Arial", 1, 11));
                g2.setColor(new Color(74, 99, 125));
                g2.drawString("Screen Size:", getWidth() / 2 - 224, 17);
                g2.drawString("Smooth", getWidth() / 2 - 36, 34);
                g2.drawImage(fulls, getWidth() / 2 + 27, 15, this);
                g2.setColor(new Color(94, 126, 159));
                g2.drawString("Fullscreen", getWidth() / 2 + 63, 30);
                g2.drawImage(chkbx[Madness.anti], getWidth() / 2 + 135, 9, this);
                g2.drawString("Antialiasing", getWidth() / 2 + 152, 20);
                g2.drawImage(chkbx[moto], getWidth() / 2 + 135, 26, this);
                g2.drawString("Motion Effects", getWidth() / 2 + 152, 37);
                g2.setColor(new Color(0, 0, 0));
                g2.fillRect(getWidth() / 2 - 153, 5, 80, 16);
                g2.setColor(new Color(121, 135, 152));
                String string = "" + (int) (apmult * 100.0F) + "%";
                if (reqmult == 0.0F) {
                    string = "Original";
                }
                if (reqmult == 1.0F) {
                    string = "Maximum";
                }
                g2.drawString(string, getWidth() / 2 - 150, 17);
                if (!oncarm && !onstgm) {
                    showsize--;
                }
                if (showsize == 0) {
                    g2.setColor(new Color(0, 0, 0));
                    g2.fillRect(getWidth() / 2 - 260, 0, 520, 40);
                    g2.fillRect(50, 14, 142, 23);
                    g2.fillRect(getWidth() - 208, 14, 158, 23);
                }
            }
            apx = (int) (getWidth() / 2 - 400.0F * apmult);
            apy = (int) (getHeight() / 2 - 225.0F * apmult - 50.0F);
            if (apy < 50) {
                apy = 50;
            }
            if (apmult > 1.0F) {
                if (smooth == 1) {
                    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                    if (moto == 1) {
                        rd.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
                        g2.drawImage(tribuffer, apx + i, apy + i97, (int) (800.0F * apmult), (int) (450.0F * apmult), this);
                        cropit(g2, i, i97);
                        tg.setComposite(AlphaComposite.getInstance(3, mvect / 100.0F));
                        tg.drawImage(offImage, 0, 0, null);
                    } else {
                        g2.drawImage(offImage, apx, apy, (int) (800.0F * apmult), (int) (450.0F * apmult), this);
                    }
                } else if (moto == 1) {
                    rd.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
                    g2.drawImage(tribuffer, apx + i, apy + i97, (int) (800.0F * apmult), (int) (450.0F * apmult), this);
                    cropit(g2, i, i97);
                } else {
                    g2.drawImage(offImage, apx, apy, (int) (800.0F * apmult), (int) (450.0F * apmult), this);
                }
            } else if (moto == 1) {
                rd.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
                g2.drawImage(tribuffer, apx + i, apy + i97, this);
                cropit(g2, i, i97);
                tg.setComposite(AlphaComposite.getInstance(3, mvect / 100.0F));
                tg.drawImage(offImage, 0, 0, null);
            } else {
                g2.drawImage(offImage, apx, apy, this);
            }
        } else if (moto == 1) {
            rd.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
            g2.drawImage(tribuffer, apx + i, apy + i97, this);
            cropit(g2, i, i97);
            tg.setComposite(AlphaComposite.getInstance(3, mvect / 100.0F));
            tg.drawImage(offImage, 0, 0, null);
        } else {
            g2.drawImage(offImage, apx, apy, this);
        }
    }

    static private void readcookies(final ContO[] contos) {
        xtGraphics.nickname = "";
        try {
            final File file = new File("" + Madness.fpath + "data/user.data");
            final String[] strings = {
                    "", "", "", "", ""
            };
            if (file.exists()) {
                final BufferedReader bufferedreader = new BufferedReader(new FileReader(file));
                String string;
                for (int i = 0; (string = bufferedreader.readLine()) != null && i < 5; i++) {
                    strings[i] = string;
                }
                bufferedreader.close();
            }
            if (strings[0].startsWith("lastuser")) {
                xtGraphics.nickname = getstring("lastuser", strings[0], 0);
                if (!xtGraphics.nickname.equals("")) {
                    xtGraphics.opselect = 1;
                }
                String string;
                try {
                    string = getstring("lastuser", strings[0], 1);
                } catch (final Exception exception) {
                    string = "";
                }
                if (!string.equals("")) {
                    tnick.setText(xtGraphics.nickname);
                    tpass.setText(string);
                    xtGraphics.autolog = true;
                }
            }
            if (strings[2].startsWith("saved")) {
                int i = getint("saved", strings[2], 0);
                if (i >= 0 && i < xtGraphics.nCars) {
                    xtGraphics.scm = i;
                    xtGraphics.firstime = false;
                }
                i = getint("saved", strings[2], 1);
                if (i >= 1 && i <= xtGraphics.nTracks) {
                    xtGraphics.unlocked = i;
                }
            }
            if (strings[4].startsWith("graphics")) {
                int i = getint("graphics", strings[4], 0);
                if (i == 0 || i == 1) {
                    moto = i;
                    if (i == 1) {
                        makeTriBuffer();
                    }
                }
                i = getint("graphics", strings[4], 1);
                if (i >= 0 && i <= 1) {
                    Madness.anti = i;
                }
            }
            if (strings[1].startsWith("lastcar")) {
                int i = getint("lastcar", strings[1], 0);
                CarDefine.lastcar = getstring("lastcar", strings[1], 7);
                if (i >= 0 && i < 36) {
                    xtGraphics.osc = i;
                    xtGraphics.firstime = false;
                }
                int i198 = 0;
                for (int i199 = 0; i199 < 6; i199++) {
                    i = getint("lastcar", strings[1], i199 + 1);
                    if (i >= 0 && i <= 100) {
                        xtGraphics.arnp[i199] = i / 100.0F;
                        i198++;
                    }
                }
                if (i198 == 6 && xtGraphics.osc >= 0 && xtGraphics.osc <= 15) {
                    final Color color = Color.getHSBColor(xtGraphics.arnp[0], xtGraphics.arnp[1], 1.0F - xtGraphics.arnp[2]);
                    final Color color200 = Color.getHSBColor(xtGraphics.arnp[3], xtGraphics.arnp[4], 1.0F - xtGraphics.arnp[5]);
                    for (int i201 = 0; i201 < contos[xtGraphics.osc].npl; i201++)
                        if (contos[xtGraphics.osc].p[i201].colnum == 1) {
                            contos[xtGraphics.osc].p[i201].c[0] = color.getRed();
                            contos[xtGraphics.osc].p[i201].c[1] = color.getGreen();
                            contos[xtGraphics.osc].p[i201].c[2] = color.getBlue();
                        }
                    for (int i202 = 0; i202 < contos[xtGraphics.osc].npl; i202++)
                        if (contos[xtGraphics.osc].p[i202].colnum == 2) {
                            contos[xtGraphics.osc].p[i202].c[0] = color200.getRed();
                            contos[xtGraphics.osc].p[i202].c[1] = color200.getGreen();
                            contos[xtGraphics.osc].p[i202].c[2] = color200.getBlue();
                        }
                }
            }
        } catch (final Exception ignored) {

        }
    }

    static void reglink() {
        openurl("http://multiplayer.needformadness.com/register.html?ref=game");
    }

    static void regnew() {
        openurl("http://multiplayer.needformadness.com/registernew.pl");
    }

    static private void makeMenus() {
        rd.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        sgame.add(rd, " NFM 1     ");
        sgame.add(rd, " NFM 2     ");
        sgame.add(rd, " My Stages ");
        sgame.add(rd, " Weekly Top20 ");
        sgame.add(rd, " Monthly Top20 ");
        sgame.add(rd, " All Time Top20 ");
        sgame.add(rd, " Stage Maker ");
        wgame.add(rd, " Normal Game");
        wgame.add(rd, " War / Battle");
        wgame.add(rd, " War / Battle - Practice");
        warb.add(rd, " Loading your clan's wars and battles, please wait...");
        pgame.add(rd, " Select the game you want to practice");
        vnpls.add(rd, "Players");
        vnpls.add(rd, " 2 VS 2");
        vnpls.add(rd, " 3 VS 3");
        vnpls.add(rd, " 4 VS 4");
        vtyp.add(rd, "Normal clan game");
        vtyp.add(rd, "Racing only");
        vtyp.add(rd, "Wasting only");
        vtyp.add(rd, "Racers VS Wasters - my clan wastes");
        vtyp.add(rd, "Racers VS Wasters - my clan races");
        snfmm.add(rd, "Select Stage");
        //snfm1.add(rd, "Select Stage");
        //snfm2.add(rd, "Select Stage");
        mstgs.add(rd, "Suddenly the King becomes Santa's Little Helper");
        mcars.add(rd, "Sword of Justice");
        snpls.add(rd, "Select");
        swait.add(rd, "1 Minute");
        ilaps.add(rd, "Laps");
        ilaps.add(rd, "1 Lap");
        for (int i = 0; i < xtGraphics.nTracks; i++) {
            snfmm.add(rd, " Stage " + (i + 1) + "");
        }
        /*for (int i = 0; i < 10; i++)
        	snfm1.add(rd, "" + (" Stage ") + (i + 1) + (""));
        for (int i = 0; i < 17; i++)
        	snfm2.add(rd, "" + (" Stage ") + (i + 1) + (""));*/
        for (int i = 0; i < 7; i++) {
            snpls.add(rd, "    " + (i + 2) + "");
        }
        for (int i = 0; i < 7; i++) {
            snbts.add(rd, "    " + i + "    ");
        }
        for (int i = 0; i < 2; i++) {
            swait.add(rd, "" + (i + 2) + " Minutes");
        }
        for (int i = 0; i < 15; i++) {
            slaps.add(rd, "" + (i + 1) + "");
        }
        for (int i = 0; i < 14; i++) {
            ilaps.add(rd, "" + (i + 2) + " Laps");
        }
        sclass.add(rd, "All Classes");
        sclass.add(rd, "Class C Cars");
        sclass.add(rd, "Class B & C Cars");
        sclass.add(rd, "Class B Cars");
        sclass.add(rd, "Class A & B Cars");
        sclass.add(rd, "Class A Cars");
        scars.add(rd, "All Cars");
        scars.add(rd, "Custom Cars");
        scars.add(rd, "Game Cars");
        sfix.add(rd, "Unlimited Fixing");
        sfix.add(rd, "4 Fixes");
        sfix.add(rd, "3 Fixes");
        sfix.add(rd, "2 Fixes");
        sfix.add(rd, "1 Fix");
        sfix.add(rd, "No Fixing");
        icars.add(rd, "Type of Cars");
        icars.add(rd, "All Cars");
        icars.add(rd, "Clan Cars");
        icars.add(rd, "Game Cars");
        icars.w = 140;
        gmode.add(rd, " Normal Game ");
        gmode.add(rd, " Practice Game ");
        rooms.rooms = true;
        rooms.add(rd, "Ghostrider :: 1");
        sendtyp.add(rd, "Write a Message");
        sendtyp.add(rd, "Share a Custom Car");
        sendtyp.add(rd, "Share a Custom Stage");
        sendtyp.add(rd, "Send a Clan Invitation");
        sendtyp.add(rd, "Share a Relative Date");
        senditem.add(rd, "Suddenly the King becomes Santa's Little Helper");
        for (int i = 0; i < 6; i++) {
            clanlev.add(rd, "" + (i + 1) + "");
        }
        clanlev.add(rd, "7 - Admin");
        hidefields();
    }
    
    private GameSparker() { super(); }

    static public GameSparker create() {
        gsPanel = new GameSparker();
        
        BASSLoader.initializeBASS();
        initFields();

        gsPanel.setBorder(BorderFactory.createLineBorder(Color.black));
        //
        gsPanel.setBackground(Color.black);
        gsPanel.setOpaque(true);
        //
        gsPanel.setLayout(null);

        makeMenus();

        preloadGame();

        new Thread(GameSparker::loadGame).start();

        gsPanel.addKeyListener(gsPanel);
        gsPanel.addMouseListener(gsPanel);
        gsPanel.addMouseMotionListener(gsPanel);
        gsPanel.addFocusListener(gsPanel);
        gsPanel.setFocusable(true);
        gsPanel.requestFocusInWindow();
        gsPanel.setIgnoreRepaint(true);

        // disable Swing's double buffering. we don't need it since we have our own offscreen image (offImage)
        // this means we get a slight performance gain
        // ("You may find that your numbers for direct rendering far exceed those for double-buffering" from https://docs.oracle.com/javase/tutorial/extra/fullscreen/doublebuf.html)
        // for zero graphical loss.
        gsPanel.setDoubleBuffered(false);

        final Timer timer = new Timer(46, ae -> gsPanel.repaint());

        timer.start();
        return gsPanel;
    }

    static private void preloadGame() {
        if (System.getProperty("java.vendor").toLowerCase().contains("apple")) {
            applejava = true;
        }

        new Medium();
        new Trackers();
        new CheckPoints();
        carContos = new ContO[carRads.length];
        contos = new ContO[stageRads.length];
        CarDefine.create(contos);
        xtGraphics.create(rd, gsPanel);

        new Record();
        mads = new Mad[8];
        for (int i = 0; i < 8; i++) {
            mads[i] = new Mad(null, i);
            u[i] = new Control();
        }

        date = new Date();
        l1 = date.getTime();
        f2 = 30.0F;
        bool3 = false;
        i4 = 530;
        i5 = 0;
        recordtime = 0;
        clicknowtime = 0;
        finishrecording = 0;
        wastedpoint = 0;
        flashingscreen = false;
    }

    //@Override
    static private void loadGame() {
        gsPanel.requestFocus();
        try {
            sizebar = xtGraphics.getImage("data/baseimages/sizebar.gif");
            blb = xtGraphics.getImage("data/baseimages/b.gif");
            fulls = xtGraphics.getImage("data/baseimages/fullscreen.gif");
            chkbx[0] = xtGraphics.getImage("data/baseimages/checkbox1.gif");
            chkbx[1] = xtGraphics.getImage("data/baseimages/checkbox2.gif");
            carmaker[0] = xtGraphics.getImage("data/baseimages/carmaker1.gif");
            carmaker[1] = xtGraphics.getImage("data/baseimages/carmaker2.gif");
            stagemaker[0] = xtGraphics.getImage("data/baseimages/stagemaker1.gif");
            stagemaker[1] = xtGraphics.getImage("data/baseimages/stagemaker2.gif");
        } catch (IOException e) {
            e.printStackTrace();
        }
        xtGraphics.loaddata();

        loadbase();

        stageContos = new ContO[10000];

        f = 47.0F;
        readcookies(  contos);
        xtGraphics.testdrive = Madness.testdrive;
        if (xtGraphics.testdrive != 0)
            if (xtGraphics.testdrive <= 2) {
                xtGraphics.sc[0] = CarDefine.loadcar(Madness.testcar, 16);
                if (xtGraphics.sc[0] != -1) {
                    xtGraphics.fase = -9;
                } else {
                    Madness.testcar = "Failx12";
                    Madness.carmaker();
                }
            } else {
                CheckPoints.name = Madness.testcar;
                xtGraphics.fase = -9;
            }
        xtGraphics.stoploading();
        gsPanel.requestFocus();
        if (xtGraphics.testdrive == 0 && xtGraphics.firstime) {
            setupini();
        }
        System.gc();

        gameLoaded = true;
    }

    static private void gameTick() {

        date = new Date();
        date.getTime();
        if (xtGraphics.fase == 1111) {
            xtGraphics.loading();
            if (gameLoaded) {
                xtGraphics.fase = 111;
            }
        }
        if (xtGraphics.fase == 111) {
            if (mouses == 1) {
                clicknowtime = 800;
            }
            if (clicknowtime < 800) {
                xtGraphics.clicknow();
                clicknowtime++;
            } else {
                clicknowtime = 0;
                if (!exwist) {
                    xtGraphics.fase = 9;
                }
                mouses = 0;
                lostfcs = false;
            }
        }
        if (xtGraphics.fase == 9)
            if (clicknowtime < 76) {
                xtGraphics.rad(clicknowtime);
                catchlink();
                if (mouses == 2) {
                    mouses = 0;
                }
                if (mouses == 1) {
                    mouses = 2;
                }
                clicknowtime++;
                if (u[0].enter) {
                    u[0].enter = false;
                    clicknowtime = 76;
                }
            } else {
                clicknowtime = 0;
                xtGraphics.fase = 10;
                mouses = 0;
                u[0].falseo(0);
            }
        if (xtGraphics.fase == -9) {
            if (xtGraphics.loadedt) {
                xtGraphics.mainbg(-101);
                rd.setColor(new Color(0, 0, 0));
                rd.fillRect(0, 0, 800, 450);
                //repaint();
                xtGraphics.strack.unload();
                xtGraphics.strack = null;
                xtGraphics.flexpix = null;
                Images.fleximg = null;
                System.gc();
                xtGraphics.loadedt = false;
            }
            if (clicknowtime < 2) {
                xtGraphics.mainbg(-101);
                rd.setColor(new Color(0, 0, 0));
                rd.fillRect(65, 25, 670, 400);
                clicknowtime++;
            } else {
                checkmemory();
                xtGraphics.inishcarselect(carContos);
                clicknowtime = 0;
                xtGraphics.fase = 7;
                mvect = 50;
                mouses = 0;
            }
        }
        if (xtGraphics.fase == 8) {
            xtGraphics.credits(u[0], xm, ym, mouses);
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (xtGraphics.flipo <= 100) {
                catchlink();
            }
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == 10) {
            mvect = 100;
            xtGraphics.maini(u[0]);
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == 103) {
            mvect = 100;
            if (xtGraphics.loadedt) {
                rd.setColor(new Color(0, 0, 0));
                rd.fillRect(0, 0, 800, 450);
                //repaint();
                checkmemory();
                xtGraphics.strack.unload();
                xtGraphics.strack = null;
                xtGraphics.flexpix = null;
                Images.fleximg = null;
                System.gc();
                xtGraphics.loadedt = false;
            }
            if (xtGraphics.testdrive == 1 || xtGraphics.testdrive == 2) {
                Madness.carmaker();
            }
            if (xtGraphics.testdrive == 3 || xtGraphics.testdrive == 4) {
                Madness.stagemaker();
            }
            xtGraphics.maini(u[0]);
            xtGraphics.fase = 10;
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == 102) {
            mvect = 100;
            if (xtGraphics.loadedt) {
                rd.setColor(new Color(0, 0, 0));
                rd.fillRect(0, 0, 800, 450);
                //repaint();
                checkmemory();
                xtGraphics.strack.unload();
                xtGraphics.strack = null;
                xtGraphics.flexpix = null;
                Images.fleximg = null;
                System.gc();
                xtGraphics.loadedt = false;
            }
            if (xtGraphics.testdrive == 1 || xtGraphics.testdrive == 2) {
                Madness.carmaker();
            }
            if (xtGraphics.testdrive == 3 || xtGraphics.testdrive == 4) {
                Madness.stagemaker();
            }
            xtGraphics.maini2();
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == -22) {
            CheckPoints.name = Madness.testcar;
            CheckPoints.stage = -1;
            loadstage();
            if (CheckPoints.stage == -3) {
                Madness.testcar = "Failx12";
                Madness.stagemaker();
            }
        }
        if (xtGraphics.fase == 11) {
            xtGraphics.inst(u[0]);
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == -5) {
            mvect = 100;
            xtGraphics.finish( carContos, u[0], xm, ym, moused); // TODO carContos or contos here?
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == 7) {
            xtGraphics.carselect(u[0], carContos, xm, ym, moused);
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
            drawms();
        }
        if (xtGraphics.fase == 6) {
            xtGraphics.musicomp(CheckPoints.stage, u[0]);
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == 5) {
            mvect = 100;
            xtGraphics.loadmusic(CheckPoints.stage, CheckPoints.trackname, CheckPoints.trackvol);
        }
        if (xtGraphics.fase == 4) {
            xtGraphics.cantgo(u[0]);
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == 3) {
            rd.setColor(new Color(0, 0, 0));
            rd.fillRect(65, 25, 670, 400);
            //repaint();
            xtGraphics.inishstageselect();
        }
        if (xtGraphics.fase == 2) {
            mvect = 100;
            xtGraphics.loadingstage(true);
            CheckPoints.nfix = 0;
            CheckPoints.notb = false;
            loadstage();
            u[0].falseo(0);
            udpmistro.freg = 0.0F;
            mvect = 20;
        }
        if (xtGraphics.fase == 1) {
            xtGraphics.trackbg(false);
            rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
            if (CheckPoints.stage != -3) {
                Medium.aroundtrack();
                if (Medium.hit == 5000 && mvect < 40) {
                    mvect++;
                }
                final int[][] ai = new int[notb][2];
                for (int k7 = xtGraphics.nplayers; k7 < notb; k7++) {
                    ai[k7][0] = k7;
                    ai[k7][1] = stageContos[k7].dist;
                }

                Arrays.sort(ai, contoComparator);

                for (int i14 = 0; i14 < notb; i14++) {
                    stageContos[ai[i14][0]].d(rd);
                }
            }
            if (!openm) {
                xtGraphics.ctachm(xm, ym, mouses, u[0]);
            }
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
            rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            xtGraphics.stageselect( u[0], xm, ym, moused);
            drawms();
        }
        if (xtGraphics.fase == 1177) {
            mvect = 100;
            if (!bool) {
                if (xtGraphics.loadedt) {
                    rd.setColor(new Color(0, 0, 0));
                    rd.fillRect(0, 0, 800, 450);
                    //repaint();
                    checkmemory();
                    xtGraphics.strack.unload();
                    xtGraphics.strack = null;
                    xtGraphics.flexpix = null;
                    Images.fleximg = null;
                    System.gc();
                    xtGraphics.loadedt = false;
                }
                xtGraphics.intertrack.unload();
                rd.setColor(new Color(0, 0, 0));
                rd.fillRect(65, 25, 670, 400);
                if (mload > 0) {
                    rd.drawImage(Images.mload, 259, 195, gsPanel);
                }
                //repaint();
                if (mload == 2) {
                    CarDefine.loadready();
                    loadbase();
                    readcookies(  contos);
                    mload = -1;
                }
                System.gc();
                login = new Login(rd, gsPanel);
                //globe = new Globe(rd,   login,   contos, contos0,
                //		this);
                lobby = new Lobby(rd, login, gsPanel);
                bool = true;
            }
            if (login.fase != 18) {
                final boolean bool20 = false;
                if (login.fase == 0) {
                    login.inishmulti();
                }
                if (login.fase >= 1 && login.fase <= 11) {
                    login.multistart(contos, xm, ym, moused);
                }
                if (login.fase >= 12 && login.fase <= 17) {
                    //if (globe.open != 452)
                    login.multimode(contos);
                }
                //else
                //	bool20 = true;
                //globe.dome(0, xm, ym, moused, u[0]);
                if (login.justlog) {
                    //if (!xtgraphics.clan.equals(""))
                    //	globe.itab = 2;
                    login.justlog = false;
                }
                if (!bool20) {
                    login.ctachm(xm, ym, mouses, u[0], lobby);
                    mvect = 50;
                } else {
                    drawms();
                    mvect = 100;
                }
                if (mouses == 1) {
                    mouses = 11;
                }
                if (mouses <= -1) {
                    mouses--;
                    if (mouses == -4) {
                        mouses = 0;
                    }
                }
                if (mousew != 0)
                    if (mousew > 0) {
                        mousew--;
                    } else {
                        mousew++;
                    }
            } else {
                if (lobby.fase == 0) {
                    lobby.inishlobby();
                    mvect = 100;
                }
                if (lobby.fase == 1) {
                    /*if (globe.open >= 2 && globe.open < 452)
                    	openm = true;
                    if (globe.open != 452)*/
                    lobby.lobby(xm, ym, moused, mousew, u[0], contos);
                    /*else
                    	bool21 = true;
                    globe.dome(lobby.conon, xm, ym, moused, u[0]);*/
                    if (lobby.loadstage > 0) {
                        gsPanel.setCursor(new Cursor(3));
                        drawms();
                        //repaint();
                        Trackers.nt = 0;
                        if (loadstagePreview(lobby.loadstage, "", stageContos, contos)) {
                            lobby.gstagename = CheckPoints.name;
                            lobby.gstagelaps = CheckPoints.nlaps;
                            lobby.loadstage = -lobby.loadstage;
                        } else {
                            lobby.loadstage = 0;
                            CheckPoints.name = "";
                        }
                        gsPanel.setCursor(new Cursor(0));
                    }
                    if (lobby.msload != 0) {
                        gsPanel.setCursor(new Cursor(3));
                        drawms();
                        //repaint();
                        if (lobby.msload == 1) {
                            CarDefine.loadmystages();
                        }
                        if (lobby.msload == 7) {
                            CarDefine.loadclanstages(xtGraphics.clan);
                        }
                        if (lobby.msload == 3 || lobby.msload == 4) {
                            CarDefine.loadtop20(lobby.msload);
                        }
                        lobby.msload = 0;
                        gsPanel.setCursor(new Cursor(0));
                    }
                }
                if (lobby.fase == 3) {
                    xtGraphics.trackbg(false);
                    Medium.trk = 0;
                    Medium.focusPoint = 400;
                    Medium.crs = true;
                    Medium.x = -335;
                    Medium.y = 0;
                    Medium.z = -50;
                    Medium.xz = 0;
                    Medium.zy = 20;
                    Medium.ground = -2000;
                    mvect = 100;
                    lobby.fase = 1;
                }
                if (lobby.fase == 4) {
                    mvect = 50;
                    rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
                    Medium.d(rd);
                    Medium.aroundtrack();
                    int j = 0;
                    final int[] is = new int[1000];
                    for (int k = 0; k < nob; k++)
                        if (stageContos[k].dist != 0) {
                            is[j] = k;
                            j++;
                        } else {
                            stageContos[k].d(rd);
                        }
                    final int[] is2 = new int[j];
                    for (int k = 0; k < j; k++) {
                        is2[k] = 0;
                    }
                    for (int k = 0; k < j; k++) {
                        for (int l = k + 1; l < j; l++)
                            if (stageContos[is[k]].dist != stageContos[is[l]].dist) {
                                if (stageContos[is[k]].dist < stageContos[is[l]].dist) {
                                    is2[k]++;
                                } else {
                                    is2[l]++;
                                }
                            } else if (l > k) {
                                is2[k]++;
                            } else {
                                is2[l]++;
                            }
                    }
                    for (int k = 0; k < j; k++) {
                        for (int l = 0; l < j; l++)
                            if (is2[l] == k) {
                                stageContos[is[l]].d(rd);
                            }
                    }
                    rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    lobby.stageselect(u[0], xm, ym, moused);
                    if (lobby.plsndt == 1) {
                        mvect = 70;
                        //repaint();
                        gsPanel.setCursor(new Cursor(3));
                        xtGraphics.loadstrack(CheckPoints.stage, CheckPoints.trackname, CheckPoints.trackvol);
                        xtGraphics.strack.play();
                        lobby.plsndt = 2;
                        moused = false;
                        mouses = 0;
                    }
                }
                if (lobby.fase == 2) {
                    int j = 0;
                    for (int k = 0; k < lobby.ngm; k++)
                        if (lobby.ongame == lobby.gnum[k]) {
                            j = k;
                        }
                    boolean flag = false;
                    if (lobby.gstgn[j] > 0) {
                        if (lobby.gstgn[j] == -lobby.loadstage) {
                            flag = true;
                        }
                    } else if (lobby.gstages[j].equals(CheckPoints.name)) {
                        flag = true;
                    }
                    if (flag) {
                        lobby.fase = 4;
                        lobby.addstage = 0;
                    } else {
                        xtGraphics.loadingstage(false);
                        Trackers.nt = 0;
                        if (loadstagePreview(lobby.gstgn[j], lobby.gstages[j], stageContos, contos)) {
                            lobby.loadstage = -lobby.gstgn[j];
                            lobby.fase = 4;
                            lobby.addstage = 0;
                        } else {
                            lobby.loadstage = 0;
                            CheckPoints.name = "";
                            lobby.fase = 3;
                        }
                    }
                }
                if (lobby.fase == 76) {
                    CheckPoints.nlaps = lobby.laps;
                    CheckPoints.stage = lobby.stage;
                    CheckPoints.name = lobby.stagename;
                    CheckPoints.nfix = lobby.nfix;
                    CheckPoints.notb = lobby.notb;
                    xtGraphics.fase = 21;
                    u[0].multion = xtGraphics.multion;
                }
                /*if (globe.loadwbgames == 7) {
                	//repaint();
                	globe.redogame();
                }*/
                if (!openm) {
                    lobby.ctachm(xm, ym, mouses, u[0]);
                } else {
                    mouses = 0;
                }
                drawms();
                if (lobby.fase == 1) {
                    lobby.preforma(xm, ym);
                }
                if (lobby.loadwarb) {
                    //repaint();
                    //globe.loadwarb();
                    lobby.loadwarb = false;
                }
                /*if (globe.loadwbgames == 1) {
                	//repaint();
                	globe.loadwgames();
                }*/
                if (mouses == 1) {
                    mouses = 11;
                }
                if (mouses <= -1) {
                    mouses--;
                    if (mouses == -4) {
                        mouses = 0;
                    }
                }
                if (mousew != 0) {
                    if (mousew > 0) {
                        mousew--;
                    } else {
                        mousew++;
                    }
                    if (!lobby.zeromsw) {
                        mousew = 0;
                    }
                }
            }
        }
        if (xtGraphics.fase == 24) {
            login.endcons();
            login = null;
            lobby = null;
            //globe = null;
            bool = false;
            System.gc();
            System.runFinalization();
            if (!xtGraphics.mtop) {
                xtGraphics.fase = 102;
                xtGraphics.opselect = 2;
            } else {
                xtGraphics.fase = 10;
                xtGraphics.opselect = 1;
            }
        }
        if (xtGraphics.fase == 23) {
            if (login.fase == 18) {
                xtGraphics.playingame = -101;
            }
            login.stopallnow();
            lobby.stopallnow();
            //globe.stopallnow();
            login = null;
            lobby = null;
            //globe = null;
            hidefields();
            bool = false;
            System.gc();
            System.runFinalization();
            xtGraphics.fase = -9;
        }
        if (xtGraphics.fase == 22) {
            loadstage();
            if (CheckPoints.stage != -3) {
                if (xtGraphics.lan && xtGraphics.im == 0) {
                    udpmistro.UDPLanServer(xtGraphics.server, xtGraphics.servport, xtGraphics.playingame);
                }
                u[0].falseo(2);
                gsPanel.requestFocus();
            } else {
                xtGraphics.fase = 1177;
            }
        }
        if (xtGraphics.fase == 21) {
            login.endcons();
            login = null;
            lobby = null;
            //globe = null;
            bool = false;
            System.gc();
            System.runFinalization();
            xtGraphics.fase = 22;
        }
        if (xtGraphics.fase == 0) {
            for (int player = 0; player < xtGraphics.nplayers; player++)
                if (mads[player].newcar) {
                    final int i34 = stageContos[player].xz;
                    final int i35 = stageContos[player].xy;
                    final int i36 = stageContos[player].zy;
                    stageContos[player] = new ContO(carContos[mads[player].cn], stageContos[player].x, stageContos[player].y, stageContos[player].z, 0);
                    stageContos[player].xz = i34;
                    stageContos[player].xy = i35;
                    stageContos[player].zy = i36;
                    mads[player].newcar = false;
                }
            Medium.d(rd);

            final int[][] ai = new int[nob][2];
            for (int k7 = 0; k7 < nob; k7++) {
                ai[k7][0] = k7;
                ai[k7][1] = stageContos[k7].dist;
            }

            Arrays.sort(ai, contoComparator);

            for (int i14 = 0; i14 < nob; i14++) {
                stageContos[ai[i14][0]].d(rd);
            }
            
            if (xtGraphics.starcnt == 0) {
                for (int k = 0; k < xtGraphics.nplayers; k++) {
                    for (int l = 0; l < xtGraphics.nplayers; l++)
                        if (l != k) {
                            mads[k].colide(stageContos[k], mads[l], stageContos[l]);
                        }
                }
                for (int k = 0; k < xtGraphics.nplayers; k++) {
                    mads[k].drive(u[k], stageContos[k]);
                }
                for (int k = 0; k < xtGraphics.nplayers; k++) {
                    Record.rec(stageContos[k], k, mads[k].squash, mads[k].lastcolido, mads[k].cntdest, 0);
                }
                CheckPoints.checkstat(mads, stageContos,  xtGraphics.nplayers, xtGraphics.im, 0);
                for (int k = 1; k < xtGraphics.nplayers; k++) {
                    u[k].preform(mads[k], stageContos[k]);
                }
            } else {
                if (xtGraphics.starcnt == 130) {
                    Medium.adv = 1900;
                    Medium.zy = 40;
                    Medium.vxz = 70;
                    rd.setColor(new Color(255, 255, 255));
                    rd.fillRect(0, 0, 800, 450);
                }
                if (xtGraphics.starcnt != 0) {
                    xtGraphics.starcnt--;
                }
            }
            if (xtGraphics.starcnt < 38) {
                if (view == 0) {
                    Medium.follow(stageContos[0], mads[0].cxz, u[0].lookback);
                    xtGraphics.stat(mads[0], stageContos[0],  u[0], true);
                    if (mads[0].outshakedam > 0) {
                        shaka = mads[0].outshakedam / 20;
                        if (shaka > 25) {
                            shaka = 25;
                        }
                    }
                    mvect = 65 + Math.abs(lmxz - Medium.xz) / 5 * 100;
                    if (mvect > 90) {
                        mvect = 90;
                    }
                    lmxz = Medium.xz;
                }
                if (view == 1) {
                    Medium.around(stageContos[0], false);
                    xtGraphics.stat(mads[0], stageContos[0],  u[0], false);
                    mvect = 80;
                }
                if (view == 2) {
                    Medium.watch(stageContos[0], mads[0].mxz);
                    xtGraphics.stat(mads[0], stageContos[0],  u[0], false);
                    mvect = 65 + Math.abs(lmxz - Medium.xz) / 5 * 100;
                    if (mvect > 90) {
                        mvect = 90;
                    }
                    lmxz = Medium.xz;
                }
                if (mouses == 1) {
                    u[0].enter = true;
                    mouses = 0;
                }
            } else {
                int k = 3;
                if (xtGraphics.nplayers == 1) {
                    k = 0;
                }
                Medium.around(stageContos[k], true);
                mvect = 80;
                if (u[0].enter || u[0].handb) {
                    xtGraphics.starcnt = 38;
                    u[0].enter = false;
                    u[0].handb = false;
                }
                if (xtGraphics.starcnt == 38) {
                    mouses = 0;
                    Medium.vert = false;
                    Medium.adv = 900;
                    Medium.vxz = 180;
                    CheckPoints.checkstat(mads, stageContos,  xtGraphics.nplayers, xtGraphics.im, 0);
                    Medium.follow(stageContos[0], mads[0].cxz, 0);
                    xtGraphics.stat(mads[0], stageContos[0],  u[0], true);
                    rd.setColor(new Color(255, 255, 255));
                    rd.fillRect(0, 0, 800, 450);
                }
            }
        }
        if (xtGraphics.fase == 7001) {
            for (int player = 0; player < xtGraphics.nplayers; player++)
                if (mads[player].newedcar == 0 && mads[player].newcar) {
                    final int i52 = stageContos[player].xz;
                    final int i53 = stageContos[player].xy;
                    final int i54 = stageContos[player].zy;
                    xtGraphics.colorCar(contos[mads[player].cn], player);
                    stageContos[player] = new ContO(contos[mads[player].cn], stageContos[player].x, stageContos[player].y, stageContos[player].z, 0);
                    stageContos[player].xz = i52;
                    stageContos[player].xy = i53;
                    stageContos[player].zy = i54;
                    mads[player].newedcar = 20;
                }
            Medium.d(rd);
            int j = 0;
            final int[] is = new int[10000];
            for (int k = 0; k < nob; k++)
                if (stageContos[k].dist != 0) {
                    is[j] = k;
                    j++;
                } else {
                    stageContos[k].d(rd);
                }
            final int[] is2 = new int[j];
            final int[] is3 = new int[j];
            for (int k = 0; k < j; k++) {
                is2[k] = 0;
            }
            for (int k = 0; k < j; k++) {
                for (int l = k + 1; l < j; l++)
                    if (stageContos[is[k]].dist < stageContos[is[l]].dist) {
                        is2[k]++;
                    } else {
                        is2[l]++;
                    }
                is3[is2[k]] = k;
            }
            for (int k = 0; k < j; k++) {
                if (is[is3[k]] < xtGraphics.nplayers && is[is3[k]] != xtGraphics.im) {
                    udpmistro.readContOinfo(stageContos[is[is3[k]]], is[is3[k]]);
                }
                stageContos[is[is3[k]]].d(rd);
            }
            if (xtGraphics.starcnt == 0) {
                if (xtGraphics.multion == 1) {
                    int k = 1;
                    for (int l = 0; l < xtGraphics.nplayers; l++)
                        if (xtGraphics.im != l) {
                            udpmistro.readinfo(mads[l], stageContos[l], u[k], l, CheckPoints.dested);
                            k++;
                        }
                } else {
                    for (int l = 0; l < xtGraphics.nplayers; l++) {
                        udpmistro.readinfo(mads[l], stageContos[l], u[l], l, CheckPoints.dested);
                    }
                }
                for (int k = 0; k < xtGraphics.nplayers; k++) {
                    for (int l = 0; l < xtGraphics.nplayers; l++)
                        if (l != k) {
                            mads[k].colide(stageContos[k], mads[l], stageContos[l]);
                        }
                }
                if (xtGraphics.multion == 1) {
                    int k = 1;
                    for (int l = 0; l < xtGraphics.nplayers; l++)
                        if (xtGraphics.im != l) {
                            mads[l].drive(u[k], stageContos[l]);
                            k++;
                        } else {
                            mads[l].drive(u[0], stageContos[l]);
                        }
                    for (int l = 0; l < xtGraphics.nplayers; l++) {
                        Record.rec(stageContos[l], l, mads[l].squash, mads[l].lastcolido, mads[l].cntdest, xtGraphics.im);
                    }
                } else {
                    for (int k = 0; k < xtGraphics.nplayers; k++) {
                        mads[k].drive(u[k], stageContos[k]);
                    }
                }
                CheckPoints.checkstat(mads, stageContos,  xtGraphics.nplayers, xtGraphics.im, xtGraphics.multion);
            } else {
                if (xtGraphics.starcnt == 130) {
                    Medium.adv = 1900;
                    Medium.zy = 40;
                    Medium.vxz = 70;
                    rd.setColor(new Color(255, 255, 255));
                    rd.fillRect(0, 0, 800, 450);
                    //repaint();
                    if (xtGraphics.lan) {
                        udpmistro.UDPConnectLan(xtGraphics.localserver, xtGraphics.nplayers, xtGraphics.im);
                        if (xtGraphics.im == 0) {
                            xtGraphics.setbots(udpmistro.isbot);
                        }
                    } else {
                        udpmistro.UDPConnectOnline(xtGraphics.server, xtGraphics.gameport, xtGraphics.nplayers, xtGraphics.im);
                    }
                    if (xtGraphics.multion >= 2) {
                        xtGraphics.im = (int) (ThreadLocalRandom.current().nextDouble() * xtGraphics.nplayers);
                        xtGraphics.starcnt = 0;
                    }
                }
                if (xtGraphics.starcnt == 50) {
                    udpmistro.frame[udpmistro.im][0] = 0;
                }
                if (xtGraphics.starcnt != 39 && xtGraphics.starcnt != 0) {
                    xtGraphics.starcnt--;
                }
                if (udpmistro.go && xtGraphics.starcnt >= 39) {
                    xtGraphics.starcnt = 38;
                    if (xtGraphics.lan) {
                        int k = CheckPoints.stage;
                        if (k < 0) {
                        }
                        if (xtGraphics.loadedt) {
                            xtGraphics.strack.play();
                        }
                    }
                }
            }
            if (xtGraphics.lan && udpmistro.im == 0) {
                for (int k = 2; k < xtGraphics.nplayers; k++)
                    if (udpmistro.isbot[k]) {
                        u[k].preform(mads[k], stageContos[k]);
                        udpmistro.setinfo(mads[k], stageContos[k], u[k], CheckPoints.pos[k], CheckPoints.magperc[k], false, k);
                    }
            }
            if (xtGraphics.starcnt < 38) {
                if (xtGraphics.multion == 1) {
                    udpmistro.setinfo(mads[xtGraphics.im], stageContos[xtGraphics.im], u[0], CheckPoints.pos[xtGraphics.im], CheckPoints.magperc[xtGraphics.im], xtGraphics.holdit, xtGraphics.im);
                    if (view == 0) {
                        Medium.follow(stageContos[xtGraphics.im], mads[xtGraphics.im].cxz, u[0].lookback);
                        xtGraphics.stat(mads[xtGraphics.im], stageContos[xtGraphics.im],  u[0], true);
                        if (mads[xtGraphics.im].outshakedam > 0) {
                            shaka = mads[xtGraphics.im].outshakedam / 20;
                            if (shaka > 25) {
                                shaka = 25;
                            }
                        }
                        mvect = 65 + Math.abs(lmxz - Medium.xz) / 5 * 100;
                        if (mvect > 90) {
                            mvect = 90;
                        }
                        lmxz = Medium.xz;
                    }
                    if (view == 1) {
                        Medium.around(stageContos[xtGraphics.im], false);
                        xtGraphics.stat(mads[xtGraphics.im], stageContos[xtGraphics.im],  u[0], false);
                        mvect = 80;
                    }
                    if (view == 2) {
                        Medium.watch(stageContos[xtGraphics.im], mads[xtGraphics.im].mxz);
                        xtGraphics.stat(mads[xtGraphics.im], stageContos[xtGraphics.im],  u[0], false);
                        mvect = 65 + Math.abs(lmxz - Medium.xz) / 5 * 100;
                        if (mvect > 90) {
                            mvect = 90;
                        }
                        lmxz = Medium.xz;
                    }
                } else {
                    if (view == 0) {
                        Medium.getaround(stageContos[xtGraphics.im]);
                        mvect = 80;
                    }
                    if (view == 1) {
                        Medium.getfollow(stageContos[xtGraphics.im], mads[xtGraphics.im].cxz, u[0].lookback);
                        mvect = 65 + Math.abs(lmxz - Medium.xz) / 5 * 100;
                        if (mvect > 90) {
                            mvect = 90;
                        }
                        lmxz = Medium.xz;
                    }
                    if (view == 2) {
                        Medium.watch(stageContos[xtGraphics.im], mads[xtGraphics.im].mxz);
                        mvect = 65 + Math.abs(lmxz - Medium.xz) / 5 * 100;
                        if (mvect > 90) {
                            mvect = 90;
                        }
                        lmxz = Medium.xz;
                    }
                    xtGraphics.stat(mads[xtGraphics.im], stageContos[xtGraphics.im],  u[0], true);
                }
                if (mouses == 1) {
                    if (xtGraphics.holdit && xtGraphics.exitm != 4 && xtGraphics.multion == 1) {
                        u[0].enter = true;
                    }
                    mouses = 0;
                }
            } else {
                Medium.around(stageContos[xtGraphics.im], true);
                mvect = 80;
                if (xtGraphics.starcnt == 39) {
                    xtGraphics.waitenter();
                }
                if (xtGraphics.starcnt == 38) {
                    xtGraphics.forstart = 0;
                    mouses = 0;
                    Medium.vert = false;
                    Medium.adv = 900;
                    Medium.vxz = 180;
                    CheckPoints.checkstat(mads, stageContos,  xtGraphics.nplayers, xtGraphics.im, xtGraphics.multion);
                    Medium.follow(stageContos[xtGraphics.im], mads[xtGraphics.im].cxz, 0);
                    xtGraphics.stat(mads[xtGraphics.im], stageContos[xtGraphics.im],  u[0], true);
                    rd.setColor(new Color(255, 255, 255));
                    rd.fillRect(0, 0, 800, 450);
                }
            }
            xtGraphics.multistat(u[0],  xm, ym, moused, udpmistro);
        }
        if (xtGraphics.fase == -1) {
            if (recordtime == 0) {
                for (int j = 0; j < xtGraphics.nplayers; j++) {
                    Record.ocar[j] = new ContO(stageContos[j], 0, 0, 0, 0);
                    stageContos[j] = new ContO(Record.car[0][j], 0, 0, 0, 0);
                }
            }
            Medium.d(rd);
            int j = 0;
            final int[] is = new int[10000];
            for (int k = 0; k < nob; k++)
                if (stageContos[k].dist != 0) {
                    is[j] = k;
                    j++;
                } else {
                    stageContos[k].d(rd);
                }
            final int[] is2 = new int[j];
            for (int k = 0; k < j; k++) {
                is2[k] = 0;
            }
            for (int k = 0; k < j; k++) {
                for (int l = k + 1; l < j; l++)
                    if (stageContos[is[k]].dist != stageContos[is[l]].dist) {
                        if (stageContos[is[k]].dist < stageContos[is[l]].dist) {
                            is2[k]++;
                        } else {
                            is2[l]++;
                        }
                    } else if (l > k) {
                        is2[k]++;
                    } else {
                        is2[l]++;
                    }
            }
            for (int k = 0; k < j; k++) {
                for (int l = 0; l < j; l++)
                    if (is2[l] == k) {
                        stageContos[is[l]].d(rd);
                    }
            }
            if (u[0].enter || u[0].handb || mouses == 1) {
                recordtime = 299;
                u[0].enter = false;
                u[0].handb = false;
                mouses = 0;
            }
            for (int k = 0; k < xtGraphics.nplayers; k++) {
                if (Record.fix[k] == recordtime)
                    if (stageContos[k].dist == 0) {
                        stageContos[k].fcnt = 8;
                    } else {
                        stageContos[k].fix = true;
                    }
                if (stageContos[k].fcnt == 7 || stageContos[k].fcnt == 8) {
                    stageContos[k] = new ContO(contos[mads[k].cn], 0, 0, 0, 0);
                    Record.cntdest[k] = 0;
                }
                if (recordtime == 299) {
                    stageContos[k] = new ContO(Record.ocar[k], 0, 0, 0, 0);
                }
                Record.play(stageContos[k], mads[k], k, recordtime);
            }
            if (++recordtime == 300) {
                recordtime = 0;
                xtGraphics.fase = -6;
            } else {
                xtGraphics.replyn();
            }
            Medium.around(stageContos[0], false);
        }
        if (xtGraphics.fase == -2) {
            if (xtGraphics.multion >= 2) {
                Record.hcaught = false;
            }
            u[0].falseo(3);
            if (Record.hcaught && Record.wasted == 0 && Record.whenwasted != 229 && (CheckPoints.stage == 1 || CheckPoints.stage == 2) && xtGraphics.looped != 0) {
                Record.hcaught = false;
            }
            if (Record.hcaught) {
                rd.setColor(new Color(0, 0, 0));
                rd.fillRect(0, 0, 800, 450);
                //repaint();
            }
            if (xtGraphics.multion != 0) {
                udpmistro.UDPquit();
                xtGraphics.stopchat();
                if (cmsg.isShowing()) {
                    cmsg.setVisible(false);
                }
                cmsg.setText("");
                gsPanel.requestFocus();
            }
            if (Record.hcaught) {
                Medium.vert = Medium.random() <= 0.45;
                Medium.adv = (int) (900.0F * Medium.random());
                Medium.vxz = (int) (360.0F * Medium.random());
                recordtime = 0;
                xtGraphics.fase = -3;
                clicknowtime = 0;
                finishrecording = 0;
            } else {
                recordtime = -2;
                xtGraphics.fase = -4;
            }
        }
        if (xtGraphics.fase == -3) {
            if (recordtime == 0) {
                if (Record.wasted == 0) {
                    if (Record.whenwasted == 229) {
                        wastedpoint = 67;
                        Medium.vxz += 90;
                    } else {
                        wastedpoint = (int) (Medium.random() * 4.0F);
                        if (wastedpoint == 1 || wastedpoint == 3) {
                            wastedpoint = 69;
                        }
                        if (wastedpoint == 2 || wastedpoint == 4) {
                            wastedpoint = 30;
                        }
                    }
                } else if (Record.closefinish != 0 && finishrecording != 0) {
                    Medium.vxz += 90;
                }
                for (int j = 0; j < xtGraphics.nplayers; j++) {
                    stageContos[j] = new ContO(Record.starcar[j], 0, 0, 0, 0);
                }
            }
            Medium.d(rd);
            int j = 0;
            final int[] is = new int[10000];
            for (int k = 0; k < nob; k++)
                if (stageContos[k].dist != 0) {
                    is[j] = k;
                    j++;
                } else {
                    stageContos[k].d(rd);
                }
            final int[] is2 = new int[j];
            for (int k = 0; k < j; k++) {
                is2[k] = 0;
            }
            for (int k = 0; k < j; k++) {
                for (int l = k + 1; l < j; l++)
                    if (stageContos[is[k]].dist != stageContos[is[l]].dist) {
                        if (stageContos[is[k]].dist < stageContos[is[l]].dist) {
                            is2[k]++;
                        } else {
                            is2[l]++;
                        }
                    } else if (l > k) {
                        is2[k]++;
                    } else {
                        is2[l]++;
                    }
            }
            for (int k = 0; k < j; k++) {
                for (int l = 0; l < j; l++)
                    if (is2[l] == k) {
                        stageContos[is[l]].d(rd);
                    }
            }
            for (int k = 0; k < xtGraphics.nplayers; k++) {
                if (Record.hfix[k] == recordtime)
                    if (stageContos[k].dist == 0) {
                        stageContos[k].fcnt = 8;
                    } else {
                        stageContos[k].fix = true;
                    }
                if (stageContos[k].fcnt == 7 || stageContos[k].fcnt == 8) {
                    stageContos[k] = new ContO(contos[mads[k].cn], 0, 0, 0, 0);
                    Record.cntdest[k] = 0;
                }
                Record.playh(stageContos[k], mads[k], k, recordtime, xtGraphics.im);
            }
            if (finishrecording == 2 && recordtime == 299) {
                u[0].enter = true;
            }
            if (u[0].enter || u[0].handb) {
                xtGraphics.fase = -4;
                u[0].enter = false;
                u[0].handb = false;
                recordtime = -7;
            } else {
                xtGraphics.levelhigh(Record.wasted, Record.whenwasted, Record.closefinish, recordtime, CheckPoints.stage);
                if (recordtime == 0 || recordtime == 1 || recordtime == 2) {
                    rd.setColor(new Color(0, 0, 0));
                    rd.fillRect(0, 0, 800, 450);
                }
                if (Record.wasted != xtGraphics.im) {
                    if (Record.closefinish == 0) {
                        if (clicknowtime == 9 || clicknowtime == 11) {
                            rd.setColor(new Color(255, 255, 255));
                            rd.fillRect(0, 0, 800, 450);
                        }
                        if (clicknowtime == 0) {
                            Medium.around(stageContos[xtGraphics.im], false);
                        }
                        if (clicknowtime > 0 && clicknowtime < 20) {
                            Medium.transaround(stageContos[xtGraphics.im], stageContos[Record.wasted], clicknowtime);
                        }
                        if (clicknowtime == 20) {
                            Medium.around(stageContos[Record.wasted], false);
                        }
                        if (recordtime > Record.whenwasted && clicknowtime != 20) {
                            clicknowtime++;
                        }
                        if ((clicknowtime == 0 || clicknowtime == 20) && ++recordtime == 300) {
                            recordtime = 0;
                            clicknowtime = 0;
                            finishrecording++;
                        }
                    } else if (Record.closefinish == 1) {
                        if (clicknowtime == 0) {
                            Medium.around(stageContos[xtGraphics.im], false);
                        }
                        if (clicknowtime > 0 && clicknowtime < 20) {
                            Medium.transaround(stageContos[xtGraphics.im], stageContos[Record.wasted], clicknowtime);
                        }
                        if (clicknowtime == 20) {
                            Medium.around(stageContos[Record.wasted], false);
                        }
                        if (clicknowtime > 20 && clicknowtime < 40) {
                            Medium.transaround(stageContos[Record.wasted], stageContos[xtGraphics.im], clicknowtime - 20);
                        }
                        if (clicknowtime == 40) {
                            Medium.around(stageContos[xtGraphics.im], false);
                        }
                        if (clicknowtime > 40 && clicknowtime < 60) {
                            Medium.transaround(stageContos[xtGraphics.im], stageContos[Record.wasted], clicknowtime - 40);
                        }
                        if (clicknowtime == 60) {
                            Medium.around(stageContos[Record.wasted], false);
                        }
                        if (recordtime > 160 && clicknowtime < 20) {
                            clicknowtime++;
                        }
                        if (recordtime > 230 && clicknowtime < 40) {
                            clicknowtime++;
                        }
                        if (recordtime > 280 && clicknowtime < 60) {
                            clicknowtime++;
                        }
                        if ((clicknowtime == 0 || clicknowtime == 20 || clicknowtime == 40 || clicknowtime == 60) && ++recordtime == 300) {
                            recordtime = 0;
                            clicknowtime = 0;
                            finishrecording++;
                        }
                    } else {
                        if (clicknowtime == 0) {
                            Medium.around(stageContos[xtGraphics.im], false);
                        }
                        if (clicknowtime > 0 && clicknowtime < 20) {
                            Medium.transaround(stageContos[xtGraphics.im], stageContos[Record.wasted], clicknowtime);
                        }
                        if (clicknowtime == 20) {
                            Medium.around(stageContos[Record.wasted], false);
                        }
                        if (clicknowtime > 20 && clicknowtime < 40) {
                            Medium.transaround(stageContos[Record.wasted], stageContos[xtGraphics.im], clicknowtime - 20);
                        }
                        if (clicknowtime == 40) {
                            Medium.around(stageContos[xtGraphics.im], false);
                        }
                        if (clicknowtime > 40 && clicknowtime < 60) {
                            Medium.transaround(stageContos[xtGraphics.im], stageContos[Record.wasted], clicknowtime - 40);
                        }
                        if (clicknowtime == 60) {
                            Medium.around(stageContos[Record.wasted], false);
                        }
                        if (clicknowtime > 60 && clicknowtime < 80) {
                            Medium.transaround(stageContos[Record.wasted], stageContos[xtGraphics.im], clicknowtime - 60);
                        }
                        if (clicknowtime == 80) {
                            Medium.around(stageContos[xtGraphics.im], false);
                        }
                        if (recordtime > 90 && clicknowtime < 20) {
                            clicknowtime++;
                        }
                        if (recordtime > 160 && clicknowtime < 40) {
                            clicknowtime++;
                        }
                        if (recordtime > 230 && clicknowtime < 60) {
                            clicknowtime++;
                        }
                        if (recordtime > 280 && clicknowtime < 80) {
                            clicknowtime++;
                        }
                        if ((clicknowtime == 0 || clicknowtime == 20 || clicknowtime == 40 || clicknowtime == 60 || clicknowtime == 80) && ++recordtime == 300) {
                            recordtime = 0;
                            clicknowtime = 0;
                            finishrecording++;
                        }
                    }
                } else {
                    if (wastedpoint == 67 && (clicknowtime == 3 || clicknowtime == 31 || clicknowtime == 66)) {
                        rd.setColor(new Color(255, 255, 255));
                        rd.fillRect(0, 0, 800, 450);
                    }
                    if (wastedpoint == 69 && (clicknowtime == 3 || clicknowtime == 5 || clicknowtime == 31 || clicknowtime == 33 || clicknowtime == 66 || clicknowtime == 68)) {
                        rd.setColor(new Color(255, 255, 255));
                        rd.fillRect(0, 0, 800, 450);
                    }
                    if (wastedpoint == 30 && clicknowtime >= 1 && clicknowtime < 30)
                        if (clicknowtime % (int) (2.0F + Medium.random() * 3.0F) == 0 && !flashingscreen) {
                            rd.setColor(new Color(255, 255, 255));
                            rd.fillRect(0, 0, 800, 450);
                            flashingscreen = true;
                        } else {
                            flashingscreen = false;
                        }
                    if (recordtime > Record.whenwasted && clicknowtime != wastedpoint) {
                        clicknowtime++;
                    }
                    Medium.around(stageContos[xtGraphics.im], false);
                    if ((clicknowtime == 0 || clicknowtime == wastedpoint) && ++recordtime == 300) {
                        recordtime = 0;
                        clicknowtime = 0;
                        finishrecording++;
                    }
                }
            }
        }
        if (xtGraphics.fase == -4) {
            if (recordtime == 0) {
                xtGraphics.sendwin();
                if (xtGraphics.winner && xtGraphics.multion == 0 && xtGraphics.gmode != 0 && CheckPoints.stage != xtGraphics.nTracks && CheckPoints.stage == xtGraphics.unlocked) {
                    xtGraphics.unlocked++;
                    setcarcookie(xtGraphics.sc[0], CarDefine.names[xtGraphics.sc[0]], xtGraphics.arnp, xtGraphics.gmode, xtGraphics.unlocked);
                    xtGraphics.unlocked--;
                }
            }
            if (recordtime <= 0) {
                rd.drawImage(Images.mdness, 289, 30, null);
                rd.drawImage(Images.dude[0], 135, 10, null);
            }
            if (recordtime >= 0) {
                xtGraphics.fleximage(offImage, recordtime);
            }
            if (++recordtime == 7) {
                xtGraphics.fase = -5;
                rd.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
                rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            }
        }
        if (xtGraphics.fase == -6) {
            //repaint();
            xtGraphics.pauseimage(offImage);
            xtGraphics.fase = -7;
            mouses = 0;
        }
        if (xtGraphics.fase == -7) {
            xtGraphics.pausedgame(u[0]);
            if (recordtime != 0) {
                recordtime = 0;
            }
            xtGraphics.ctachm(xm, ym, mouses, u[0]);
            if (mouses == 2) {
                mouses = 0;
            }
            if (mouses == 1) {
                mouses = 2;
            }
        }
        if (xtGraphics.fase == -8) {
            xtGraphics.cantreply();
            if (++recordtime == 150 || u[0].enter || u[0].handb || mouses == 1) {
                xtGraphics.fase = -7;
                mouses = 0;
                u[0].enter = false;
                u[0].handb = false;
            }
        }
        if (lostfcs && xtGraphics.fase == 7001)
            if (fcscnt == 0) {
                if (u[0].chatup == 0) {
                    gsPanel.requestFocus();
                }
                fcscnt = 10;
            } else {
                fcscnt--;
            }
        if (xtGraphics.im > -1 && xtGraphics.im < 8) {
            int j = 0;
            if (xtGraphics.multion == 2 || xtGraphics.multion == 3) {
                j = xtGraphics.im;
                u[j].mutem = u[0].mutem;
                u[j].mutes = u[0].mutes;
            }
            if (xtGraphics.fase==0) {
                for (int i = 0; i < xtGraphics.nplayers; i++) {
                    xtGraphics.playsounds(i, mads[i], u[i], stageContos[0], stageContos[i]);
                }
            }
        }
        date = new Date();
        final long l = date.getTime();
        if (xtGraphics.fase == 0 || xtGraphics.fase == -1 || xtGraphics.fase == -3 || xtGraphics.fase == 7001) {
            if (!bool3) {
                f2 = f;
                if (f2 < 30.0F) {
                    f2 = 30.0F;
                }
                bool3 = true;
                i5 = 0;
            }
            if (i5 == 10) {
                float f = (i4 + udpmistro.freg - (l - l1)) / 20.0F;
                if (f > 40.0F) {
                    f = 40.0F;
                }
                if (f < -40.0F) {
                    f = -40.0F;
                }
                f2 += f;
                if (f2 < 5.0F) {
                    f2 = 5.0F;
                }
                Medium.adjstfade(f2, f, xtGraphics.starcnt, gsPanel);
                l1 = l;
                i5 = 0;
            } else {
                i5++;
            }
        } else {
            if (bool3) {
                f = f2;
                bool3 = false;
                i5 = 0;
            }
            if (i5 == 10) {
                if (l - l1 < 400L) {
                    f2 += 3.5;
                } else {
                    f2 -= 3.5;
                    if (f2 < 5.0F) {
                        f2 = 5.0F;
                    }
                }
                l1 = l;
                i5 = 0;
            } else {
                i5++;
            }
        }
        if (exwist) {
            trash();
        }

    }

    static void setcarcookie(final int i, final String string, final float[] fs, final int gamemode, final int is) {
        try {
            final File file = new File("" + Madness.fpath + "data/user.data");
            final String[] lines = {
                    "", "", "", "", ""
            };
            if (file.exists()) {
                final BufferedReader bufferedreader = new BufferedReader(new FileReader(file));
                String line;
                for (int j = 0; (line = bufferedreader.readLine()) != null && j < 5; j++) {
                    lines[j] = line;
                }
                bufferedreader.close();
            }
            if (gamemode == 0) {
                lines[1] = "lastcar(" + i + "," + (int) (fs[0] * 100.0F) + "," + (int) (fs[1] * 100.0F) + "," + (int) (fs[2] * 100.0F) + "," + (int) (fs[3] * 100.0F) + "," + (int) (fs[4] * 100.0F) + "," + (int) (fs[5] * 100.0F) + "," + string + ")";
            }
            if (gamemode == 1 || gamemode == 2) {
                lines[2] = "saved(" + i + "," + is + ")";
            }
            //if (i191 == 2)
            //	strings[3] = "" + ("NFM2(") + (i) + (")")
            //			;
            lines[4] = "graphics(" + moto + "," + Madness.anti + ")";
            final BufferedWriter bufferedwriter = new BufferedWriter(new FileWriter(file));
            for (int j = 0; j < 5; j++) {
                bufferedwriter.write(lines[j]);
                bufferedwriter.newLine();
            }
            bufferedwriter.close();
        } catch (final Exception ignored) {

        }
    }

    static void setloggedcookie() {
        try {
            final File file = new File("" + Madness.fpath + "data/user.data");
            final String[] lines = {
                    "", "", "", "", ""
            };
            if (file.exists()) {
                final BufferedReader bufferedreader = new BufferedReader(new FileReader(file));
                String line;
                for (int i = 0; (line = bufferedreader.readLine()) != null && i < 5; i++) {
                    lines[i] = line;
                }
                bufferedreader.close();
            }
            if (keplo.getState()) {
                lines[0] = "lastuser(" + tnick.getText() + "," + tpass.getText() + ")";
            } else {
                lines[0] = "lastuser(" + tnick.getText() + ")";
            }
            final BufferedWriter bufferedwriter = new BufferedWriter(new FileWriter(file));
            for (int i = 0; i < 5; i++) {
                bufferedwriter.write(lines[i]);
                bufferedwriter.newLine();
            }
            bufferedwriter.close();
        } catch (final Exception ignored) {

        }
    }

    static private void setupini() {
        Madness.inisetup = true;
        try {
            final File file = new File("" + Madness.fpath + "Madness.ini");
            if (file.exists()) {
                final String[] liness = new String[40];
                int i = 0;
                final BufferedReader bufferedreader = new BufferedReader(new FileReader(file));
                String line;
                for (; (line = bufferedreader.readLine()) != null && i < 40; i++) {
                    liness[i] = line;
                    if (liness[i].startsWith("Class Path"))
                        if (liness[i].contains("madapps.jar")) {
                            liness[i] = "Class Path=\\data\\madapps.jar;";
                        } else {
                            liness[i] = "Class Path=\\data\\madapp.jar;";
                        }
                    if (liness[i].startsWith("JRE Path")) {
                        liness[i] = "JRE Path=data\\jre\\";
                    }
                }
                bufferedreader.close();
                final BufferedWriter bufferedwriter = new BufferedWriter(new FileWriter(file));
                for (int j = 0; j < i; j++) {
                    bufferedwriter.write(liness[j]);
                    bufferedwriter.newLine();
                }
                bufferedwriter.close();
            }
        } catch (final Exception ignored) {

        }
        Madness.inisetup = false;
    }

    static private void sizescreen(final int x, final int y) {
        if (x > gsPanel.getWidth() / 2 - 230 && x < gsPanel.getWidth() / 2 - 68 && y > 21 && y < 39 || onbar) {
            reqmult = (x - (gsPanel.getWidth() / 2 - 222)) / 141.0F;
            if (reqmult < 0.1) {
                reqmult = 0.0F;
            }
            if (reqmult > 1.0F) {
                reqmult = 1.0F;
            }
            onbar = true;
            showsize = 100;
        }
    }

    /*-@Override
    static public void start() {
    	if (gamer == null)
    		gamer = new Thread(this);
    	gamer.start();
    }

    @Override
    static public void stop() {
    	if (exwist && gamer != null) {
    		System.gc();
    		gamer.interrupt();
    		gamer = null;
    	}
    	exwist = true;
    }*/

    /*@Override
    static public void update(final Graphics graphics) {
    	paint(graphics);
    }*/

    @Override
    public void keyTyped(final KeyEvent e) {
    }

    @Override
    public void keyPressed(final KeyEvent e) {
        if (!exwist) {
            //115 114 99
            if (e.getKeyCode() == KeyEvent.VK_UP) {
                u[0].up = true;
            }
            if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                u[0].down = true;
            }
            if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                u[0].right = true;
            }
            if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                u[0].left = true;
            }
            if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                u[0].handb = true;
            }
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                u[0].enter = true;
            }
            if (e.getKeyCode() == KeyEvent.VK_Z) {
                u[0].lookback = -1;
            }
            if (e.getKeyCode() == KeyEvent.VK_X) {
                u[0].lookback = 1;
            }
            if (e.getKeyCode() == KeyEvent.VK_M)
                u[0].mutem = !u[0].mutem;
            if (e.getKeyCode() == KeyEvent.VK_N)
                u[0].mutes = !u[0].mutes;
            if (e.getKeyCode() == KeyEvent.VK_A)
                u[0].arrace = !u[0].arrace;
            if (e.getKeyCode() == KeyEvent.VK_S)
                u[0].radar = !u[0].radar;
            if (e.getKeyCode() == KeyEvent.VK_V) {
                view++;
                if (view == 3) {
                    view = 0;
                }
            }
        }
    }

    @Override
    public void keyReleased(final KeyEvent e) {
        if (!exwist) {
            if (u[0].multion < 2) {
                if (e.getKeyCode() == KeyEvent.VK_UP) {
                    u[0].up = false;
                }
                if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    u[0].down = false;
                }
                if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                    u[0].right = false;
                }
                if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                    u[0].left = false;
                }
                if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                    u[0].handb = false;
                }
            }
            if (e.getKeyCode() == 27) {
                u[0].exit = false;
                if (Madness.fullscreen) {
                    Madness.exitfullscreen();
                }
            }
            if (e.getKeyCode() == KeyEvent.VK_X || e.getKeyCode() == KeyEvent.VK_Z) {
                u[0].lookback = 0;
            }
        }
    }

    @Override
    public void mouseDragged(final MouseEvent e) {
        final int x = e.getX();
        final int y = e.getY();
        if (!exwist && !lostfcs) {
            xm = (int) ((x - apx) / apmult);
            ym = (int) ((y - apy) / apmult);
        }
        if (!Madness.fullscreen) {
            sizescreen(x, y);
        }
    }

    @Override
    public void mouseMoved(final MouseEvent e) {
        final int x = e.getX();
        final int y = e.getY();
        if (!exwist && !lostfcs) {
            xm = (int) ((x - apx) / apmult);
            ym = (int) ((y - apy) / apmult);
        }
        if (!Madness.fullscreen) {
            if (showsize < 20) {
                showsize = 20;
            }
            if (x > 50 && x < 192 && y > 14 && y < 37) {
                if (!oncarm) {
                    oncarm = true;
                    setCursor(new Cursor(12));
                }
            } else if (oncarm) {
                oncarm = false;
                setCursor(new Cursor(0));
            }
            if (x > getWidth() - 208 && x < getWidth() - 50 && y > 14 && y < 37) {
                if (!onstgm) {
                    onstgm = true;
                    setCursor(new Cursor(12));
                }
            } else if (onstgm) {
                onstgm = false;
                setCursor(new Cursor(0));
            }
            if (x > getWidth() / 2 + 22 && x < getWidth() / 2 + 122 && y > 14 && y < 37) {
                if (!onfulls) {
                    onfulls = true;
                    setCursor(new Cursor(12));
                }
            } else if (onfulls) {
                onfulls = false;
                setCursor(new Cursor(0));
            }
        }
    }

    @Override
    public void mouseClicked(final MouseEvent e) {
    }

    @Override
    public void mousePressed(final MouseEvent e) {
        final int x = e.getX();
        final int y = e.getY();
        requestFocus();
        if (!exwist) {
            if (mouses == 0) {
                xm = (int) ((x - apx) / apmult);
                ym = (int) ((y - apy) / apmult);
                mouses = 1;
            }
            moused = true;
        }
        if (!Madness.fullscreen) {
            sizescreen(x, y);
        }
    }

    @Override
    public void mouseReleased(final MouseEvent e) {
        final int x = e.getX();
        final int y = e.getY();
        if (!exwist) {
            if (mouses == 11) {
                xm = (int) ((x - apx) / apmult);
                ym = (int) ((y - apy) / apmult);
                mouses = -1;
            }
            moused = false;
        }
        if (!Madness.fullscreen) {
            if (x > getWidth() / 2 - 55 && x < getWidth() / 2 + 7 && y > 21 && y < 38 && !onbar) {
                if (smooth == 1) {
                    smooth = 0;
                } else {
                    smooth = 1;
                }
                showsize = 60;
            }
            if (x > getWidth() / 2 + 133 && x < getWidth() / 2 + 231 && y > 7 && y < 24 && !onbar) {
                if (Madness.anti == 0) {
                    Madness.anti = 1;
                } else {
                    Madness.anti = 0;
                }
                showsize = 60;
            }
            if (x > getWidth() / 2 + 133 && x < getWidth() / 2 + 231 && y > 24 && y < 41 && !onbar) {
                if (moto == 0) {
                    moto = 1;
                    
                    // create a new triple buffer
                    makeTriBuffer();
                } else {
                    moto = 0;
                    
                    // dispose of the triple buffer
                    tg.dispose();
                    tribuffer.flush();
                }
                showsize = 60;
            }
            if (onfulls) {
                Madness.gofullscreen();
            }
            if (oncarm) {
                Madness.carmaker();
            }
            if (onstgm) {
                Madness.stagemaker();
            }
            onbar = false;
        }
    }

    static private void makeTriBuffer() {
        tribuffer = new BufferedImage(800, 450, BufferedImage.TYPE_INT_ARGB);
        if (tribuffer != null) {
            tg = tribuffer.createGraphics();
        } else {
            throw new IllegalAccessError("failed to create TriBuffer image");
        }
    }

    @Override
    public void mouseEntered(final MouseEvent e) {
    }

    @Override
    public void mouseExited(final MouseEvent e) {
    }

    @Override
    public void focusGained(final FocusEvent e) {
        if (!exwist && lostfcs) {
            lostfcs = false;
        }
    }

    @Override
    public void focusLost(final FocusEvent e) {
        if (!exwist && !lostfcs) {
            lostfcs = true;
            fcscnt = 10;
            if (u[0] != null) {
                if (u[0].multion == 0) {
                    u[0].falseo(1);
                } else if (u[0].chatup == 0) {
                    requestFocus();
                }
                setCursor(new Cursor(0));
            }
        }
    }

}
//package nfm.open;
/* Mad - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.Color;

class Mad {
    boolean btab = false;
    int capcnt = 0;
    boolean capsized = false;
    private final boolean[] caught = new boolean[8];
    Stat stat;
    int clear = 0;
    int cn = 0;
    int cntdest = 0;
    private int cntouch = 0;
    private boolean colidim = false;
    private final int[][] crank = new int[4][4];
    int cxz = 0;
    private int dcnt = 0;
    float dcomp = 0.0F;
    boolean dest = false;
    private final boolean[] dominate = new boolean[8];
    private final float drag = 0.5F;
    private int fixes = -1;
    private int focus = -1;
    private float forca = 0.0F;
    boolean ftab = false;
    private int fxz = 0;
    boolean gtouch = false;
    int hitmag = 0;
    int im = 0;
    int lastcolido = 0;
    float lcomp = 0.0F;
    private final int[][] lcrank = new int[4][4];
    int loop = 0;
    private int lxz = 0;
    int missedcp = 0;
    boolean mtouch = false;
    int mxz = 0;
    private int nbsq = 0;
    boolean newcar = false;
    int newedcar = 0;
    int nlaps = 0;
    private int nmlt = 1;
    boolean nofocus = false;
    int outshakedam = 0;
    int pcleared = 0;
    boolean pd = false;
    boolean pl = false;
    private int pmlt = 1;
    int point = 0;
    float power = 75.0F;
    float powerup = 0.0F;
    boolean pr = false;
    boolean pu = false;
    boolean pushed = false;
    int pxy = 0;
    int pzy = 0;
    float rcomp = 0.0F;
    private int rpdcatch = 0;
    boolean rtab = false;
    final float[] scx = new float[4];
    final float[] scy = new float[4];
    final float[] scz = new float[4];
    int shakedam = 0;
    int skid = 0;
    float speed = 0.0F;
    int squash = 0;
    private int srfcnt = 0;
    boolean surfer = false;
    private float tilt = 0.0F;
    int travxy = 0;
    int travxz = 0;
    int travzy = 0;
    int trcnt = 0;
    int txz = 0;
    float ucomp = 0.0F;
    boolean wtouch = false;
    private int xtpower = 0;

    Mad(final Stat stat, final int i) {
        this.stat = stat;
        im = i;
    }

    public void setStat(final Stat stat) {
        this.stat = stat;
    }

    void colide(final ContO conto, final Mad mad118, final ContO conto119) {
        final float[] fs = new float[4];
        final float[] fs120 = new float[4];
        final float[] fs121 = new float[4];
        final float[] fs122 = new float[4];
        final float[] fs123 = new float[4];
        final float[] fs124 = new float[4];
        for (int i = 0; i < 4; i++) {
            fs[i] = conto.x + conto.keyx[i];
            if (capsized) {
                fs120[i] = conto.y + stat.flipy + squash;
            } else {
                fs120[i] = conto.y + conto.grat;
            }
            fs121[i] = conto.z + conto.keyz[i];
            fs122[i] = conto119.x + conto119.keyx[i];
            if (capsized) {
                fs123[i] = conto119.y + mad118.stat.flipy + mad118.squash;
            } else {
                fs123[i] = conto119.y + conto119.grat;
            }
            fs124[i] = conto119.z + conto119.keyz[i];
        }
        rot(fs, fs120, conto.x, conto.y, conto.xy, 4);
        rot(fs120, fs121, conto.y, conto.z, conto.zy, 4);
        rot(fs, fs121, conto.x, conto.z, conto.xz, 4);
        rot(fs122, fs123, conto119.x, conto119.y, conto119.xy, 4);
        rot(fs123, fs124, conto119.y, conto119.z, conto119.zy, 4);
        rot(fs122, fs124, conto119.x, conto119.z, conto119.xz, 4);
        if (rpy(conto.x, conto119.x, conto.y, conto119.y, conto.z, conto119.z) < (conto.maxR * conto.maxR + conto119.maxR * conto119.maxR) * 1.5) {
            if (!caught[mad118.im] && (speed != 0.0F || mad118.speed != 0.0F)) {
                if (Math.abs(power * speed * stat.moment) != Math.abs(mad118.power * mad118.speed * mad118.stat.moment)) {
                    dominate[mad118.im] = Math.abs(power * speed * stat.moment) > Math.abs(mad118.power * mad118.speed * mad118.stat.moment);
                } else dominate[mad118.im] = stat.moment > mad118.stat.moment;
                caught[mad118.im] = true;
            }
        } else if (caught[mad118.im]) {
            caught[mad118.im] = false;
        }
        int i = 0;
        int i125 = 0;
        if (dominate[mad118.im]) {
            final int i126 = (int) (((scz[0] - mad118.scz[0] + scz[1] - mad118.scz[1] + scz[2] - mad118.scz[2] + scz[3] - mad118.scz[3]) * (scz[0] - mad118.scz[0] + scz[1] - mad118.scz[1] + scz[2] - mad118.scz[2] + scz[3] - mad118.scz[3]) + (scx[0] - mad118.scx[0] + scx[1] - mad118.scx[1] + scx[2] - mad118.scx[2] + scx[3] - mad118.scx[3]) * (scx[0] - mad118.scx[0] + scx[1] - mad118.scx[1] + scx[2] - mad118.scx[2] + scx[3] - mad118.scx[3])) / 16.0F);
            int i127 = 7000;
            float f = 1.0F;
            if (xtGraphics.multion != 0) {
                i127 = 28000;
                f = 1.27F;
            }
            for (int i128 = 0; i128 < 4; i128++) {
                for (int i129 = 0; i129 < 4; i129++)
                    if (rpy(fs[i128], fs122[i129], fs120[i128], fs123[i129], fs121[i128], fs124[i129]) < (i126 + i127) * (mad118.stat.comprad + stat.comprad)) {
                        if (Math.abs(scx[i128] * stat.moment) > Math.abs(mad118.scx[i129] * mad118.stat.moment)) {
                            float f130 = mad118.scx[i129] * stat.revpush;
                            if (f130 > 300.0F) {
                                f130 = 300.0F;
                            }
                            if (f130 < -300.0F) {
                                f130 = -300.0F;
                            }
                            float f131 = scx[i128] * stat.push;
                            if (f131 > 300.0F) {
                                f131 = 300.0F;
                            }
                            if (f131 < -300.0F) {
                                f131 = -300.0F;
                            }
                            mad118.scx[i129] += f131;
                            if (im == xtGraphics.im) {
                                mad118.colidim = true;
                            }
                            i += mad118.regx(i129, f131 * stat.moment * f, conto119);
                            if (mad118.colidim) {
                                mad118.colidim = false;
                            }
                            scx[i128] -= f130;
                            i125 += regx(i128, -f130 * stat.moment * f, conto);
                            scy[i128] -= stat.revlift;
                            if (im == xtGraphics.im) {
                                mad118.colidim = true;
                            }
                            i += mad118.regy(i129, stat.revlift * 7, conto119);
                            if (mad118.colidim) {
                                mad118.colidim = false;
                            }
                            if (Medium.random() > Medium.random()) {
                                conto119.sprk((fs[i128] + fs122[i129]) / 2.0F, (fs120[i128] + fs123[i129]) / 2.0F, (fs121[i128] + fs124[i129]) / 2.0F, (mad118.scx[i129] + scx[i128]) / 4.0F, (mad118.scy[i129] + scy[i128]) / 4.0F, (mad118.scz[i129] + scz[i128]) / 4.0F, 2);
                            }
                        }
                        if (Math.abs(scz[i128] * stat.moment) > Math.abs(mad118.scz[i129] * mad118.stat.moment)) {
                            float f132 = mad118.scz[i129] * stat.revpush;
                            if (f132 > 300.0F) {
                                f132 = 300.0F;
                            }
                            if (f132 < -300.0F) {
                                f132 = -300.0F;
                            }
                            float f133 = scz[i128] * stat.push;
                            if (f133 > 300.0F) {
                                f133 = 300.0F;
                            }
                            if (f133 < -300.0F) {
                                f133 = -300.0F;
                            }
                            mad118.scz[i129] += f133;
                            if (im == xtGraphics.im) {
                                mad118.colidim = true;
                            }
                            i += mad118.regz(i129, f133 * stat.moment * f, conto119);
                            if (mad118.colidim) {
                                mad118.colidim = false;
                            }
                            scz[i128] -= f132;
                            i125 += regz(i128, -f132 * stat.moment * f, conto);
                            scy[i128] -= stat.revlift;
                            if (im == xtGraphics.im) {
                                mad118.colidim = true;
                            }
                            i += mad118.regy(i129, stat.revlift * 7, conto119);
                            if (mad118.colidim) {
                                mad118.colidim = false;
                            }
                            if (Medium.random() > Medium.random()) {
                                conto119.sprk((fs[i128] + fs122[i129]) / 2.0F, (fs120[i128] + fs123[i129]) / 2.0F, (fs121[i128] + fs124[i129]) / 2.0F, (mad118.scx[i129] + scx[i128]) / 4.0F, (mad118.scy[i129] + scy[i128]) / 4.0F, (mad118.scz[i129] + scz[i128]) / 4.0F, 2);
                            }
                        }
                        if (im == xtGraphics.im) {
                            mad118.lastcolido = 70;
                        }
                        if (mad118.im == xtGraphics.im) {
                            lastcolido = 70;
                        }
                        mad118.scy[i129] -= stat.lift;
                    }
            }
        }
        if (xtGraphics.multion == 1) {
            if (mad118.im == xtGraphics.im && i != 0) {
                xtGraphics.dcrashes[im] += i;
            }
            if (im == xtGraphics.im && i125 != 0) {
                xtGraphics.dcrashes[mad118.im] += i125;
            }
        }
    }

    private void distruct(final ContO conto) {
        for (int i = 0; i < conto.npl; i++)
            if (conto.p[i].wz == 0 || conto.p[i].gr == -17 || conto.p[i].gr == -16) {
                conto.p[i].embos = 1;
            }
    }

    void drive(final Control control, final ContO conto) {
        int i = 1;
        int i4 = 1;
        boolean bool = false;
        boolean bool5 = false;
        boolean bool6 = false;
        capsized = false;
        int i7;
        for (i7 = Math.abs(pzy); i7 > 270; i7 -= 360) {

        }
        i7 = Math.abs(i7);
        if (i7 > 90) {
            bool = true;
        }
        boolean bool8 = false;
        int i9;
        for (i9 = Math.abs(pxy); i9 > 270; i9 -= 360) {

        }
        i9 = Math.abs(i9);
        if (i9 > 90) {
            bool8 = true;
            i4 = -1;
        }
        int i10 = conto.grat;
        if (bool) {
            if (bool8) {
                bool8 = false;
                bool5 = true;
            } else {
                bool8 = true;
                capsized = true;
            }
            i = -1;
        } else if (bool8) {
            capsized = true;
        }
        if (capsized) {
            i10 = stat.flipy + squash;
        }
        control.zyinv = bool;
        float f = 0.0F;
        float f11 = 0.0F;
        float f12 = 0.0F;
        if (mtouch) {
            loop = 0;
        }
        if (wtouch) {
            if (loop == 2 || loop == -1) {
                loop = -1;
                if (control.left) {
                    pl = true;
                }
                if (control.right) {
                    pr = true;
                }
                if (control.up) {
                    pu = true;
                }
                if (control.down) {
                    pd = true;
                }
            }
            ucomp = 0.0F;
            dcomp = 0.0F;
            lcomp = 0.0F;
            rcomp = 0.0F;
        }
        if (control.handb) {
            if (!pushed)
                if (!wtouch) {
                    if (loop == 0) {
                        loop = 1;
                    }
                } else if (gtouch) {
                    pushed = true;
                }
        } else {
            pushed = false;
        }
        if (loop == 1) {
            final float f13 = (scy[0] + scy[1] + scy[2] + scy[3]) / 4.0F;
            for (int i14 = 0; i14 < 4; i14++) {
                scy[i14] = f13;
            }
            loop = 2;
        }
        if (!dest)
            if (loop == 2) {
                if (control.up) {
                    if (ucomp == 0.0F) {
                        ucomp = 10.0F + (scy[0] + 50.0F) / 20.0F;
                        if (ucomp < 5.0F) {
                            ucomp = 5.0F;
                        }
                        if (ucomp > 10.0F) {
                            ucomp = 10.0F;
                        }
                        ucomp *= stat.airs;
                    }
                    if (ucomp < 20.0F) {
                        ucomp += 0.5 * stat.airs;
                    }
                    f = -stat.airc * Medium.sin(conto.xz) * i4;
                    f11 = stat.airc * Medium.cos(conto.xz) * i4;
                } else if (ucomp != 0.0F && ucomp > -2.0F) {
                    ucomp -= 0.5 * stat.airs;
                }
                if (control.down) {
                    if (dcomp == 0.0F) {
                        dcomp = 10.0F + (scy[0] + 50.0F) / 20.0F;
                        if (dcomp < 5.0F) {
                            dcomp = 5.0F;
                        }
                        if (dcomp > 10.0F) {
                            dcomp = 10.0F;
                        }
                        dcomp *= stat.airs;
                    }
                    if (dcomp < 20.0F) {
                        dcomp += 0.5 * stat.airs;
                    }
                    f12 = -stat.airc;
                } else if (dcomp != 0.0F && ucomp > -2.0F) {
                    dcomp -= 0.5 * stat.airs;
                }
                if (control.left) {
                    if (lcomp == 0.0F) {
                        lcomp = 5.0F;
                    }
                    if (lcomp < 20.0F) {
                        lcomp += 2.0F * stat.airs;
                    }
                    f = -stat.airc * Medium.cos(conto.xz) * i;
                    f11 = -stat.airc * Medium.sin(conto.xz) * i;
                } else if (lcomp > 0.0F) {
                    lcomp -= 2.0F * stat.airs;
                }
                if (control.right) {
                    if (rcomp == 0.0F) {
                        rcomp = 5.0F;
                    }
                    if (rcomp < 20.0F) {
                        rcomp += 2.0F * stat.airs;
                    }
                    f = stat.airc * Medium.cos(conto.xz) * i;
                    f11 = stat.airc * Medium.sin(conto.xz) * i;
                } else if (rcomp > 0.0F) {
                    rcomp -= 2.0F * stat.airs;
                }
                pzy += (dcomp - ucomp) * Medium.cos(pxy);
                if (bool) {
                    conto.xz += (dcomp - ucomp) * Medium.sin(pxy);
                } else {
                    conto.xz -= (dcomp - ucomp) * Medium.sin(pxy);
                }
                pxy += rcomp - lcomp;
            } else {
                float f15 = power;
                if (f15 < 40.0F) {
                    f15 = 40.0F;
                }
                if (control.down)
                    if (speed > 0.0F) {
                        speed -= stat.handb / 2;
                    } else {
                        int i16 = 0;
                        for (int i17 = 0; i17 < 2; i17++)
                            if (speed <= -(stat.swits[i17] / 2 + f15 * stat.swits[i17] / 196.0F)) {
                                i16++;
                            }
                        if (i16 != 2) {
                            speed -= stat.acelf[i16] / 2.0F + f15 * stat.acelf[i16] / 196.0F;
                        } else {
                            speed = -(stat.swits[1] / 2 + f15 * stat.swits[1] / 196.0F);
                        }
                    }
                if (control.up)
                    if (speed < 0.0F) {
                        speed += stat.handb;
                    } else {
                        int i18 = 0;
                        for (int i19 = 0; i19 < 3; i19++)
                            if (speed >= stat.swits[i19] / 2 + f15 * stat.swits[i19] / 196.0F) {
                                i18++;
                            }
                        if (i18 != 3) {
                            speed += stat.acelf[i18] / 2.0F + f15 * stat.acelf[i18] / 196.0F;
                        } else {
                            speed = stat.swits[2] / 2 + f15 * stat.swits[2] / 196.0F;
                        }
                    }
                if (control.handb && Math.abs(speed) > stat.handb)
                    if (speed < 0.0F) {
                        speed += stat.handb;
                    } else {
                        speed -= stat.handb;
                    }
                if (loop == -1 && conto.y < 100) {
                    if (control.left) {
                        if (!pl) {
                            if (lcomp == 0.0F) {
                                lcomp = 5.0F * stat.airs;
                            }
                            if (lcomp < 20.0F) {
                                lcomp += 2.0F * stat.airs;
                            }
                        }
                    } else {
                        if (lcomp > 0.0F) {
                            lcomp -= 2.0F * stat.airs;
                        }
                        pl = false;
                    }
                    if (control.right) {
                        if (!pr) {
                            if (rcomp == 0.0F) {
                                rcomp = 5.0F * stat.airs;
                            }
                            if (rcomp < 20.0F) {
                                rcomp += 2.0F * stat.airs;
                            }
                        }
                    } else {
                        if (rcomp > 0.0F) {
                            rcomp -= 2.0F * stat.airs;
                        }
                        pr = false;
                    }
                    if (control.up) {
                        if (!pu) {
                            if (ucomp == 0.0F) {
                                ucomp = 5.0F * stat.airs;
                            }
                            if (ucomp < 20.0F) {
                                ucomp += 2.0F * stat.airs;
                            }
                        }
                    } else {
                        if (ucomp > 0.0F) {
                            ucomp -= 2.0F * stat.airs;
                        }
                        pu = false;
                    }
                    if (control.down) {
                        if (!pd) {
                            if (dcomp == 0.0F) {
                                dcomp = 5.0F * stat.airs;
                            }
                            if (dcomp < 20.0F) {
                                dcomp += 2.0F * stat.airs;
                            }
                        }
                    } else {
                        if (dcomp > 0.0F) {
                            dcomp -= 2.0F * stat.airs;
                        }
                        pd = false;
                    }
                    pzy += (dcomp - ucomp) * Medium.cos(pxy);
                    if (bool) {
                        conto.xz += (dcomp - ucomp) * Medium.sin(pxy);
                    } else {
                        conto.xz -= (dcomp - ucomp) * Medium.sin(pxy);
                    }
                    pxy += rcomp - lcomp;
                }
            }
        float f20 = 20.0F * speed / (154.0F * stat.simag);
        if (f20 > 20.0F) {
            f20 = 20.0F;
        }
        conto.wzy -= f20;
        if (conto.wzy < -30) {
            conto.wzy += 30;
        }
        if (conto.wzy > 30) {
            conto.wzy -= 30;
        }
        if (control.right) {
            conto.wxz -= stat.turn;
            if (conto.wxz < -36) {
                conto.wxz = -36;
            }
        }
        if (control.left) {
            conto.wxz += stat.turn;
            if (conto.wxz > 36) {
                conto.wxz = 36;
            }
        }
        if (conto.wxz != 0 && !control.left && !control.right)
            if (Math.abs(speed) < 10.0F) {
                if (Math.abs(conto.wxz) == 1) {
                    conto.wxz = 0;
                }
                if (conto.wxz > 0) {
                    conto.wxz--;
                }
                if (conto.wxz < 0) {
                    conto.wxz++;
                }
            } else {
                if (Math.abs(conto.wxz) < stat.turn * 2) {
                    conto.wxz = 0;
                }
                if (conto.wxz > 0) {
                    conto.wxz -= stat.turn * 2;
                }
                if (conto.wxz < 0) {
                    conto.wxz += stat.turn * 2;
                }
            }
        int i21 = (int) (3600.0F / (speed * speed));
        if (i21 < 5) {
            i21 = 5;
        }
        if (speed < 0.0F) {
            i21 = -i21;
        }
        if (wtouch) {
            if (!capsized) {
                if (!control.handb) {
                    fxz = conto.wxz / (i21 * 3);
                } else {
                    fxz = conto.wxz / i21;
                }
                conto.xz += conto.wxz / i21;
            }
            wtouch = false;
            gtouch = false;
        } else {
            conto.xz += fxz;
        }
        if (speed > 30.0F || speed < -100.0F) {
            while (Math.abs(mxz - cxz) > 180)
                if (cxz > mxz) {
                    cxz -= 360;
                } else if (cxz < mxz) {
                    cxz += 360;
                }
            if (Math.abs(mxz - cxz) < 30) {
                cxz += (mxz - cxz) / 4.0F;
            } else {
                if (cxz > mxz) {
                    cxz -= 10;
                }
                if (cxz < mxz) {
                    cxz += 10;
                }
            }
        }
        final float[] fs = new float[4];
        final float[] fs22 = new float[4];
        final float[] fs23 = new float[4];
        for (int i24 = 0; i24 < 4; i24++) {
            fs[i24] = conto.keyx[i24] + conto.x;
            fs23[i24] = i10 + conto.y;
            fs22[i24] = conto.z + conto.keyz[i24];
            scy[i24] += 7.0F;
        }
        rot(fs, fs23, conto.x, conto.y, pxy, 4);
        rot(fs23, fs22, conto.y, conto.z, pzy, 4);
        rot(fs, fs22, conto.x, conto.z, conto.xz, 4);
        boolean bool25 = false;
        double d;
        final int i26 = (int) ((scx[0] + scx[1] + scx[2] + scx[3]) / 4.0F);
        final int i27 = (int) ((scz[0] + scz[1] + scz[2] + scz[3]) / 4.0F);
        for (int i28 = 0; i28 < 4; i28++) {
            if (scx[i28] - i26 > 200.0F) {
                scx[i28] = 200 + i26;
            }
            if (scx[i28] - i26 < -200.0F) {
                scx[i28] = i26 - 200;
            }
            if (scz[i28] - i27 > 200.0F) {
                scz[i28] = 200 + i27;
            }
            if (scz[i28] - i27 < -200.0F) {
                scz[i28] = i27 - 200;
            }
        }
        for (int i29 = 0; i29 < 4; i29++) {
            fs23[i29] += scy[i29];
            fs[i29] += (scx[0] + scx[1] + scx[2] + scx[3]) / 4.0F;
            fs22[i29] += (scz[0] + scz[1] + scz[2] + scz[3]) / 4.0F;
        }
        int i30 = (conto.x - Trackers.sx) / 3000;
        if (i30 > Trackers.ncx) {
            i30 = Trackers.ncx;
        }
        if (i30 < 0) {
            i30 = 0;
        }
        int i31 = (conto.z - Trackers.sz) / 3000;
        if (i31 > Trackers.ncz) {
            i31 = Trackers.ncz;
        }
        if (i31 < 0) {
            i31 = 0;
        }
        int i32 = 1;
        for (int i33 = 0; i33 < Trackers.sect[i30][i31].length; i33++) {
            final int i34 = Trackers.sect[i30][i31][i33];
            if (Math.abs(Trackers.zy[i34]) != 90 && Math.abs(Trackers.xy[i34]) != 90 && Math.abs(conto.x - Trackers.x[i34]) < Trackers.radx[i34] && Math.abs(conto.z - Trackers.z[i34]) < Trackers.radz[i34] && (!Trackers.decor[i34] || Medium.resdown != 2 || xtGraphics.multion != 0)) {
                i32 = Trackers.skd[i34];
            }
        }
        if (mtouch) {
            float f35 = stat.grip;
            f35 -= Math.abs(txz - conto.xz) * speed / 250.0F;
            if (control.handb) {
                f35 -= Math.abs(txz - conto.xz) * 4;
            }
            if (f35 < stat.grip) {
                if (skid != 2) {
                    skid = 1;
                }
                speed -= speed / 100.0F;
            } else if (skid == 1) {
                skid = 2;
            }
            if (i32 == 1) {
                f35 *= 0.75;
            }
            if (i32 == 2) {
                f35 *= 0.55;
            }
            int i36 = -(int) (speed * Medium.sin(conto.xz) * Medium.cos(pzy));
            int i37 = (int) (speed * Medium.cos(conto.xz) * Medium.cos(pzy));
            int i38 = -(int) (speed * Medium.sin(pzy));
            if (capsized || dest || CheckPoints.haltall) {
                i36 = 0;
                i37 = 0;
                i38 = 0;
                f35 = stat.grip / 5.0F;
                if (speed > 0.0F) {
                    speed -= 2.0F;
                } else {
                    speed += 2.0F;
                }
            }
            if (Math.abs(speed) > drag) {
                if (speed > 0.0F) {
                    speed -= drag;
                } else {
                    speed += drag;
                }
            } else {
                speed = 0.0F;
            }
            if (cn == 8 && f35 < 5.0F) {
                f35 = 5.0F;
            }
            if (f35 < 1.0F) {
                f35 = 1.0F;
            }
            float f39 = 0.0F;
            float f40 = 0.0F;
            for (int i41 = 0; i41 < 4; i41++) {
                if (Math.abs(scx[i41] - i36) > f35) {
                    if (scx[i41] < i36) {
                        scx[i41] += f35;
                    } else {
                        scx[i41] -= f35;
                    }
                } else {
                    scx[i41] = i36;
                }
                if (Math.abs(scz[i41] - i37) > f35) {
                    if (scz[i41] < i37) {
                        scz[i41] += f35;
                    } else {
                        scz[i41] -= f35;
                    }
                } else {
                    scz[i41] = i37;
                }
                if (Math.abs(scy[i41] - i38) > f35) {
                    if (scy[i41] < i38) {
                        scy[i41] += f35;
                    } else {
                        scy[i41] -= f35;
                    }
                } else {
                    scy[i41] = i38;
                }
                if (f35 < stat.grip) {
                    if (txz != conto.xz) {
                        dcnt++;
                    } else if (dcnt != 0) {
                        dcnt = 0;
                    }
                    if (dcnt > 40.0F * f35 / stat.grip || capsized) {
                        float f42 = 1.0F;
                        if (i32 != 0) {
                            f42 = 1.2F;
                        }
                        if (Medium.random() > 0.65) {
                            conto.dust(i41, fs[i41], fs23[i41], fs22[i41], (int) scx[i41], (int) scz[i41], f42 * stat.simag, (int) tilt, capsized && mtouch);
                            if (im == xtGraphics.im && !capsized) {
                                xtGraphics.skid(im, i32, (float) Math.sqrt(scx[i41] * scx[i41] + scz[i41] * scz[i41]));
                            }
                        }
                    } else {
                        if (i32 == 1 && Medium.random() > 0.8) {
                            conto.dust(i41, fs[i41], fs23[i41], fs22[i41], (int) scx[i41], (int) scz[i41], 1.1F * stat.simag, (int) tilt, capsized && mtouch);
                        }
                        if ((i32 == 2 || i32 == 3) && Medium.random() > 0.6) {
                            conto.dust(i41, fs[i41], fs23[i41], fs22[i41], (int) scx[i41], (int) scz[i41], 1.15F * stat.simag, (int) tilt, capsized && mtouch);
                        }
                    }
                } else if (dcnt != 0) {
                    dcnt -= 2;
                    if (dcnt < 0) {
                        dcnt = 0;
                    }
                }
                if (i32 == 3) {
                    final int i43 = (int) (Medium.random() * 4.0F);
                    scy[i43] = (float) (-100.0F * Medium.random() * (speed / stat.swits[2]) * (stat.bounce - 0.3));
                }
                if (i32 == 4) {
                    final int i44 = (int) (Medium.random() * 4.0F);
                    scy[i44] = (float) (-150.0F * Medium.random() * (speed / stat.swits[2]) * (stat.bounce - 0.3));
                }
                f39 += scx[i41];
                f40 += scz[i41];
            }
            txz = conto.xz;
            if (f39 > 0.0F) {
                i = -1;
            } else {
                i = 1;
            }
            d = f40 / Math.sqrt(f39 * f39 + f40 * f40);
            mxz = (int) (Math.acos(d) / 0.017453292519943295 * i);
            if (skid == 2) {
                if (!capsized) {
                    f39 /= 4.0F;
                    f40 /= 4.0F;
                    if (bool5) {
                        speed = -((float) Math.sqrt(f39 * f39 + f40 * f40) * Medium.cos(mxz - conto.xz));
                    } else {
                        speed = (float) Math.sqrt(f39 * f39 + f40 * f40) * Medium.cos(mxz - conto.xz);
                    }
                }
                skid = 0;
            }
            if (capsized && f39 == 0.0F && f40 == 0.0F) {
                i32 = 0;
            }
            mtouch = false;
            bool25 = true;
        } else if (skid != 2) {
            skid = 2;
        }
        int i45 = 0;
        final boolean[] bools = new boolean[4];
        final boolean[] bools46 = new boolean[4];
        final boolean[] bools47 = new boolean[4];
        float f48 = 0.0F;
        for (int i49 = 0; i49 < 4; i49++) {
            bools46[i49] = false;
            bools47[i49] = false;
            if (fs23[i49] > 245.0F) {
                i45++;
                wtouch = true;
                gtouch = true;
                if (!bool25 && scy[i49] != 7.0F) {
                    float f50 = scy[i49] / 333.33F;
                    if (f50 > 0.3) {
                        f50 = 0.3F;
                    }
                    if (i32 == 0) {
                        f50 += 1.1;
                    } else {
                        f50 += 1.2;
                    }
                    conto.dust(i49, fs[i49], fs23[i49], fs22[i49], (int) scx[i49], (int) scz[i49], f50 * stat.simag, 0, capsized && mtouch);
                }
                fs23[i49] = 250.0F;
                bools47[i49] = true;
                f48 += fs23[i49] - 250.0F;
                float f51 = Math.abs(Medium.sin(pxy)) + Math.abs(Medium.sin(pzy));
                f51 /= 3.0F;
                if (f51 > 0.4) {
                    f51 = 0.4F;
                }
                f51 += stat.bounce;
                if (f51 < 1.1) {
                    f51 = 1.1F;
                }
                regy(i49, Math.abs(scy[i49] * f51), conto);
                if (scy[i49] > 0.0F) {
                    scy[i49] -= Math.abs(scy[i49] * f51);
                }
                if (capsized) {
                    bools46[i49] = true;
                }
            }
            bools[i49] = false;
        }
        if (i45 != 0) {
            f48 /= i45;
            for (int i52 = 0; i52 < 4; i52++)
                if (!bools47[i52]) {
                    fs23[i52] -= f48;
                }
        }
        int i53 = 0;
        for (int i54 = 0; i54 < Trackers.sect[i30][i31].length; i54++) {
            final int i55 = Trackers.sect[i30][i31][i54];
            int i56 = 0;
            int i57 = 0;
            for (int i58 = 0; i58 < 4; i58++) {
                if (bools46[i58] && (Trackers.skd[i55] == 0 || Trackers.skd[i55] == 1) && fs[i58] > Trackers.x[i55] - Trackers.radx[i55] && fs[i58] < Trackers.x[i55] + Trackers.radx[i55] && fs22[i58] > Trackers.z[i55] - Trackers.radz[i55] && fs22[i58] < Trackers.z[i55] + Trackers.radz[i55]) {
                    conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 1);
                    if (im == xtGraphics.im) {
                        xtGraphics.gscrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                    }
                }
                if (!bools[i58] && fs[i58] > Trackers.x[i55] - Trackers.radx[i55] && fs[i58] < Trackers.x[i55] + Trackers.radx[i55] && fs22[i58] > Trackers.z[i55] - Trackers.radz[i55] && fs22[i58] < Trackers.z[i55] + Trackers.radz[i55] && fs23[i58] > Trackers.y[i55] - Trackers.rady[i55] && fs23[i58] < Trackers.y[i55] + Trackers.rady[i55] && (!Trackers.decor[i55] || Medium.resdown != 2 || xtGraphics.multion != 0)) {
                    if (Trackers.xy[i55] == 0 && Trackers.zy[i55] == 0 && Trackers.y[i55] != 250 && fs23[i58] > Trackers.y[i55] - 5) {
                        i57++;
                        wtouch = true;
                        gtouch = true;
                        if (!bool25 && scy[i58] != 7.0F) {
                            float f59 = scy[i58] / 333.33F;
                            if (f59 > 0.3) {
                                f59 = 0.3F;
                            }
                            if (i32 == 0) {
                                f59 += 1.1;
                            } else {
                                f59 += 1.2;
                            }
                            conto.dust(i58, fs[i58], fs23[i58], fs22[i58], (int) scx[i58], (int) scz[i58], f59 * stat.simag, 0, capsized && mtouch);
                        }
                        fs23[i58] = Trackers.y[i55];
                        if (capsized && (Trackers.skd[i55] == 0 || Trackers.skd[i55] == 1)) {
                            conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 1);
                            if (im == xtGraphics.im) {
                                xtGraphics.gscrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                            }
                        }
                        float f60 = Math.abs(Medium.sin(pxy)) + Math.abs(Medium.sin(pzy));
                        f60 /= 3.0F;
                        if (f60 > 0.4) {
                            f60 = 0.4F;
                        }
                        f60 += stat.bounce;
                        if (f60 < 1.1) {
                            f60 = 1.1F;
                        }
                        regy(i58, Math.abs(scy[i58] * f60), conto);
                        if (scy[i58] > 0.0F) {
                            scy[i58] -= Math.abs(scy[i58] * f60);
                        }
                        bools[i58] = true;
                    }
                    if (Trackers.zy[i55] == -90 && fs22[i58] < Trackers.z[i55] + Trackers.radz[i55] && (scz[i58] < 0.0F || Trackers.radz[i55] == 287)) {
                        for (int i61 = 0; i61 < 4; i61++)
                            if (i58 != i61 && fs22[i61] >= Trackers.z[i55] + Trackers.radz[i55]) {
                                fs22[i61] -= fs22[i58] - (Trackers.z[i55] + Trackers.radz[i55]);
                            }
                        fs22[i58] = Trackers.z[i55] + Trackers.radz[i55];
                        if (Trackers.skd[i55] != 2) {
                            crank[0][i58]++;
                        }
                        if (Trackers.skd[i55] == 5 && Medium.random() > Medium.random()) {
                            crank[0][i58]++;
                        }
                        if (crank[0][i58] > 1) {
                            conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 0);
                            if (im == xtGraphics.im) {
                                xtGraphics.scrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                            }
                        }
                        float f62 = Math.abs(Medium.cos(pxy)) + Math.abs(Medium.cos(pzy));
                        f62 /= 4.0F;
                        if (f62 > 0.3) {
                            f62 = 0.3F;
                        }
                        if (bool25) {
                            f62 = 0.0F;
                        }
                        f62 += stat.bounce - 0.2;
                        if (f62 < 1.1) {
                            f62 = 1.1F;
                        }
                        regz(i58, Math.abs(scz[i58] * f62 * Trackers.dam[i55]), conto);
                        scz[i58] += Math.abs(scz[i58] * f62);
                        skid = 2;
                        bool6 = true;
                        bools[i58] = true;
                        if (!Trackers.notwall[i55]) {
                            control.wall = i55;
                        }
                    }
                    if (Trackers.zy[i55] == 90 && fs22[i58] > Trackers.z[i55] - Trackers.radz[i55] && (scz[i58] > 0.0F || Trackers.radz[i55] == 287)) {
                        for (int i63 = 0; i63 < 4; i63++)
                            if (i58 != i63 && fs22[i63] <= Trackers.z[i55] - Trackers.radz[i55]) {
                                fs22[i63] -= fs22[i58] - (Trackers.z[i55] - Trackers.radz[i55]);
                            }
                        fs22[i58] = Trackers.z[i55] - Trackers.radz[i55];
                        if (Trackers.skd[i55] != 2) {
                            crank[1][i58]++;
                        }
                        if (Trackers.skd[i55] == 5 && Medium.random() > Medium.random()) {
                            crank[1][i58]++;
                        }
                        if (crank[1][i58] > 1) {
                            conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 0);
                            if (im == xtGraphics.im) {
                                xtGraphics.scrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                            }
                        }
                        float f64 = Math.abs(Medium.cos(pxy)) + Math.abs(Medium.cos(pzy));
                        f64 /= 4.0F;
                        if (f64 > 0.3) {
                            f64 = 0.3F;
                        }
                        if (bool25) {
                            f64 = 0.0F;
                        }
                        f64 += stat.bounce - 0.2;
                        if (f64 < 1.1) {
                            f64 = 1.1F;
                        }
                        regz(i58, -Math.abs(scz[i58] * f64 * Trackers.dam[i55]), conto);
                        scz[i58] -= Math.abs(scz[i58] * f64);
                        skid = 2;
                        bool6 = true;
                        bools[i58] = true;
                        if (!Trackers.notwall[i55]) {
                            control.wall = i55;
                        }
                    }
                    if (Trackers.xy[i55] == -90 && fs[i58] < Trackers.x[i55] + Trackers.radx[i55] && (scx[i58] < 0.0F || Trackers.radx[i55] == 287)) {
                        for (int i65 = 0; i65 < 4; i65++)
                            if (i58 != i65 && fs[i65] >= Trackers.x[i55] + Trackers.radx[i55]) {
                                fs[i65] -= fs[i58] - (Trackers.x[i55] + Trackers.radx[i55]);
                            }
                        fs[i58] = Trackers.x[i55] + Trackers.radx[i55];
                        if (Trackers.skd[i55] != 2) {
                            crank[2][i58]++;
                        }
                        if (Trackers.skd[i55] == 5 && Medium.random() > Medium.random()) {
                            crank[2][i58]++;
                        }
                        if (crank[2][i58] > 1) {
                            conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 0);
                            if (im == xtGraphics.im) {
                                xtGraphics.scrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                            }
                        }
                        float f66 = Math.abs(Medium.cos(pxy)) + Math.abs(Medium.cos(pzy));
                        f66 /= 4.0F;
                        if (f66 > 0.3) {
                            f66 = 0.3F;
                        }
                        if (bool25) {
                            f66 = 0.0F;
                        }
                        f66 += stat.bounce - 0.2;
                        if (f66 < 1.1) {
                            f66 = 1.1F;
                        }
                        regx(i58, Math.abs(scx[i58] * f66 * Trackers.dam[i55]), conto);
                        scx[i58] += Math.abs(scx[i58] * f66);
                        skid = 2;
                        bool6 = true;
                        bools[i58] = true;
                        if (!Trackers.notwall[i55]) {
                            control.wall = i55;
                        }
                    }
                    if (Trackers.xy[i55] == 90 && fs[i58] > Trackers.x[i55] - Trackers.radx[i55] && (scx[i58] > 0.0F || Trackers.radx[i55] == 287)) {
                        for (int i67 = 0; i67 < 4; i67++)
                            if (i58 != i67 && fs[i67] <= Trackers.x[i55] - Trackers.radx[i55]) {
                                fs[i67] -= fs[i58] - (Trackers.x[i55] - Trackers.radx[i55]);
                            }
                        fs[i58] = Trackers.x[i55] - Trackers.radx[i55];
                        if (Trackers.skd[i55] != 2) {
                            crank[3][i58]++;
                        }
                        if (Trackers.skd[i55] == 5 && Medium.random() > Medium.random()) {
                            crank[3][i58]++;
                        }
                        if (crank[3][i58] > 1) {
                            conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 0);
                            if (im == xtGraphics.im) {
                                xtGraphics.scrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                            }
                        }
                        float f68 = Math.abs(Medium.cos(pxy)) + Math.abs(Medium.cos(pzy));
                        f68 /= 4.0F;
                        if (f68 > 0.3) {
                            f68 = 0.3F;
                        }
                        if (bool25) {
                            f68 = 0.0F;
                        }
                        f68 += stat.bounce - 0.2;
                        if (f68 < 1.1) {
                            f68 = 1.1F;
                        }
                        regx(i58, -Math.abs(scx[i58] * f68 * Trackers.dam[i55]), conto);
                        scx[i58] -= Math.abs(scx[i58] * f68);
                        skid = 2;
                        bool6 = true;
                        bools[i58] = true;
                        if (!Trackers.notwall[i55]) {
                            control.wall = i55;
                        }
                    }
                    if (Trackers.zy[i55] != 0 && Trackers.zy[i55] != 90 && Trackers.zy[i55] != -90) {
                        final int i69 = 90 + Trackers.zy[i55];
                        float f70 = 1.0F + (50 - Math.abs(Trackers.zy[i55])) / 30.0F;
                        if (f70 < 1.0F) {
                            f70 = 1.0F;
                        }
                        final float f71 = Trackers.y[i55] + ((fs23[i58] - Trackers.y[i55]) * Medium.cos(i69) - (fs22[i58] - Trackers.z[i55]) * Medium.sin(i69));
                        float f72 = Trackers.z[i55] + ((fs23[i58] - Trackers.y[i55]) * Medium.sin(i69) + (fs22[i58] - Trackers.z[i55]) * Medium.cos(i69));
                        if (f72 > Trackers.z[i55] && f72 < Trackers.z[i55] + 200) {
                            scy[i58] -= (f72 - Trackers.z[i55]) / f70;
                            f72 = Trackers.z[i55];
                        }
                        if (f72 > Trackers.z[i55] - 30) {
                            if (Trackers.skd[i55] == 2) {
                                i56++;
                            } else {
                                i53++;
                            }
                            wtouch = true;
                            gtouch = false;
                            if (capsized && (Trackers.skd[i55] == 0 || Trackers.skd[i55] == 1)) {
                                conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 1);
                                if (im == xtGraphics.im) {
                                    xtGraphics.gscrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                                }
                            }
                            if (!bool25 && i32 != 0) {
                                final float f73 = 1.4F;
                                conto.dust(i58, fs[i58], fs23[i58], fs22[i58], (int) scx[i58], (int) scz[i58], f73 * stat.simag, 0, capsized && mtouch);
                            }
                        }
                        fs23[i58] = Trackers.y[i55] + ((f71 - Trackers.y[i55]) * Medium.cos(-i69) - (f72 - Trackers.z[i55]) * Medium.sin(-i69));
                        fs22[i58] = Trackers.z[i55] + ((f71 - Trackers.y[i55]) * Medium.sin(-i69) + (f72 - Trackers.z[i55]) * Medium.cos(-i69));
                        bools[i58] = true;
                    }
                    if (Trackers.xy[i55] != 0 && Trackers.xy[i55] != 90 && Trackers.xy[i55] != -90) {
                        final int i74 = 90 + Trackers.xy[i55];
                        float f75 = 1.0F + (50 - Math.abs(Trackers.xy[i55])) / 30.0F;
                        if (f75 < 1.0F) {
                            f75 = 1.0F;
                        }
                        final float f76 = Trackers.y[i55] + ((fs23[i58] - Trackers.y[i55]) * Medium.cos(i74) - (fs[i58] - Trackers.x[i55]) * Medium.sin(i74));
                        float f77 = Trackers.x[i55] + ((fs23[i58] - Trackers.y[i55]) * Medium.sin(i74) + (fs[i58] - Trackers.x[i55]) * Medium.cos(i74));
                        if (f77 > Trackers.x[i55] && f77 < Trackers.x[i55] + 200) {
                            scy[i58] -= (f77 - Trackers.x[i55]) / f75;
                            f77 = Trackers.x[i55];
                        }
                        if (f77 > Trackers.x[i55] - 30) {
                            if (Trackers.skd[i55] == 2) {
                                i56++;
                            } else {
                                i53++;
                            }
                            wtouch = true;
                            gtouch = false;
                            if (capsized && (Trackers.skd[i55] == 0 || Trackers.skd[i55] == 1)) {
                                conto.sprk(fs[i58], fs23[i58], fs22[i58], scx[i58], scy[i58], scz[i58], 1);
                                if (im == xtGraphics.im) {
                                    xtGraphics.gscrape(im, (int) scx[i58], (int) scy[i58], (int) scz[i58]);
                                }
                            }
                            if (!bool25 && i32 != 0) {
                                final float f78 = 1.4F;
                                conto.dust(i58, fs[i58], fs23[i58], fs22[i58], (int) scx[i58], (int) scz[i58], f78 * stat.simag, 0, capsized && mtouch);
                            }
                        }
                        fs23[i58] = Trackers.y[i55] + ((f76 - Trackers.y[i55]) * Medium.cos(-i74) - (f77 - Trackers.x[i55]) * Medium.sin(-i74));
                        fs[i58] = Trackers.x[i55] + ((f76 - Trackers.y[i55]) * Medium.sin(-i74) + (f77 - Trackers.x[i55]) * Medium.cos(-i74));
                        bools[i58] = true;
                    }
                }
            }
            if (i56 == 4) {
                mtouch = true;
            }
            if (i57 == 4) {
                i45 = 4;
            }
        }
        if (i53 == 4) {
            mtouch = true;
        }
        for (int i79 = 0; i79 < 4; i79++) {
            for (int i80 = 0; i80 < 4; i80++) {
                if (crank[i79][i80] == lcrank[i79][i80]) {
                    crank[i79][i80] = 0;
                }
                lcrank[i79][i80] = crank[i79][i80];
            }
        }
        int i81 = 0;
        int i82 = 0;
        int i83 = 0;
        int i84 = 0;
        if (scy[2] != scy[0]) {
            if (scy[2] < scy[0]) {
                i = -1;
            } else {
                i = 1;
            }
            d = Math.sqrt((fs22[0] - fs22[2]) * (fs22[0] - fs22[2]) + (fs23[0] - fs23[2]) * (fs23[0] - fs23[2]) + (fs[0] - fs[2]) * (fs[0] - fs[2])) / (Math.abs(conto.keyz[0]) + Math.abs(conto.keyz[2]));
            if (d >= 0.9998) {
                i81 = i;
            } else {
                i81 = (int) (Math.acos(d) / 0.017453292519943295 * i);
            }
        }
        if (scy[3] != scy[1]) {
            if (scy[3] < scy[1]) {
                i = -1;
            } else {
                i = 1;
            }
            d = Math.sqrt((fs22[1] - fs22[3]) * (fs22[1] - fs22[3]) + (fs23[1] - fs23[3]) * (fs23[1] - fs23[3]) + (fs[1] - fs[3]) * (fs[1] - fs[3])) / (Math.abs(conto.keyz[1]) + Math.abs(conto.keyz[3]));
            if (d >= 0.9998) {
                i82 = i;
            } else {
                i82 = (int) (Math.acos(d) / 0.017453292519943295 * i);
            }
        }
        if (scy[1] != scy[0]) {
            if (scy[1] < scy[0]) {
                i = -1;
            } else {
                i = 1;
            }
            d = Math.sqrt((fs22[0] - fs22[1]) * (fs22[0] - fs22[1]) + (fs23[0] - fs23[1]) * (fs23[0] - fs23[1]) + (fs[0] - fs[1]) * (fs[0] - fs[1])) / (Math.abs(conto.keyx[0]) + Math.abs(conto.keyx[1]));
            if (d >= 0.9998) {
                i83 = i;
            } else {
                i83 = (int) (Math.acos(d) / 0.017453292519943295 * i);
            }
        }
        if (scy[3] != scy[2]) {
            if (scy[3] < scy[2]) {
                i = -1;
            } else {
                i = 1;
            }
            d = Math.sqrt((fs22[2] - fs22[3]) * (fs22[2] - fs22[3]) + (fs23[2] - fs23[3]) * (fs23[2] - fs23[3]) + (fs[2] - fs[3]) * (fs[2] - fs[3])) / (Math.abs(conto.keyx[2]) + Math.abs(conto.keyx[3]));
            if (d >= 0.9998) {
                i84 = i;
            } else {
                i84 = (int) (Math.acos(d) / 0.017453292519943295 * i);
            }
        }
        if (bool6) {
            int i85;
            for (i85 = Math.abs(conto.xz + 45); i85 > 180; i85 -= 360) {

            }
            if (Math.abs(i85) > 90) {
                pmlt = 1;
            } else {
                pmlt = -1;
            }
            for (i85 = Math.abs(conto.xz - 45); i85 > 180; i85 -= 360) {

            }
            if (Math.abs(i85) > 90) {
                nmlt = 1;
            } else {
                nmlt = -1;
            }
        }
        conto.xz += forca * (scz[0] * nmlt - scz[1] * pmlt + scz[2] * pmlt - scz[3] * nmlt + scx[0] * pmlt + scx[1] * nmlt - scx[2] * nmlt - scx[3] * pmlt);
        if (Math.abs(i82) > Math.abs(i81)) {
            i81 = i82;
        }
        if (Math.abs(i84) > Math.abs(i83)) {
            i83 = i84;
        }
        if (!bool) {
            pzy += i81;
        } else {
            pzy -= i81;
        }
        if (!bool8) {
            pxy += i83;
        } else {
            pxy -= i83;
        }
        if (i45 == 4) {//# of touching wheels
            int i86 = 0;
            while (pzy < 360) {
                pzy += 360;
                conto.zy += 360;
            }
            while (pzy > 360) {
                pzy -= 360;
                conto.zy -= 360;
            }
            if (pzy < 190 && pzy > 170) {//player zy angle
                // rounds off the angle, capsizing the player
                pzy = 180;
                conto.zy = 180;
                i86++;
            }
            if (pzy > 350 || pzy < 10) {
                // this is the opposite, rounds off the angle but lands properly
                pzy = 0;
                conto.zy = 0;
                i86++;
            }
            while (pxy < 360) {
                pxy += 360;
                conto.xy += 360;
            }
            while (pxy > 360) {
                pxy -= 360;
                conto.xy -= 360;
            }
            if (pxy < 190 && pxy > 170) {//same as above but for xy
                pxy = 180;
                conto.xy = 180;
                i86++;
            }
            if (pxy > 350 || pxy < 10) {
                pxy = 0;
                conto.xy = 0;
                i86++;
            }
            if (i86 == 2) {
                mtouch = true;
            }
        }
        if (!mtouch && wtouch) {
            if (cntouch == 10) {
                mtouch = true;
            } else {
                cntouch++;
            }
        } else {
            cntouch = 0;
        }
        conto.y = (int) ((fs23[0] + fs23[1] + fs23[2] + fs23[3]) / 4.0F - i10 * Medium.cos(pzy) * Medium.cos(pxy) + f12);
        if (bool) {
            i = -1;
        } else {
            i = 1;
        }
        conto.x = (int) ((fs[0] - conto.keyx[0] * Medium.cos(conto.xz) + i * conto.keyz[0] * Medium.sin(conto.xz) + fs[1] - conto.keyx[1] * Medium.cos(conto.xz) + i * conto.keyz[1] * Medium.sin(conto.xz) + fs[2] - conto.keyx[2] * Medium.cos(conto.xz) + i * conto.keyz[2] * Medium.sin(conto.xz) + fs[3] - conto.keyx[3] * Medium.cos(conto.xz) + i * conto.keyz[3] * Medium.sin(conto.xz)) / 4.0F + i10 * Medium.sin(pxy) * Medium.cos(conto.xz) - i10 * Medium.sin(pzy) * Medium.sin(conto.xz) + f);
        conto.z = (int) ((fs22[0] - i * conto.keyz[0] * Medium.cos(conto.xz) - conto.keyx[0] * Medium.sin(conto.xz) + fs22[1] - i * conto.keyz[1] * Medium.cos(conto.xz) - conto.keyx[1] * Medium.sin(conto.xz) + fs22[2] - i * conto.keyz[2] * Medium.cos(conto.xz) - conto.keyx[2] * Medium.sin(conto.xz) + fs22[3] - i * conto.keyz[3] * Medium.cos(conto.xz) - conto.keyx[3] * Medium.sin(conto.xz)) / 4.0F + i10 * Medium.sin(pxy) * Medium.sin(conto.xz) - i10 * Medium.sin(pzy) * Medium.cos(conto.xz) + f11);
        if (Math.abs(speed) > 10.0F || !mtouch) {
            if (Math.abs(pxy - conto.xy) >= 4) {
                if (pxy > conto.xy) {
                    conto.xy += 2 + (pxy - conto.xy) / 2;
                } else {
                    conto.xy -= 2 + (conto.xy - pxy) / 2;
                }
            } else {
                conto.xy = pxy;
            }
            if (Math.abs(pzy - conto.zy) >= 4) {
                if (pzy > conto.zy) {
                    conto.zy += 2 + (pzy - conto.zy) / 2;
                } else {
                    conto.zy -= 2 + (conto.zy - pzy) / 2;
                }
            } else {
                conto.zy = pzy;
            }
        }
        if (wtouch && !capsized) {
            final float f87 = (float) (speed / stat.swits[2] * 14.0F * (stat.bounce - 0.4));
            if (control.left && tilt < f87 && tilt >= 0.0F) {
                tilt += 0.4;
            } else if (control.right && tilt > -f87 && tilt <= 0.0F) {
                tilt -= 0.4;
            } else if (Math.abs(tilt) > 3.0 * (stat.bounce - 0.4)) {
                if (tilt > 0.0F) {
                    tilt -= 3.0 * (stat.bounce - 0.3);
                } else {
                    tilt += 3.0 * (stat.bounce - 0.3);
                }
            } else {
                tilt = 0.0F;
            }
            conto.xy += tilt;
            if (gtouch) {
                conto.y -= tilt / 1.5;
            }
        } else if (tilt != 0.0F) {
            tilt = 0.0F;
        }
        if (wtouch && i32 == 2) {
            conto.zy += (int) ((Medium.random() * 6.0F * speed / stat.swits[2] - 3.0F * speed / stat.swits[2]) * (stat.bounce - 0.3));
            conto.xy += (int) ((Medium.random() * 6.0F * speed / stat.swits[2] - 3.0F * speed / stat.swits[2]) * (stat.bounce - 0.3));
        }
        if (wtouch && i32 == 1) {
            conto.zy += (int) ((Medium.random() * 4.0F * speed / stat.swits[2] - 2.0F * speed / stat.swits[2]) * (stat.bounce - 0.3));
            conto.xy += (int) ((Medium.random() * 4.0F * speed / stat.swits[2] - 2.0F * speed / stat.swits[2]) * (stat.bounce - 0.3));
        }
        if (hitmag >= stat.maxmag && !dest) {
            distruct(conto);
            if (cntdest == 7) {
                dest = true;
            } else {
                cntdest++;
            }
            if (cntdest == 1) {
                Record.dest[im] = 300;
            }
        }
        if (conto.dist == 0) {
            for (int i88 = 0; i88 < conto.npl; i88++) {
                if (conto.p[i88].chip != 0) {
                    conto.p[i88].chip = 0;
                }
                if (conto.p[i88].embos != 0) {
                    conto.p[i88].embos = 13;
                }
            }
        }
        int i89 = 0;
        int i90 = 0;
        int i91 = 0;
        if (nofocus) {
            i4 = 1;
        } else {
            i4 = 7;
        }
        for (int i92 = 0; i92 < CheckPoints.n; i92++) {
            if (CheckPoints.typ[i92] > 0) {
                i91++;
                if (CheckPoints.typ[i92] == 1) {
                    if (clear == i91 + nlaps * CheckPoints.nsp) {
                        i4 = 1;
                    }
                    if (Math.abs(conto.z - CheckPoints.z[i92]) < 60.0F + Math.abs(scz[0] + scz[1] + scz[2] + scz[3]) / 4.0F && Math.abs(conto.x - CheckPoints.x[i92]) < 700 && Math.abs(conto.y - CheckPoints.y[i92] + 350) < 450 && clear == i91 + nlaps * CheckPoints.nsp - 1) {
                        clear = i91 + nlaps * CheckPoints.nsp;
                        pcleared = i92;
                        focus = -1;
                    }
                }
                if (CheckPoints.typ[i92] == 2) {
                    if (clear == i91 + nlaps * CheckPoints.nsp) {
                        i4 = 1;
                    }
                    if (Math.abs(conto.x - CheckPoints.x[i92]) < 60.0F + Math.abs(scx[0] + scx[1] + scx[2] + scx[3]) / 4.0F && Math.abs(conto.z - CheckPoints.z[i92]) < 700 && Math.abs(conto.y - CheckPoints.y[i92] + 350) < 450 && clear == i91 + nlaps * CheckPoints.nsp - 1) {
                        clear = i91 + nlaps * CheckPoints.nsp;
                        pcleared = i92;
                        focus = -1;
                    }
                }
            }
            if (py(conto.x / 100, CheckPoints.x[i92] / 100, conto.z / 100, CheckPoints.z[i92] / 100) * i4 < i90 || i90 == 0) {
                i89 = i92;
                i90 = py(conto.x / 100, CheckPoints.x[i92] / 100, conto.z / 100, CheckPoints.z[i92] / 100) * i4;
            }
        }
        if (clear == i91 + nlaps * CheckPoints.nsp) {
            nlaps++;
            if (xtGraphics.multion == 1 && im == xtGraphics.im) {
                if (xtGraphics.laptime < xtGraphics.fastestlap || xtGraphics.fastestlap == 0) {
                    xtGraphics.fastestlap = xtGraphics.laptime;
                }
                xtGraphics.laptime = 0;
            }
        }
        if (im == xtGraphics.im) {
            if (xtGraphics.multion == 1 && xtGraphics.starcnt == 0) {
                xtGraphics.laptime++;
            }
            for (Medium.checkpoint = clear; Medium.checkpoint >= CheckPoints.nsp; Medium.checkpoint -= CheckPoints.nsp) {

            }
            if (clear == CheckPoints.nlaps * CheckPoints.nsp - 1) {
                Medium.lastcheck = true;
            }
            if (CheckPoints.haltall) {
                Medium.lastcheck = false;
            }
        }
        if (focus == -1) {
            if (im == xtGraphics.im) {
                i89 += 2;
            } else {
                i89++;
            }
            if (!nofocus) {
                i91 = pcleared + 1;
                if (i91 >= CheckPoints.n) {
                    i91 = 0;
                }
                while (CheckPoints.typ[i91] <= 0)
                    if (++i91 >= CheckPoints.n) {
                        i91 = 0;
                    }
                if (i89 > i91 && (clear != nlaps * CheckPoints.nsp || i89 < pcleared)) {
                    i89 = i91;
                    focus = i89;
                }
            }
            if (i89 >= CheckPoints.n) {
                i89 -= CheckPoints.n;
            }
            if (CheckPoints.typ[i89] == -3) {
                i89 = 0;
            }
            if (im == xtGraphics.im) {
                if (missedcp != -1) {
                    missedcp = -1;
                }
            } else if (missedcp != 0) {
                missedcp = 0;
            }
        } else {
            i89 = focus;
            if (im == xtGraphics.im) {
                if (missedcp == 0 && mtouch && Math.sqrt(py(conto.x / 10, CheckPoints.x[focus] / 10, conto.z / 10, CheckPoints.z[focus] / 10)) > 800.0) {
                    missedcp = 1;
                }
                if (missedcp == -2 && Math.sqrt(py(conto.x / 10, CheckPoints.x[focus] / 10, conto.z / 10, CheckPoints.z[focus] / 10)) < 400.0) {
                    missedcp = 0;
                }
                if (missedcp != 0 && mtouch && Math.sqrt(py(conto.x / 10, CheckPoints.x[focus] / 10, conto.z / 10, CheckPoints.z[focus] / 10)) < 250.0) {
                    missedcp = 68;
                }
            } else {
                missedcp = 1;
            }
            if (nofocus) {
                focus = -1;
                missedcp = 0;
            }
        }
        if (nofocus) {
            nofocus = false;
        }
        point = i89;
        if (fixes != 0) {
            if (Medium.noelec == 0) {
                for (int i93 = 0; i93 < CheckPoints.fn; i93++)
                    if (!CheckPoints.roted[i93]) {
                        if (Math.abs(conto.z - CheckPoints.fz[i93]) < 200 && py(conto.x / 100, CheckPoints.fx[i93] / 100, conto.y / 100, CheckPoints.fy[i93] / 100) < 30) {
                            if (conto.dist == 0) {
                                conto.fcnt = 8;
                            } else {
                                if (im == xtGraphics.im && !conto.fix && !xtGraphics.mutes) {
                                    xtGraphics.carfixed.play();
                                }
                                conto.fix = true;
                            }
                            Record.fix[im] = 300;
                        }
                    } else if (Math.abs(conto.x - CheckPoints.fx[i93]) < 200 && py(conto.z / 100, CheckPoints.fz[i93] / 100, conto.y / 100, CheckPoints.fy[i93] / 100) < 30) {
                        if (conto.dist == 0) {
                            conto.fcnt = 8;
                        } else {
                            if (im == xtGraphics.im && !conto.fix && !xtGraphics.mutes) {
                                xtGraphics.carfixed.play();
                            }
                            conto.fix = true;
                        }
                        Record.fix[im] = 300;
                    }
            }
        } else {
            for (int i94 = 0; i94 < CheckPoints.fn; i94++)
                if (rpy(conto.x / 100, CheckPoints.fx[i94] / 100, conto.y / 100, CheckPoints.fy[i94] / 100, conto.z / 100, CheckPoints.fz[i94] / 100) < 760) {
                    Medium.noelec = 2;
                }
        }
        if (conto.fcnt == 7 || conto.fcnt == 8) {
            squash = 0;
            nbsq = 0;
            hitmag = 0;
            cntdest = 0;
            dest = false;
            newcar = true;
            conto.fcnt = 9;
            if (fixes > 0) {
                fixes--;
            }
        }
        if (newedcar != 0) {
            newedcar--;
            if (newedcar == 10) {
                newcar = false;
            }
        }
        if (!mtouch) {
            if (trcnt != 1) {
                trcnt = 1;
                lxz = conto.xz;
            }
            if (loop == 2 || loop == -1) {
                travxy += rcomp - lcomp;
                if (Math.abs(travxy) > 135) {
                    rtab = true;
                }
                travzy += ucomp - dcomp;
                if (travzy > 135) {
                    ftab = true;
                }
                if (travzy < -135) {
                    btab = true;
                }
            }
            if (lxz != conto.xz) {
                travxz += lxz - conto.xz;
                lxz = conto.xz;
            }
            if (srfcnt < 10) {
                if (control.wall != -1) {
                    surfer = true;
                }
                srfcnt++;
            }
        } else if (!dest) {
            if (!capsized) {
                if (capcnt != 0) {
                    capcnt = 0;
                }
                if (gtouch && trcnt != 0) {
                    if (trcnt == 9) {
                        powerup = 0.0F;
                        if (Math.abs(travxy) > 90) {
                            powerup += Math.abs(travxy) / 24.0F;
                        } else if (rtab) {
                            powerup += 30.0F;
                        }
                        if (Math.abs(travzy) > 90) {
                            powerup += Math.abs(travzy) / 18.0F;
                        } else {
                            if (ftab) {
                                powerup += 40.0F;
                            }
                            if (btab) {
                                powerup += 40.0F;
                            }
                        }
                        if (Math.abs(travxz) > 90) {
                            powerup += Math.abs(travxz) / 18.0F;
                        }
                        if (surfer) {
                            powerup += 30.0F;
                        }
                        power += powerup;
                        if (im == xtGraphics.im && (int) powerup > Record.powered && Record.wasted == 0 && (powerup > 60.0F || CheckPoints.stage == 1 || CheckPoints.stage == 2)) {
                            rpdcatch = 30;
                            if (Record.hcaught) {
                                Record.powered = (int) powerup;
                            }
                            if (xtGraphics.multion == 1 && powerup > xtGraphics.beststunt) {
                                xtGraphics.beststunt = (int) powerup;
                            }
                        }
                        if (power > 98.0F) {
                            power = 98.0F;
                            if (powerup > 150.0F) {
                                xtpower = 200;
                            } else {
                                xtpower = 100;
                            }
                        }
                    }
                    if (trcnt == 10) {
                        travxy = 0;
                        travzy = 0;
                        travxz = 0;
                        ftab = false;
                        rtab = false;
                        btab = false;
                        trcnt = 0;
                        srfcnt = 0;
                        surfer = false;
                    } else {
                        trcnt++;
                    }
                }
            } else {
                if (trcnt != 0) {
                    travxy = 0;
                    travzy = 0;
                    travxz = 0;
                    ftab = false;
                    rtab = false;
                    btab = false;
                    trcnt = 0;
                    srfcnt = 0;
                    surfer = false;
                }
                if (capcnt == 0) {
                    int i95 = 0;
                    for (int i96 = 0; i96 < 4; i96++)
                        if (Math.abs(scz[i96]) < 70.0F && Math.abs(scx[i96]) < 70.0F) {
                            i95++;
                        }
                    if (i95 == 4) {
                        capcnt = 1;
                    }
                } else {
                    capcnt++;
                    if (capcnt == 30) {
                        speed = 0.0F;
                        conto.y += stat.flipy;
                        pxy += 180;
                        conto.xy += 180;
                        capcnt = 0;
                    }
                }
            }
            if (trcnt == 0 && speed != 0.0F)
                if (xtpower == 0) {
                    if (power > 0.0F) {
                        power -= power * power * power / stat.powerloss;
                    } else {
                        power = 0.0F;
                    }
                } else {
                    xtpower--;
                }
        }
        if (im == xtGraphics.im) {
            if (control.wall != -1) {
                control.wall = -1;
            }
        } else if (lastcolido != 0 && !dest) {
            lastcolido--;
        }
        if (dest) {
            if (CheckPoints.dested[im] == 0)
                if (lastcolido == 0) {
                    CheckPoints.dested[im] = 1;
                } else {
                    CheckPoints.dested[im] = 2;
                }
        } else if (CheckPoints.dested[im] != 0 && CheckPoints.dested[im] != 3) {
            CheckPoints.dested[im] = 0;
        }
        if (im == xtGraphics.im && Record.wasted == 0 && rpdcatch != 0) {
            rpdcatch--;
            if (rpdcatch == 0) {
                Record.cotchinow(im);
                if (Record.hcaught) {
                    Record.whenwasted = (int) (185.0F + Medium.random() * 20.0F);
                }
            }
        }
    }

    private int py(final int i, final int i145, final int i146, final int i147) {
        return (i - i145) * (i - i145) + (i146 - i147) * (i146 - i147);
    }

    private int regx(final int i, float f, final ContO conto) {
        int i110 = 0;
        boolean bool = true;
        if (xtGraphics.multion == 1 && xtGraphics.im != im) {
            bool = false;
        }
        if (xtGraphics.multion >= 2) {
            bool = false;
        }
        if (xtGraphics.lan && xtGraphics.multion >= 1 && xtGraphics.isbot[im]) {
            bool = true;
        }
        f *= stat.dammult;
        if (Math.abs(f) > 100.0F) {
            Record.recx(i, f, im);
            if (f > 100.0F) {
                f -= 100.0F;
            }
            if (f < -100.0F) {
                f += 100.0F;
            }
            shakedam = (int) ((Math.abs(f) + shakedam) / 2.0F);
            if (im == xtGraphics.im || colidim) {
                xtGraphics.crash(im, f, 0);
            }
            for (int i111 = 0; i111 < conto.npl; i111++) {
                float f112 = 0.0F;
                for (int i113 = 0; i113 < conto.p[i111].n; i113++)
                    if (conto.p[i111].wz == 0 && py(conto.keyx[i], conto.p[i111].ox[i113], conto.keyz[i], conto.p[i111].oz[i113]) < stat.clrad) {
                        f112 = f / 20.0F * Medium.random();
                        conto.p[i111].oz[i113] -= f112 * Medium.sin(conto.xz) * Medium.cos(conto.zy);
                        conto.p[i111].ox[i113] += f112 * Medium.cos(conto.xz) * Medium.cos(conto.xy);
                        if (bool) {
                            hitmag += Math.abs(f112);
                            i110 += Math.abs(f112);
                        }
                    }
                if (f112 != 0.0F) {
                    if (Math.abs(f112) >= 1.0F) {
                        conto.p[i111].chip = 1;
                        conto.p[i111].ctmag = f112;
                    }
                    if (!conto.p[i111].nocol && conto.p[i111].glass != 1) {
                        if (conto.p[i111].bfase > 20 && conto.p[i111].hsb[1] > 0.25) {
                            conto.p[i111].hsb[1] = 0.25F;
                        }
                        if (conto.p[i111].bfase > 25 && conto.p[i111].hsb[2] > 0.7) {
                            conto.p[i111].hsb[2] = 0.7F;
                        }
                        if (conto.p[i111].bfase > 30 && conto.p[i111].hsb[1] > 0.15) {
                            conto.p[i111].hsb[1] = 0.15F;
                        }
                        if (conto.p[i111].bfase > 35 && conto.p[i111].hsb[2] > 0.6) {
                            conto.p[i111].hsb[2] = 0.6F;
                        }
                        if (conto.p[i111].bfase > 40) {
                            conto.p[i111].hsb[0] = 0.075F;
                        }
                        if (conto.p[i111].bfase > 50 && conto.p[i111].hsb[2] > 0.5) {
                            conto.p[i111].hsb[2] = 0.5F;
                        }
                        if (conto.p[i111].bfase > 60) {
                            conto.p[i111].hsb[0] = 0.05F;
                        }
                        conto.p[i111].bfase += Math.abs(f112);
                        new Color(conto.p[i111].c[0], conto.p[i111].c[1], conto.p[i111].c[2]);
                        final Color color = Color.getHSBColor(conto.p[i111].hsb[0], conto.p[i111].hsb[1], conto.p[i111].hsb[2]);
                        conto.p[i111].c[0] = color.getRed();
                        conto.p[i111].c[1] = color.getGreen();
                        conto.p[i111].c[2] = color.getBlue();
                    }
                    if (conto.p[i111].glass == 1) {
                        conto.p[i111].gr += Math.abs(f112 * 1.5);
                    }
                }
            }
        }
        return i110;
    }

    private int regy(final int i, float f, final ContO conto) {
        int i97 = 0;
        boolean bool = true;
        if (xtGraphics.multion == 1 && xtGraphics.im != im) {
            bool = false;
        }
        if (xtGraphics.multion >= 2) {
            bool = false;
        }
        if (xtGraphics.lan && xtGraphics.multion >= 1 && xtGraphics.isbot[im]) {
            bool = true;
        }
        f *= stat.dammult;
        if (f > 100.0F) {
            Record.recy(i, f, mtouch, im);
            f -= 100.0F;
            int i98 = 0;
            int i99 = 0;
            int i100 = conto.zy;
            int i101 = conto.xy;
            for (/**/; i100 < 360; i100 += 360) {

            }
            for (/**/; i100 > 360; i100 -= 360) {

            }
            if (i100 < 210 && i100 > 150) {
                i98 = -1;
            }
            if (i100 > 330 || i100 < 30) {
                i98 = 1;
            }
            for (/**/; i101 < 360; i101 += 360) {

            }
            for (/**/; i101 > 360; i101 -= 360) {

            }
            if (i101 < 210 && i101 > 150) {
                i99 = -1;
            }
            if (i101 > 330 || i101 < 30) {
                i99 = 1;
            }
            if (i99 * i98 == 0) {
                shakedam = (int) ((Math.abs(f) + shakedam) / 2.0F);
            }
            if (im == xtGraphics.im || colidim) {
                xtGraphics.crash(im, f, i99 * i98);
            }
            if (i99 * i98 == 0 || mtouch) {
                for (int i102 = 0; i102 < conto.npl; i102++) {
                    float f103 = 0.0F;
                    for (int i104 = 0; i104 < conto.p[i102].n; i104++)
                        if (conto.p[i102].wz == 0 && py(conto.keyx[i], conto.p[i102].ox[i104], conto.keyz[i], conto.p[i102].oz[i104]) < stat.clrad) {
                            f103 = f / 20.0F * Medium.random();
                            conto.p[i102].oz[i104] += f103 * Medium.sin(i100);
                            conto.p[i102].ox[i104] -= f103 * Medium.sin(i101);
                            if (bool) {
                                hitmag += Math.abs(f103);
                                i97 += Math.abs(f103);
                            }
                        }
                    if (f103 != 0.0F) {
                        if (Math.abs(f103) >= 1.0F) {
                            conto.p[i102].chip = 1;
                            conto.p[i102].ctmag = f103;
                        }
                        if (!conto.p[i102].nocol && conto.p[i102].glass != 1) {
                            if (conto.p[i102].bfase > 20 && conto.p[i102].hsb[1] > 0.25) {
                                conto.p[i102].hsb[1] = 0.25F;
                            }
                            if (conto.p[i102].bfase > 25 && conto.p[i102].hsb[2] > 0.7) {
                                conto.p[i102].hsb[2] = 0.7F;
                            }
                            if (conto.p[i102].bfase > 30 && conto.p[i102].hsb[1] > 0.15) {
                                conto.p[i102].hsb[1] = 0.15F;
                            }
                            if (conto.p[i102].bfase > 35 && conto.p[i102].hsb[2] > 0.6) {
                                conto.p[i102].hsb[2] = 0.6F;
                            }
                            if (conto.p[i102].bfase > 40) {
                                conto.p[i102].hsb[0] = 0.075F;
                            }
                            if (conto.p[i102].bfase > 50 && conto.p[i102].hsb[2] > 0.5) {
                                conto.p[i102].hsb[2] = 0.5F;
                            }
                            if (conto.p[i102].bfase > 60) {
                                conto.p[i102].hsb[0] = 0.05F;
                            }
                            conto.p[i102].bfase += f103;
                            new Color(conto.p[i102].c[0], conto.p[i102].c[1], conto.p[i102].c[2]);
                            final Color color = Color.getHSBColor(conto.p[i102].hsb[0], conto.p[i102].hsb[1], conto.p[i102].hsb[2]);
                            conto.p[i102].c[0] = color.getRed();
                            conto.p[i102].c[1] = color.getGreen();
                            conto.p[i102].c[2] = color.getBlue();
                        }
                        if (conto.p[i102].glass == 1) {
                            conto.p[i102].gr += Math.abs(f103 * 1.5);
                        }
                    }
                }
            }
            if (i99 * i98 == -1)
                if (nbsq > 0) {
                    int i105 = 0;
                    int i106 = 1;
                    for (int i107 = 0; i107 < conto.npl; i107++) {
                        float f108 = 0.0F;
                        for (int i109 = 0; i109 < conto.p[i107].n; i109++)
                            if (conto.p[i107].wz == 0) {
                                f108 = f / 15.0F * Medium.random();
                                if ((Math.abs(conto.p[i107].oy[i109] - stat.flipy - squash) < stat.msquash * 3 || conto.p[i107].oy[i109] < stat.flipy + squash) && squash < stat.msquash) {
                                    conto.p[i107].oy[i109] += f108;
                                    i105 += f108;
                                    i106++;
                                    if (bool) {
                                        hitmag += Math.abs(f108);
                                        i97 += Math.abs(f108);
                                    }
                                }
                            }
                        if (conto.p[i107].glass == 1) {
                            conto.p[i107].gr += 5;
                        } else if (f108 != 0.0F) {
                            conto.p[i107].bfase += f108;
                        }
                        if (Math.abs(f108) >= 1.0F) {
                            conto.p[i107].chip = 1;
                            conto.p[i107].ctmag = f108;
                        }
                    }
                    squash += i105 / i106;
                    nbsq = 0;
                } else {
                    nbsq++;
                }
        }
        return i97;
    }

    private int regz(final int i, float f, final ContO conto) {
        int i114 = 0;
        boolean bool = true;
        if (xtGraphics.multion == 1 && xtGraphics.im != im) {
            bool = false;
        }
        if (xtGraphics.multion >= 2) {
            bool = false;
        }
        if (xtGraphics.lan && xtGraphics.multion >= 1 && xtGraphics.isbot[im]) {
            bool = true;
        }
        f *= stat.dammult;
        if (Math.abs(f) > 100.0F) {
            Record.recz(i, f, im);
            if (f > 100.0F) {
                f -= 100.0F;
            }
            if (f < -100.0F) {
                f += 100.0F;
            }
            shakedam = (int) ((Math.abs(f) + shakedam) / 2.0F);
            if (im == xtGraphics.im || colidim) {
                xtGraphics.crash(im, f, 0);
            }
            for (int i115 = 0; i115 < conto.npl; i115++) {
                float f116 = 0.0F;
                for (int i117 = 0; i117 < conto.p[i115].n; i117++)
                    if (conto.p[i115].wz == 0 && py(conto.keyx[i], conto.p[i115].ox[i117], conto.keyz[i], conto.p[i115].oz[i117]) < stat.clrad) {
                        f116 = f / 20.0F * Medium.random();
                        conto.p[i115].oz[i117] += f116 * Medium.cos(conto.xz) * Medium.cos(conto.zy);
                        conto.p[i115].ox[i117] += f116 * Medium.sin(conto.xz) * Medium.cos(conto.xy);
                        if (bool) {
                            hitmag += Math.abs(f116);
                            i114 += Math.abs(f116);
                        }
                    }
                if (f116 != 0.0F) {
                    if (Math.abs(f116) >= 1.0F) {
                        conto.p[i115].chip = 1;
                        conto.p[i115].ctmag = f116;
                    }
                    if (!conto.p[i115].nocol && conto.p[i115].glass != 1) {
                        if (conto.p[i115].bfase > 20 && conto.p[i115].hsb[1] > 0.25) {
                            conto.p[i115].hsb[1] = 0.25F;
                        }
                        if (conto.p[i115].bfase > 25 && conto.p[i115].hsb[2] > 0.7) {
                            conto.p[i115].hsb[2] = 0.7F;
                        }
                        if (conto.p[i115].bfase > 30 && conto.p[i115].hsb[1] > 0.15) {
                            conto.p[i115].hsb[1] = 0.15F;
                        }
                        if (conto.p[i115].bfase > 35 && conto.p[i115].hsb[2] > 0.6) {
                            conto.p[i115].hsb[2] = 0.6F;
                        }
                        if (conto.p[i115].bfase > 40) {
                            conto.p[i115].hsb[0] = 0.075F;
                        }
                        if (conto.p[i115].bfase > 50 && conto.p[i115].hsb[2] > 0.5) {
                            conto.p[i115].hsb[2] = 0.5F;
                        }
                        if (conto.p[i115].bfase > 60) {
                            conto.p[i115].hsb[0] = 0.05F;
                        }
                        conto.p[i115].bfase += Math.abs(f116);
                        new Color(conto.p[i115].c[0], conto.p[i115].c[1], conto.p[i115].c[2]);
                        final Color color = Color.getHSBColor(conto.p[i115].hsb[0], conto.p[i115].hsb[1], conto.p[i115].hsb[2]);
                        conto.p[i115].c[0] = color.getRed();
                        conto.p[i115].c[1] = color.getGreen();
                        conto.p[i115].c[2] = color.getBlue();
                    }
                    if (conto.p[i115].glass == 1) {
                        conto.p[i115].gr += Math.abs(f116 * 1.5);
                    }
                }
            }
        }
        return i114;
    }

    void reseto(final int i, final ContO conto) {
        cn = i;
        for (int i0 = 0; i0 < 8; i0++) {
            dominate[i0] = false;
            caught[i0] = false;
        }
        mxz = 0;
        cxz = 0;
        pzy = 0;
        pxy = 0;
        speed = 0.0F;
        for (int i1 = 0; i1 < 4; i1++) {
            scy[i1] = 0.0F;
            scx[i1] = 0.0F;
            scz[i1] = 0.0F;
        }
        forca = ((float) Math.sqrt(conto.keyz[0] * conto.keyz[0] + conto.keyx[0] * conto.keyx[0]) + (float) Math.sqrt(conto.keyz[1] * conto.keyz[1] + conto.keyx[1] * conto.keyx[1]) + (float) Math.sqrt(conto.keyz[2] * conto.keyz[2] + conto.keyx[2] * conto.keyx[2]) + (float) Math.sqrt(conto.keyz[3] * conto.keyz[3] + conto.keyx[3] * conto.keyx[3])) / 10000.0F * (float) (stat.bounce - 0.3);
        mtouch = false;
        wtouch = false;
        txz = 0;
        fxz = 0;
        pmlt = 1;
        nmlt = 1;
        dcnt = 0;
        skid = 0;
        pushed = false;
        gtouch = false;
        pl = false;
        pr = false;
        pd = false;
        pu = false;
        loop = 0;
        ucomp = 0.0F;
        dcomp = 0.0F;
        lcomp = 0.0F;
        rcomp = 0.0F;
        lxz = 0;
        travxy = 0;
        travzy = 0;
        travxz = 0;
        rtab = false;
        ftab = false;
        btab = false;
        powerup = 0.0F;
        xtpower = 0;
        trcnt = 0;
        capcnt = 0;
        tilt = 0.0F;
        for (int i2 = 0; i2 < 4; i2++) {
            for (int i3 = 0; i3 < 4; i3++) {
                crank[i2][i3] = 0;
                lcrank[i2][i3] = 0;
            }
        }
        pcleared = CheckPoints.pcs;
        clear = 0;
        nlaps = 0;
        focus = -1;
        missedcp = 0;
        nofocus = false;
        power = 98.0F;
        lastcolido = 0;
        CheckPoints.dested[im] = 0;
        squash = 0;
        nbsq = 0;
        hitmag = 0;
        cntdest = 0;
        dest = false;
        newcar = false;
        if (im == xtGraphics.im) {
            Medium.checkpoint = -1;
            Medium.lastcheck = false;
        }
        rpdcatch = 0;
        newedcar = 0;
        fixes = -1;
        if (CheckPoints.nfix == 1) {
            fixes = 4;
        }
        if (CheckPoints.nfix == 2) {
            fixes = 3;
        }
        if (CheckPoints.nfix == 3) {
            fixes = 2;
        }
        if (CheckPoints.nfix == 4) {
            fixes = 1;
        }
    }

    private void rot(final float[] fs, final float[] fs134, final int i, final int i135, final int i136, final int i137) {
        if (i136 != 0) {
            for (int i138 = 0; i138 < i137; i138++) {
                final float f = fs[i138];
                final float f139 = fs134[i138];
                fs[i138] = i + ((f - i) * Medium.cos(i136) - (f139 - i135) * Medium.sin(i136));
                fs134[i138] = i135 + ((f - i) * Medium.sin(i136) + (f139 - i135) * Medium.cos(i136));
            }
        }
    }

    private int rpy(final float f, final float f140, final float f141, final float f142, final float f143, final float f144) {
        return (int) ((f - f140) * (f - f140) + (f141 - f142) * (f141 - f142) + (f143 - f144) * (f143 - f144));
    }
}
//package nfm.open;
/* Madness - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.Color;
//importjava.awt.Desktop;
//importjava.awt.Dimension;
//importjava.awt.DisplayMode;
//importjava.awt.GraphicsDevice;
//importjava.awt.GraphicsEnvironment;
//importjava.awt.Panel;
//importjava.awt.Toolkit;
//importjava.awt.event.WindowAdapter;
//importjava.awt.event.WindowEvent;
//importjava.io.BufferedReader;
//importjava.io.BufferedWriter;
//importjava.io.File;
//importjava.io.FileReader;
//importjava.io.FileWriter;
//importjava.net.URI;
//importjava.util.concurrent.ThreadLocalRandom;

//importjavax.swing.JFrame;
//importjavax.swing.JOptionPane;

//importpaulscode.sound.SoundSystem;
//importpaulscode.sound.SoundSystemConfig;
//importpaulscode.sound.SoundSystemException;
//importpaulscode.sound.codecs.CodecWav;
//importpaulscode.sound.libraries.LibraryJavaSound;

public class Madness extends Panel {
    static int anti = 1;
    private static GameSparker applet;
    private static CarMaker cm;
    private static DisplayMode defdisp;
    public static String fpath = "";
    public static JFrame frame;
    static boolean fullscreen = false;
    static boolean inisetup = false;
    private static GraphicsDevice myDevice;
    /**
     *
     */
    private static final long serialVersionUID = 8881840450218558380L;
    private static StageMaker sm;
    static String testcar = "";
    static int testdrive = 0;
    static int textid = 0;

    static void carmaker() {
        /*try {
        	applet.stop();
        } catch (final Exception ex) {
        }*/
        try {
            cm.stop();
        } catch (final Exception ignored) {
        }
        try {
            sm.stop();
        } catch (final Exception ignored) {
        }
        frame.removeAll();
        try {
            Thread.sleep(400L);
        } catch (final Exception ignored) {

        }
        /*try {
        	applet.destroy();
        } catch (final Exception ex) {
        }*/
        try {
            cm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            sm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            applet = null;
        } catch (final Exception ignored) {
        }
        try {
            cm = null;
        } catch (final Exception ignored) {
        }
        try {
            sm = null;
        } catch (final Exception ignored) {
        }
        System.gc();
        System.runFinalization();
        try {
            Thread.sleep(400L);
        } catch (final Exception ignored) {

        }
        cm = new CarMaker();
        frame.add("Center", cm);
        frame.setVisible(true);
        cm.init();
        cm.start();
    }

    static void exitfullscreen() {
        frame.dispose();
        frame = new JFrame("Need for Madness");
        frame.setBackground(new Color(0, 0, 0));
        frame.setIgnoreRepaint(true);
        frame.setIconImage(Toolkit.getDefaultToolkit().createImage("" + fpath + "data/icon.gif"));
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(final WindowEvent windowevent) {
                exitsequance();
            }
        });
        frame.add("Center", applet);
        frame.setVisible(true);
        if (myDevice.isFullScreenSupported()) {
            try {
                myDevice.setDisplayMode(defdisp);
            } catch (final Exception ignored) {

            }
            if (myDevice.isDisplayChangeSupported()) {
                try {
                    myDevice.setFullScreenWindow(null);
                } catch (final Exception ignored) {

                }
            }
        }
        frame.setMinimumSize(new Dimension(930, 586));
        frame.setSize(800, 586);
        frame.setExtendedState(6);
        applet.requestFocus();
        fullscreen = false;
    }

    private static void exitsequance() {
        //if (updateon != 3)
            /*try {
            	applet.stop();
            } catch (final Exception ex) {
            }*/
        try {
            sm.stop();
        } catch (final Exception ignored) {
        }
        try {
            cm.stop();
        } catch (final Exception ignored) {
        }
        frame.removeAll();
        try {
            Thread.sleep(200L);
        } catch (final Exception ignored) {

        }
            /*try {
            	applet.destroy();
            } catch (final Exception ex) {
            }*/
        try {
            cm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            sm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            applet = null;
        } catch (final Exception ignored) {
        }
        try {
            cm = null;
        } catch (final Exception ignored) {
        }
        try {
            sm = null;
        } catch (final Exception ignored) {
        }
        System.exit(0);
    }

    static void game() {
        /*try {
        	applet.stop();
        } catch (final Exception ex) {
        }*/
        try {
            cm.stop();
        } catch (final Exception ignored) {
        }
        try {
            sm.stop();
        } catch (final Exception ignored) {
        }
        frame.removeAll();
        try {
            Thread.sleep(400L);
        } catch (final Exception ignored) {

        }
        /*try {
        	applet.destroy();
        } catch (final Exception ex) {
        }*/
        try {
            cm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            sm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            applet = null;
        } catch (final Exception ignored) {
        }
        try {
            cm = null;
        } catch (final Exception ignored) {
        }
        try {
            sm = null;
        } catch (final Exception ignored) {
        }
        System.gc();
        System.runFinalization();
        try {
            Thread.sleep(400L);
        } catch (final Exception ignored) {

        }
        applet = GameSparker.create();
        frame.add("Center", applet);
        frame.setVisible(true);
        //applet.init();
        //applet.start();
    }

    static void gofullscreen() {
        final DisplayMode[] displaymodes = myDevice.getDisplayModes();
        final String[] strings = new String[100];
        final int[] is = new int[100];
        int i = 0;
        final float f = (float) defdisp.getWidth() / (float) defdisp.getHeight();
        float f2 = -1.0F;
        int i3 = 0;
        for (int i4 = 0; i4 < displaymodes.length; i4++)
            if (displaymodes[i4].getWidth() >= 800 && displaymodes[i4].getBitDepth() >= 16 && i3 < 100) {
                if (displaymodes[i4].getWidth() < 900) {
                    float f5 = (float) displaymodes[i4].getWidth() / (float) displaymodes[i4].getHeight();
                    f5 = Math.abs(f - f5);
                    if (f5 <= f2 || f2 == -1.0F) {
                        i = i3;
                        f2 = f5;
                    }
                }
                strings[i3] = "" + displaymodes[i4].getWidth() + " x " + displaymodes[i4].getHeight() + " Resolution   -   " + displaymodes[i4].getBitDepth() + " Bits   -   " + displaymodes[i4].getRefreshRate() + " Refresh Rate";
                is[i3] = i4;
                i3++;
            }
        if (f2 != -1.0F) {
            strings[i] = strings[i] + "     <  Recommended";
        }
        try {
            final File file = new File("" + fpath + "data/fullScreen.data");
            if (file.exists()) {
                final BufferedReader bufferedreader = new BufferedReader(new FileReader(file));
                String string;
                for (boolean bool = false; (string = bufferedreader.readLine()) != null && !bool; bool = true) {
                    string = string.trim();
                    int i8;
                    try {
                        i8 = Integer.parseInt(string);
                    } catch (final Exception exception) {
                        i8 = i;
                    }
                    i = i8;
                    if (i < 0) {
                        i = 0;
                    }
                    if (i > i3 - 1) {
                        i = i3 - 1;
                    }
                }
                bufferedreader.close();
            }
        } catch (final Exception ignored) {

        }
        final String[] strings10 = new String[i3];
        System.arraycopy(strings, 0, strings10, 0, i3);
        final Object object = JOptionPane.showInputDialog(null, "Choose a screen resolution setting below and click OK to try it.\nExit Fullscreen by pressing [Esc].\n\nIMPORTANT: If the game does not display properly in Fullscreen press [Esc]      \nand try a different resolution setting below,", "Fullscreen Options", 1, null, strings10, strings10[i]);
        int i13 = -1;
        if (object != null) {
            for (int i14 = 0; i14 < i3; i14++)
                if (object.equals(strings10[i14])) {
                    i13 = is[i14];
                    i = i14;
                    break;
                }
        }
        if (i13 != -1) {
            try {
                final File file = new File("" + fpath + "data/fullScreen.data");
                final BufferedWriter bufferedwriter = new BufferedWriter(new FileWriter(file));
                bufferedwriter.write("" + i + "");
                bufferedwriter.newLine();
                bufferedwriter.close();
            } catch (final Exception ignored) {

            }
            fullscreen = true;
            frame.dispose();
            frame = new JFrame("Fullscreen Need for Madness");
            frame.setBackground(new Color(0, 0, 0));
            frame.setUndecorated(true);
            frame.setResizable(false);
            frame.setExtendedState(6);
            frame.setIgnoreRepaint(true);
            frame.add("Center", applet);
            frame.setVisible(true);
            if (myDevice.isFullScreenSupported()) {
                try {
                    myDevice.setFullScreenWindow(frame);
                } catch (final Exception ignored) {

                }
                if (myDevice.isDisplayChangeSupported()) {
                    try {
                        myDevice.setDisplayMode(displaymodes[i13]);
                    } catch (final Exception ignored) {

                    }
                }
            }
            applet.requestFocus();
        }
    }

    public static SoundSystem ss; 

    public static void main(final String[] strings) {
        
        try 
        { 
            SoundSystemConfig.addLibrary(LibraryJavaSound.class);
            SoundSystemConfig.setCodec( "wav", CodecWav.class );
        } 
        catch( SoundSystemException e ) 
        { 
            System.err.println( "error linking with the CodecWav plug-in" ); 
        } 
        ss = new SoundSystem();
        
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            ss.cleanup();
        }));
        
        System.runFinalizersOnExit(true);
        frame = new JFrame("Need for Madness");
        frame.setBackground(Color.black);
        frame.setIgnoreRepaint(true);
        setFilePath(strings);
        frame.setIconImage(Toolkit.getDefaultToolkit().createImage(fpath + "data/icon.png"));

        applet = GameSparker.create();
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(final WindowEvent windowevent) {
                exitsequance();
            }
        });
        frame.add("Center", applet);
        frame.setVisible(true);
        frame.setMinimumSize(new Dimension(930, 586));
        frame.setSize(930, 586);
        // frame.setExtendedState(6); - maximize
        final GraphicsEnvironment graphicsenvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
        myDevice = graphicsenvironment.getDefaultScreenDevice();
        defdisp = myDevice.getDisplayMode();
        try {
            Thread.sleep(1000L);
        } catch (final InterruptedException ignored) {
        }
    }

    private static void setFilePath(String[] strings) {
        fpath = "";
        boolean bool = false;
        for (final String string : strings) {
            if (!bool) {
                fpath = "" + fpath + string;
                bool = true;
            } else {
                fpath = "" + fpath + " " + string;
            }
        }
        if (!fpath.equals(""))
            if (fpath.equals("manar")) {
                fpath = "";
                try {
                    final File file = new File("data/manar.ok");
                    if (!file.exists()) {
                        final BufferedWriter bufferedwriter = new BufferedWriter(new FileWriter(file));
                        bufferedwriter.write("" + (int) (ThreadLocalRandom.current().nextDouble() * 1000.0) + "");
                        bufferedwriter.newLine();
                        bufferedwriter.close();
                    }
                } catch (final Exception ignored) {

                }
            } else {
                final File file = new File("" + fpath + "data/models.zip");
                if (!file.exists()) {
                    fpath = "";
                }
            }
    }

    static void openurl(final String string) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(string));
            } catch (final Exception ignored) {

            }
        } else {
            try {
                Runtime.getRuntime().exec("" + urlopen() + " " + string + "");
            } catch (final Exception ignored) {

            }
        }
    }

    static void stagemaker() {
        /*try {
        	applet.stop();
        } catch (final Exception ex) {
        }*/
        try {
            cm.stop();
        } catch (final Exception ignored) {
        }
        try {
            sm.stop();
        } catch (final Exception ignored) {
        }
        frame.removeAll();
        try {
            Thread.sleep(400L);
        } catch (final Exception ignored) {

        }
        /*try {
        	applet.destroy();
        } catch (final Exception ex) {
        }*/
        try {
            cm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            sm.destroy();
        } catch (final Exception ignored) {
        }
        try {
            applet = null;
        } catch (final Exception ignored) {
        }
        try {
            cm = null;
        } catch (final Exception ignored) {
        }
        try {
            sm = null;
        } catch (final Exception ignored) {
        }
        System.gc();
        System.runFinalization();
        try {
            Thread.sleep(400L);
        } catch (final Exception ignored) {

        }
        sm = new StageMaker();
        frame.add("Center", sm);
        frame.setVisible(true);
        sm.init();
        sm.start();
    }

    static String urlopen() {
        String string = "explorer";
        final String string27 = System.getProperty("os.name").toLowerCase();
        if (string27.contains("linux") || string27.contains("unix") || string27.equals("aix")) {
            string = "xdg-open";
        }
        if (string27.contains("mac")) {
            string = "open";
        }
        return string;
    }

}
//package nfm.open;
/* Medium - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.Color;
//importjava.awt.Graphics2D;
//importjava.util.Random;
//importjava.util.concurrent.ThreadLocalRandom;

public class Medium {
    //private Medium() {}
    static int adv = 500;
    static private long atrx = 0L;
    static private long atrz = 0L;
    static private int bcxz = 0;
    static private boolean[] bst = null;
    static boolean bt = false;
    static final int[] cfade = {
            255, 220, 220
    };
    static private int[] cgpx = null;
    static private int[] cgpz = null;
    static final int[] cgrnd = {
            205, 200, 200
    };
    static int checkpoint = -1;
    static private int[][][] clax = null;
    static private int[][][] clay = null;
    static private int[][][] claz = null;
    static private int[][][][] clc = null;
    static private final int[] cldd = {
            210, 210, 210, 1, -1000
    };
    static private final int[] clds = {
            210, 210, 210
    };
    static private int[] clx = null;
    static private int[] clz = null;
    static private int[] cmx = null;
    static private int cntrn = 0;
    static boolean cpflik = false;
    static final int[] cpol = {
            215, 210, 210
    };
    static final int[] crgrnd = {
            205, 200, 200
    };
    static boolean crs = false;
    static final int[] csky = {
            170, 220, 255
    };
    public static int cx = 400;
    static int cy = 225;
    static int cz = 50;
    static boolean darksky = false;
    static private final boolean[] diup = {
            false, false, false
    };
    static float elecr = 0.0F;
    static final int[] fade = {
            3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000, 16500, 18000, 19500, 21000, 22500, 24000, 25500
    };
    static int fallen = 0;
    static private float fo = 1.0F;
    static int focusPoint = 400;
    static int fogd = 7;
    static private int fvect = 200;
    static private float gofo = (float) (0.33000001311302185 + ThreadLocalRandom.current().nextDouble() * 1.34);
    static int ground = 250;
    static int h = 450;
    static int hit = 45000;
    static int ih = 0;
    static int iw = 0;
    static boolean lastcheck = false;
    static int lastmaf = 0;
    static int lightn = -1;
    static boolean lightson = false;
    static private int lilo = 217;
    static boolean loadnew = false;
    static boolean lton = false;
    static int mgen = (int) (ThreadLocalRandom.current().nextDouble() * 100000.0);
    static private int[] mrd = null;
    static private int[][][] mtc = null;
    static private int[][] mtx = null;
    static private int[][] mty = null;
    static private int[][] mtz = null;
    static int ncl = 0;
    static private int nmt = 0;
    static private int[] nmv = null;
    static private int noc = 0;
    static boolean nochekflk = false;
    static int noelec = 0;
    static int nrnd = 0;
    static int nrw = 0;
    static int nsp = 0;
    static private int nst = 0;
    static private int[][] ogpx = null;
    static private int[][] ogpz = null;
    static private final int[] ogrnd = {
            205, 200, 200
    };
    static private final int[] osky = {
            170, 220, 255
    };
    static private float[] pcv = null;
    static private int[] pmx = null;
    static int ptcnt = -10;
    static int ptr = 0;
    static private float[][] pvr = null;
    static private final int[] rand = {
            0, 0, 0
    };
    static int rescnt = 5;
    static int resdown = 0;
    static private int sgpx = 0;
    static private int sgpz = 0;
    static private final int skyline = -300;
    static final int[] snap = {
            0, 0, 0
    };
    static final int[] sprad = new int[7];
    static final int[] spx = new int[7];
    static final int[] spz = new int[7];
    static private int[][][] stc = null;
    static private int[] stx = null;
    static private int[] stz = null;
    static private final float[] tcos = new float[360];
    static private boolean td = false;
    static private final int[] texture = {
            0, 0, 0, 50
    };
    static int trk = 0;
    static private int trn = 0;
    static long trx = 0L;
    static long trz = 0L;
    static private final float[] tsin = new float[360];
    static private int[] twn = null;
    static boolean vert = false;
    static int vxz = 180;
    static int w = 800;
    static int x = 0;
    static int xz = 0;
    static int y = 0;
    static int z = 0;
    static int zy = 0;

    static {
        for (int i = 0; i < 360; i++) {
            tcos[i] = (float) Math.cos(i * 0.017453292519943295);
        }
        for (int i = 0; i < 360; i++) {
            tsin[i] = (float) Math.sin(i * 0.017453292519943295);
        }
    }

    static void addsp(final int i, final int i245, final int i246) {
        if (nsp != 7) {
            spx[nsp] = i;
            spz[nsp] = i245;
            sprad[nsp] = i246;
            nsp++;
        }
    }

    static void adjstfade(final float f, final float f271, final int i, final GameSparker gamesparker) {
        if (resdown != 2)
            if (f == 5.0F) {
                if (resdown == 0 && rescnt == 0) {
                    GameSparker.moto = 0;
                    Madness.anti = 0;
                    fade[0] = 3000;
                    fadfrom(fade[0]);
                    resdown = 1;
                    rescnt = 10;
                }
                if (resdown == 1 && rescnt == 0) {
                    resdown = 2;
                }
                if ((i == 0 || resdown == 0) && f271 <= -20.0F) {
                    rescnt--;
                }
            } else if (resdown == 0) {
                rescnt = 5;
            } else {
                rescnt = 10;
            }
    }

    static void around(final ContO conto, final boolean bool) {
        if (!bool) {
            if (!vert) {
                adv += 2;
            } else {
                adv -= 2;
            }
            if (adv > 900) {
                vert = true;
            }
            if (adv < -500) {
                vert = false;
            }
        } else {
            adv -= 14;
            if (adv < 617) {
                adv = 617;
            }
        }
        int i = 500 + adv;
        if (bool && i < 1300) {
            i = 1300;
        }
        if (i < 1000) {
            i = 1000;
        }
        y = conto.y - adv;
        if (y > 10) {
            vert = false;
        }
        x = conto.x + (int) ((conto.x - i - conto.x) * cos(vxz));
        z = conto.z + (int) ((conto.x - i - conto.x) * sin(vxz));
        if (!bool) {
            vxz += 2;
        } else {
            vxz += 4;
        }
        int i4 = 0;
        int i5 = y;
        if (i5 > 0) {
            i5 = 0;
        }
        if (conto.y - i5 - cy < 0) {
            i4 = -180;
        }
        final int i6 = (int) Math.sqrt((conto.z - z + cz) * (conto.z - z + cz) + (conto.x - x - cx) * (conto.x - x - cx));
        int i7 = (int) (90 + i4 - Math.atan((double) i6 / (double) (conto.y - i5 - cy)) / 0.017453292519943295);
        xz = -vxz + 90;
        if (bool) {
            i7 -= 15;
        }
        zy += (i7 - zy) / 10;
    }

    static void aroundtrack() {
        y = -hit;
        x = cx + (int) trx + (int) (17000.0F * cos(vxz));
        z = (int) trz + (int) (17000.0F * sin(vxz));
        if (hit > 5000) {
            if (hit == 45000) {
                fo = 1.0F;
                zy = 67;
                atrx = (CheckPoints.x[0] - trx) / 116L;
                atrz = (CheckPoints.z[0] - trz) / 116L;
                focusPoint = 400;
            }
            if (hit == 20000) {
                fallen = 500;
                fo = 1.0F;
                zy = 67;
                atrx = (CheckPoints.x[0] - trx) / 116L;
                atrz = (CheckPoints.z[0] - trz) / 116L;
                focusPoint = 400;
            }
            hit -= fallen;
            fallen += 7;
            trx += atrx;
            trz += atrz;
            if (hit < 17600) {
                zy -= 2;
            }
            if (fallen > 500) {
                fallen = 500;
            }
            if (hit <= 5000) {
                hit = 5000;
                fallen = 0;
            }
            vxz += 3;
        } else {
            focusPoint = (int) (400.0F * fo);
            if (Math.abs(fo - gofo) > 0.005) {
                if (fo < gofo) {
                    fo += 0.005F;
                } else {
                    fo -= 0.005F;
                }
            } else {
                gofo = (float) (0.3499999940395355 + ThreadLocalRandom.current().nextDouble() * 1.3);
            }
            vxz++;
            trx -= (trx - CheckPoints.x[ptr]) / 10L;
            trz -= (trz - CheckPoints.z[ptr]) / 10L;
            if (ptcnt == 7) {
                ptr++;
                if (ptr == CheckPoints.n) {
                    ptr = 0;
                    nrnd++;
                }
                ptcnt = 0;
            } else {
                ptcnt++;
            }
        }
        if (vxz > 360) {
            vxz -= 360;
        }
        xz = -vxz - 90;
        if (-y - cy < 0) {
        }
        Math.sqrt((trz - z + cz) * (trz - z + cz) + (trx - x - cx) * (trx - x - cx));
        cpflik = !cpflik;
    }

    static float cos(int i) {
        for (/**/; i >= 360; i -= 360) {

        }
        for (/**/; i < 0; i += 360) {

        }
        return tcos[i];
    }

    static void d(final Graphics2D graphics2d) {
        nsp = 0;
        if (zy > 90) {
            zy = 90;
        }
        if (zy < -90) {
            zy = -90;
        }
        if (xz > 360) {
            xz -= 360;
        }
        if (xz < 0) {
            xz += 360;
        }
        if (y > 0) {
            y = 0;
        }
        ground = 250 - y;
        final int[] is = new int[4];
        final int[] is223 = new int[4];
        int i = cgrnd[0];
        int i224 = cgrnd[1];
        int i225 = cgrnd[2];
        int i226 = crgrnd[0];
        int i227 = crgrnd[1];
        int i228 = crgrnd[2];
        int i229 = h;
        for (int i230 = 0; i230 < 16; i230++) {
            int i231 = fade[i230];
            int i232 = ground;
            if (zy != 0) {
                i232 = cy + (int) ((ground - cy) * cos(zy) - (fade[i230] - cz) * sin(zy));
                i231 = cz + (int) ((ground - cy) * sin(zy) + (fade[i230] - cz) * cos(zy));
            }
            is[0] = iw;
            is223[0] = ys(i232, i231);
            if (is223[0] < ih) {
                is223[0] = ih;
            }
            if (is223[0] > h) {
                is223[0] = h;
            }
            is[1] = iw;
            is223[1] = i229;
            is[2] = w;
            is223[2] = i229;
            is[3] = w;
            is223[3] = is223[0];
            i229 = is223[0];
            if (i230 > 0) {
                i226 = (i226 * 7 + cfade[0]) / 8;
                i227 = (i227 * 7 + cfade[1]) / 8;
                i228 = (i228 * 7 + cfade[2]) / 8;
                if (i230 < 3) {
                    i = (i * 7 + cfade[0]) / 8;
                    i224 = (i224 * 7 + cfade[1]) / 8;
                    i225 = (i225 * 7 + cfade[2]) / 8;
                } else {
                    i = i226;
                    i224 = i227;
                    i225 = i228;
                }
            }
            if (is223[0] < h && is223[1] > ih) {
                graphics2d.setColor(new Color(i, i224, i225));
                graphics2d.fillPolygon(is, is223, 4);
            }
        }
        if (lightn != -1 && lton) {
            if (lightn < 16) {
                if (lilo > lightn + 217) {
                    lilo -= 3;
                } else {
                    lightn = (int) (16.0F + 16.0F * random());
                }
            } else if (lilo < lightn + 217) {
                lilo += 7;
            } else {
                lightn = (int) (16.0F * random());
            }
            csky[0] = (int) (lilo + lilo * (snap[0] / 100.0F));
            if (csky[0] > 255) {
                csky[0] = 255;
            }
            if (csky[0] < 0) {
                csky[0] = 0;
            }
            csky[1] = (int) (lilo + lilo * (snap[1] / 100.0F));
            if (csky[1] > 255) {
                csky[1] = 255;
            }
            if (csky[1] < 0) {
                csky[1] = 0;
            }
            csky[2] = (int) (lilo + lilo * (snap[2] / 100.0F));
            if (csky[2] > 255) {
                csky[2] = 255;
            }
            if (csky[2] < 0) {
                csky[2] = 0;
            }
        }
        i = csky[0];
        i224 = csky[1];
        i225 = csky[2];
        int i233 = i;
        int i234 = i224;
        int i235 = i225;
        int i236 = cy + (int) ((skyline - 700 - cy) * cos(zy) - (7000 - cz) * sin(zy));
        final int i237 = cz + (int) ((skyline - 700 - cy) * sin(zy) + (7000 - cz) * cos(zy));
        i236 = ys(i236, i237);
        int i238 = ih;
        for (int i239 = 0; i239 < 16; i239++) {
            int i240 = fade[i239];
            int i241 = skyline;
            if (zy != 0) {
                i241 = cy + (int) ((skyline - cy) * cos(zy) - (fade[i239] - cz) * sin(zy));
                i240 = cz + (int) ((skyline - cy) * sin(zy) + (fade[i239] - cz) * cos(zy));
            }
            is[0] = iw;
            is223[0] = ys(i241, i240);
            if (is223[0] > h) {
                is223[0] = h;
            }
            if (is223[0] < ih) {
                is223[0] = ih;
            }
            is[1] = iw;
            is223[1] = i238;
            is[2] = w;
            is223[2] = i238;
            is[3] = w;
            is223[3] = is223[0];
            i238 = is223[0];
            if (i239 > 0) {
                i = (i * 7 + cfade[0]) / 8;
                i224 = (i224 * 7 + cfade[1]) / 8;
                i225 = (i225 * 7 + cfade[2]) / 8;
            }
            if (is223[1] < i236) {
                i233 = i;
                i234 = i224;
                i235 = i225;
            }
            if (is223[0] > ih && is223[1] < h) {
                graphics2d.setColor(new Color(i, i224, i225));
                graphics2d.fillPolygon(is, is223, 4);
            }
        }
        is[0] = iw;
        is223[0] = i238;
        is[1] = iw;
        is223[1] = i229;
        is[2] = w;
        is223[2] = i229;
        is[3] = w;
        is223[3] = i238;
        if (is223[0] < h && is223[1] > ih) {
            float f = (Math.abs(y) - 250.0F) / (fade[0] * 2);
            if (f < 0.0F) {
                f = 0.0F;
            }
            if (f > 1.0F) {
                f = 1.0F;
            }
            i = (int) ((i * (1.0F - f) + i226 * (1.0F + f)) / 2.0F);
            i224 = (int) ((i224 * (1.0F - f) + i227 * (1.0F + f)) / 2.0F);
            i225 = (int) ((i225 * (1.0F - f) + i228 * (1.0F + f)) / 2.0F);
            graphics2d.setColor(new Color(i, i224, i225));
            graphics2d.fillPolygon(is, is223, 4);
        }
        if (resdown != 2) {
            for (int i242 = 1; i242 < 20; i242++) {
                int i243 = 7000;
                int i244 = skyline - 700 - i242 * 70;
                if (zy != 0 && i242 != 19) {
                    i244 = cy + (int) ((skyline - 700 - i242 * 70 - cy) * cos(zy) - (7000 - cz) * sin(zy));
                    i243 = cz + (int) ((skyline - 700 - i242 * 70 - cy) * sin(zy) + (7000 - cz) * cos(zy));
                }
                is[0] = iw;
                if (i242 != 19) {
                    is223[0] = ys(i244, i243);
                    if (is223[0] > h) {
                        is223[0] = h;
                    }
                    if (is223[0] < ih) {
                        is223[0] = ih;
                    }
                } else {
                    is223[0] = ih;
                }
                is[1] = iw;
                is223[1] = i236;
                is[2] = w;
                is223[2] = i236;
                is[3] = w;
                is223[3] = is223[0];
                i236 = is223[0];
                i233 *= 0.991;
                i234 *= 0.991;
                i235 *= 0.998;
                if (is223[1] > ih && is223[0] < h) {
                    graphics2d.setColor(new Color(i233, i234, i235));
                    graphics2d.fillPolygon(is, is223, 4);
                }
            }
            if (lightson) {
                drawstars(graphics2d);
            }
            drawmountains(graphics2d);
            drawclouds(graphics2d);
        }
        groundpolys(graphics2d);
        if (noelec != 0) {
            noelec--;
        }
        if (cpflik) {
            cpflik = false;
        } else {
            cpflik = true;
            elecr = random() * 15.0F - 6.0F;
        }
    }

    static private void drawclouds(final Graphics2D graphics2d) {
        for (int i = 0; i < noc; i++) {
            final int i104 = cx + (int) ((clx[i] - x / 20 - cx) * cos(xz) - (clz[i] - z / 20 - cz) * sin(xz));
            final int i105 = cz + (int) ((clx[i] - x / 20 - cx) * sin(xz) + (clz[i] - z / 20 - cz) * cos(xz));
            final int i106 = cz + (int) ((cldd[4] - y / 20 - cy) * sin(zy) + (i105 - cz) * cos(zy));
            final int i107 = xs(i104 + cmx[i], i106);
            final int i108 = xs(i104 - cmx[i], i106);
            if (i107 > 0 && i108 < w && i106 > -cmx[i] && i107 - i108 > 20) {
                final int[][] is = new int[3][12];
                final int[][] is109 = new int[3][12];
                final int[][] is110 = new int[3][12];
                final int[] is111 = new int[12];
                final int[] is112 = new int[12];
                boolean bool116;
                for (int i120 = 0; i120 < 3; i120++) {
                    for (int i121 = 0; i121 < 12; i121++) {
                        is[i120][i121] = clax[i][i120][i121] + clx[i] - x / 20;
                        is110[i120][i121] = claz[i][i120][i121] + clz[i] - z / 20;
                        is109[i120][i121] = clay[i][i120][i121] + cldd[4] - y / 20;
                    }
                    rot(is[i120], is110[i120], cx, cz, xz, 12);
                    rot(is109[i120], is110[i120], cy, cz, zy, 12);
                }
                for (int i122 = 0; i122 < 12; i122 += 2) {
                    int i123 = 0;
                    int i124 = 0;
                    int i125 = 0;
                    int i126 = 0;
                    bool116 = true;
                    int i127 = 0;
                    int i128 = 0;
                    int i129 = 0;
                    for (int i130 = 0; i130 < 6; i130++) {
                        int i131 = 0;
                        int i132 = 1;
                        if (i130 == 0) {
                            i131 = i122;
                        }
                        if (i130 == 1) {
                            i131 = i122 + 1;
                            if (i131 >= 12) {
                                i131 -= 12;
                            }
                        }
                        if (i130 == 2) {
                            i131 = i122 + 2;
                            if (i131 >= 12) {
                                i131 -= 12;
                            }
                        }
                        if (i130 == 3) {
                            i131 = i122 + 2;
                            if (i131 >= 12) {
                                i131 -= 12;
                            }
                            i132 = 2;
                        }
                        if (i130 == 4) {
                            i131 = i122 + 1;
                            if (i131 >= 12) {
                                i131 -= 12;
                            }
                            i132 = 2;
                        }
                        if (i130 == 5) {
                            i131 = i122;
                            i132 = 2;
                        }
                        is111[i130] = xs(is[i132][i131], is110[i132][i131]);
                        is112[i130] = ys(is109[i132][i131], is110[i132][i131]);
                        i128 += is[i132][i131];
                        i127 += is109[i132][i131];
                        i129 += is110[i132][i131];
                        if (is112[i130] < 0 || is110[0][i130] < 10) {
                            i123++;
                        }
                        if (is112[i130] > h || is110[0][i130] < 10) {
                            i124++;
                        }
                        if (is111[i130] < 0 || is110[0][i130] < 10) {
                            i125++;
                        }
                        if (is111[i130] > w || is110[0][i130] < 10) {
                            i126++;
                        }
                    }
                    if (i125 == 6 || i123 == 6 || i124 == 6 || i126 == 6) {
                        bool116 = false;
                    }
                    if (bool116) {
                        i128 /= 6;
                        i127 /= 6;
                        i129 /= 6;
                        final int i133 = (int) Math.sqrt((cy - i127) * (cy - i127) + (cx - i128) * (cx - i128) + i129 * i129);
                        if (i133 < fade[7]) {
                            int i134 = clc[i][1][i122 / 2][0];
                            int i135 = clc[i][1][i122 / 2][1];
                            int i136 = clc[i][1][i122 / 2][2];
                            for (int i137 = 0; i137 < 16; i137++)
                                if (i133 > fade[i137]) {
                                    i134 = (i134 * fogd + cfade[0]) / (fogd + 1);
                                    i135 = (i135 * fogd + cfade[1]) / (fogd + 1);
                                    i136 = (i136 * fogd + cfade[2]) / (fogd + 1);
                                }
                            graphics2d.setColor(new Color(i134, i135, i136));
                            graphics2d.fillPolygon(is111, is112, 6);
                        }
                    }
                }
                for (int i138 = 0; i138 < 12; i138 += 2) {
                    int i139 = 0;
                    int i140 = 0;
                    int i141 = 0;
                    int i142 = 0;
                    bool116 = true;
                    int i143 = 0;
                    int i144 = 0;
                    int i145 = 0;
                    for (int i146 = 0; i146 < 6; i146++) {
                        int i147 = 0;
                        int i148 = 0;
                        if (i146 == 0) {
                            i147 = i138;
                        }
                        if (i146 == 1) {
                            i147 = i138 + 1;
                            if (i147 >= 12) {
                                i147 -= 12;
                            }
                        }
                        if (i146 == 2) {
                            i147 = i138 + 2;
                            if (i147 >= 12) {
                                i147 -= 12;
                            }
                        }
                        if (i146 == 3) {
                            i147 = i138 + 2;
                            if (i147 >= 12) {
                                i147 -= 12;
                            }
                            i148 = 1;
                        }
                        if (i146 == 4) {
                            i147 = i138 + 1;
                            if (i147 >= 12) {
                                i147 -= 12;
                            }
                            i148 = 1;
                        }
                        if (i146 == 5) {
                            i147 = i138;
                            i148 = 1;
                        }
                        is111[i146] = xs(is[i148][i147], is110[i148][i147]);
                        is112[i146] = ys(is109[i148][i147], is110[i148][i147]);
                        i144 += is[i148][i147];
                        i143 += is109[i148][i147];
                        i145 += is110[i148][i147];
                        if (is112[i146] < 0 || is110[0][i146] < 10) {
                            i139++;
                        }
                        if (is112[i146] > h || is110[0][i146] < 10) {
                            i140++;
                        }
                        if (is111[i146] < 0 || is110[0][i146] < 10) {
                            i141++;
                        }
                        if (is111[i146] > w || is110[0][i146] < 10) {
                            i142++;
                        }
                    }
                    if (i141 == 6 || i139 == 6 || i140 == 6 || i142 == 6) {
                        bool116 = false;
                    }
                    if (bool116) {
                        i144 /= 6;
                        i143 /= 6;
                        i145 /= 6;
                        final int i149 = (int) Math.sqrt((cy - i143) * (cy - i143) + (cx - i144) * (cx - i144) + i145 * i145);
                        if (i149 < fade[7]) {
                            int i150 = clc[i][0][i138 / 2][0];
                            int i151 = clc[i][0][i138 / 2][1];
                            int i152 = clc[i][0][i138 / 2][2];
                            for (int i153 = 0; i153 < 16; i153++)
                                if (i149 > fade[i153]) {
                                    i150 = (i150 * fogd + cfade[0]) / (fogd + 1);
                                    i151 = (i151 * fogd + cfade[1]) / (fogd + 1);
                                    i152 = (i152 * fogd + cfade[2]) / (fogd + 1);
                                }
                            graphics2d.setColor(new Color(i150, i151, i152));
                            graphics2d.fillPolygon(is111, is112, 6);
                        }
                    }
                }
                int i154 = 0;
                int i155 = 0;
                int i156 = 0;
                int i157 = 0;
                bool116 = true;
                int i158 = 0;
                int i159 = 0;
                int i160 = 0;
                for (int i161 = 0; i161 < 12; i161++) {
                    is111[i161] = xs(is[0][i161], is110[0][i161]);
                    is112[i161] = ys(is109[0][i161], is110[0][i161]);
                    i159 += is[0][i161];
                    i158 += is109[0][i161];
                    i160 += is110[0][i161];
                    if (is112[i161] < 0 || is110[0][i161] < 10) {
                        i154++;
                    }
                    if (is112[i161] > h || is110[0][i161] < 10) {
                        i155++;
                    }
                    if (is111[i161] < 0 || is110[0][i161] < 10) {
                        i156++;
                    }
                    if (is111[i161] > w || is110[0][i161] < 10) {
                        i157++;
                    }
                }
                if (i156 == 12 || i154 == 12 || i155 == 12 || i157 == 12) {
                    bool116 = false;
                }
                if (bool116) {
                    i159 /= 12;
                    i158 /= 12;
                    i160 /= 12;
                    final int i162 = (int) Math.sqrt((cy - i158) * (cy - i158) + (cx - i159) * (cx - i159) + i160 * i160);
                    if (i162 < fade[7]) {
                        int i163 = clds[0];
                        int i164 = clds[1];
                        int i165 = clds[2];
                        for (int i166 = 0; i166 < 16; i166++)
                            if (i162 > fade[i166]) {
                                i163 = (i163 * fogd + cfade[0]) / (fogd + 1);
                                i164 = (i164 * fogd + cfade[1]) / (fogd + 1);
                                i165 = (i165 * fogd + cfade[2]) / (fogd + 1);
                            }
                        graphics2d.setColor(new Color(i163, i164, i165));
                        graphics2d.fillPolygon(is111, is112, 12);
                    }
                }
            }
        }
    }

    static private void drawmountains(final Graphics2D graphics2d) {
        for (int i = 0; i < nmt; i++) {
            final int i185 = mrd[i];
            final int i186 = cx + (int) ((mtx[i185][0] - x / 30 - cx) * cos(xz) - (mtz[i185][0] - z / 30 - cz) * sin(xz));
            final int i187 = cz + (int) ((mtx[i185][0] - x / 30 - cx) * sin(xz) + (mtz[i185][0] - z / 30 - cz) * cos(xz));
            final int i188 = cz + (int) ((mty[i185][0] - y / 30 - cy) * sin(zy) + (i187 - cz) * cos(zy));
            final int i189 = cx + (int) ((mtx[i185][nmv[i185] - 1] - x / 30 - cx) * cos(xz) - (mtz[i185][nmv[i185] - 1] - z / 30 - cz) * sin(xz));
            final int i190 = cz + (int) ((mtx[i185][nmv[i185] - 1] - x / 30 - cx) * sin(xz) + (mtz[i185][nmv[i185] - 1] - z / 30 - cz) * cos(xz));
            final int i191 = cz + (int) ((mty[i185][nmv[i185] - 1] - y / 30 - cy) * sin(zy) + (i190 - cz) * cos(zy));
            if (xs(i189, i191) > 0 && xs(i186, i188) < w) {
                final int[] is = new int[nmv[i185] * 2];
                final int[] is192 = new int[nmv[i185] * 2];
                final int[] is193 = new int[nmv[i185] * 2];
                for (int i194 = 0; i194 < nmv[i185] * 2; i194++) {
                    is[i194] = mtx[i185][i194] - x / 30;
                    is192[i194] = mty[i185][i194] - y / 30;
                    is193[i194] = mtz[i185][i194] - z / 30;
                }
                final int i195 = (int) Math.sqrt(is[nmv[i185] / 4] * is[nmv[i185] / 4] + is193[nmv[i185] / 4] * is193[nmv[i185] / 4]);
                rot(is, is193, cx, cz, xz, nmv[i185] * 2);
                rot(is192, is193, cy, cz, zy, nmv[i185] * 2);
                final int[] is196 = new int[4];
                final int[] is197 = new int[4];
                boolean bool201;
                for (int i202 = 0; i202 < nmv[i185] - 1; i202++) {
                    int i203 = 0;
                    int i204 = 0;
                    int i205 = 0;
                    int i206 = 0;
                    bool201 = true;
                    for (int i207 = 0; i207 < 4; i207++) {
                        int i208 = i207 + i202;
                        if (i207 == 2) {
                            i208 = i202 + nmv[i185] + 1;
                        }
                        if (i207 == 3) {
                            i208 = i202 + nmv[i185];
                        }
                        is196[i207] = xs(is[i208], is193[i208]);
                        is197[i207] = ys(is192[i208], is193[i208]);
                        if (is197[i207] < 0 || is193[i208] < 10) {
                            i203++;
                        }
                        if (is197[i207] > h || is193[i208] < 10) {
                            i204++;
                        }
                        if (is196[i207] < 0 || is193[i208] < 10) {
                            i205++;
                        }
                        if (is196[i207] > w || is193[i208] < 10) {
                            i206++;
                        }
                    }
                    if (i205 == 4 || i203 == 4 || i204 == 4 || i206 == 4) {
                        bool201 = false;
                    }
                    if (bool201) {
                        float f = i195 / 2500.0F + (8000.0F - fade[0]) / 1000.0F - 2.0F - (Math.abs(y) - 250.0F) / 5000.0F;
                        if (f > 0.0F && f < 10.0F) {
                            if (f < 3.5) {
                                f = 3.5F;
                            }
                            final int i209 = (int) ((mtc[i185][i202][0] + cgrnd[0] + csky[0] * f + cfade[0] * f) / (2.0F + f * 2.0F));
                            final int i210 = (int) ((mtc[i185][i202][1] + cgrnd[1] + csky[1] * f + cfade[1] * f) / (2.0F + f * 2.0F));
                            final int i211 = (int) ((mtc[i185][i202][2] + cgrnd[2] + csky[2] * f + cfade[2] * f) / (2.0F + f * 2.0F));
                            graphics2d.setColor(new Color(i209, i210, i211));
                            graphics2d.fillPolygon(is196, is197, 4);
                        }
                    }
                }
            }
        }
    }

    static private void drawstars(final Graphics2D graphics2d) {
        for (int i = 0; i < nst; i++) {
            int i215 = cx + (int) (stx[i] * cos(xz) - stz[i] * sin(xz));
            final int i216 = cz + (int) (stx[i] * sin(xz) + stz[i] * cos(xz));
            int i217 = cy + (int) (-200.0F * cos(zy) - i216 * sin(zy));
            final int i218 = cz + (int) (-200.0F * sin(zy) + i216 * cos(zy));
            i215 = xs(i215, i218);
            i217 = ys(i217, i218);
            if (i215 - 1 > iw && i215 + 3 < w && i217 - 1 > ih && i217 + 3 < h) {
                if (twn[i] == 0) {
                    int i219 = (int) (3.0 * ThreadLocalRandom.current().nextDouble());
                    if (i219 >= 3) {
                        i219 = 0;
                    }
                    if (i219 <= -1) {
                        i219 = 2;
                    }
                    int i220 = i219 + 1;
                    if (ThreadLocalRandom.current().nextDouble() > ThreadLocalRandom.current().nextDouble()) {
                        i220 = i219 - 1;
                    }
                    if (i220 == 3) {
                        i220 = 0;
                    }
                    if (i220 == -1) {
                        i220 = 2;
                    }
                    for (int i221 = 0; i221 < 3; i221++) {
                        stc[i][0][i221] = 200;
                        if (i219 == i221) {
                            stc[i][0][i221] += (int) (55.0 * ThreadLocalRandom.current().nextDouble());
                        }
                        if (i220 == i221) {
                            stc[i][0][i221] += 55;
                        }
                        stc[i][0][i221] = (stc[i][0][i221] * 2 + csky[i221]) / 3;
                        stc[i][1][i221] = (stc[i][0][i221] + csky[i221]) / 2;
                    }
                    twn[i] = 3;
                } else {
                    twn[i]--;
                }
                int i222 = 0;
                if (bst[i]) {
                    i222 = 1;
                }
                graphics2d.setColor(new Color(stc[i][1][0], stc[i][1][1], stc[i][1][2]));
                graphics2d.fillRect(i215 - 1, i217, 3 + i222, 1 + i222);
                graphics2d.fillRect(i215, i217 - 1, 1 + i222, 3 + i222);
                graphics2d.setColor(new Color(stc[i][0][0], stc[i][0][1], stc[i][0][2]));
                graphics2d.fillRect(i215, i217, 1 + i222, 1 + i222);
            }
        }
    }

    static void fadfrom(int i) {
        if (i > 8000) {
            i = 8000;
        }
        for (int i270 = 1; i270 < 17; i270++) {
            fade[i270 - 1] = i / 2 * (i270 + 1);
        }
    }

    static void follow(final ContO conto, int i, final int i27) {
        zy = 10;
        int i28 = 2 + Math.abs(bcxz) / 4;
        if (i28 > 20) {
            i28 = 20;
        }
        if (i27 != 0) {
            if (i27 == 1) {
                if (bcxz < 180) {
                    bcxz += i28;
                }
                if (bcxz > 180) {
                    bcxz = 180;
                }
            }
            if (i27 == -1) {
                if (bcxz > -180) {
                    bcxz -= i28;
                }
                if (bcxz < -180) {
                    bcxz = -180;
                }
            }
        } else if (Math.abs(bcxz) > i28) {
            if (bcxz > 0) {
                bcxz -= i28;
            } else {
                bcxz += i28;
            }
        } else if (bcxz != 0) {
            bcxz = 0;
        }
        i += bcxz;
        xz = -i;
        x = conto.x - cx + (int) (-(conto.z - 800 - conto.z) * sin(i));
        z = conto.z - cz + (int) ((conto.z - 800 - conto.z) * cos(i));
        y = conto.y - 250 - cy;
    }

    static void getaround(final ContO conto) {
        if (!vert) {
            adv += 2;
        } else {
            adv -= 2;
        }
        if (adv > 1700) {
            vert = true;
        }
        if (adv < -500) {
            vert = false;
        }
        if (conto.y - adv > 10) {
            vert = false;
        }
        int i = 500 + adv;
        if (i < 1000) {
            i = 1000;
        }
        final int i8 = conto.y - adv;
        final int i9 = conto.x + (int) ((conto.x - i - conto.x) * cos(vxz));
        final int i10 = conto.z + (int) ((conto.x - i - conto.x) * sin(vxz));
        int i11 = 0;
        if (Math.abs(i8 - y) > fvect) {
            if (y < i8) {
                y += fvect;
            } else {
                y -= fvect;
            }
        } else {
            y = i8;
            i11++;
        }
        if (Math.abs(i9 - x) > fvect) {
            if (x < i9) {
                x += fvect;
            } else {
                x -= fvect;
            }
        } else {
            x = i9;
            i11++;
        }
        if (Math.abs(i10 - z) > fvect) {
            if (z < i10) {
                z += fvect;
            } else {
                z -= fvect;
            }
        } else {
            z = i10;
            i11++;
        }
        if (i11 == 3) {
            fvect = 200;
        } else {
            fvect += 2;
        }
        for (vxz += 2; vxz > 360; vxz -= 360) {

        }
        int i12 = -vxz + 90;
        int i13 = 0;
        if (conto.x - x - cx > 0) {
            i13 = 180;
        }
        int i14 = -(int) (90 + i13 + Math.atan((double) (conto.z - z) / (double) (conto.x - x - cx)) / 0.017453292519943295);
        int i15 = y;
        i13 = 0;
        if (i15 > 0) {
            i15 = 0;
        }
        if (conto.y - i15 - cy < 0) {
            i13 = -180;
        }
        final int i16 = (int) Math.sqrt((conto.z - z + cz) * (conto.z - z + cz) + (conto.x - x - cx) * (conto.x - x - cx));
        int i17 = 25;
        if (i16 != 0) {
            i17 = (int) (90 + i13 - Math.atan((double) i16 / (double) (conto.y - i15 - cy)) / 0.017453292519943295);
        }
        for (/**/; i12 < 0; i12 += 360) {

        }
        for (/**/; i12 > 360; i12 -= 360) {

        }
        for (/**/; i14 < 0; i14 += 360) {

        }
        for (/**/; i14 > 360; i14 -= 360) {

        }
        if ((Math.abs(i12 - i14) < 30 || Math.abs(i12 - i14) > 330) && i11 == 3) {
            if (Math.abs(i12 - xz) > 7 && Math.abs(i12 - xz) < 353) {
                if (Math.abs(i12 - xz) > 180) {
                    if (xz > i12) {
                        xz += 7;
                    } else {
                        xz -= 7;
                    }
                } else if (xz < i12) {
                    xz += 7;
                } else {
                    xz -= 7;
                }
            } else {
                xz = i12;
            }
        } else if (Math.abs(i14 - xz) > 6 && Math.abs(i14 - xz) < 354) {
            if (Math.abs(i14 - xz) > 180) {
                if (xz > i14) {
                    xz += 3;
                } else {
                    xz -= 3;
                }
            } else if (xz < i14) {
                xz += 3;
            } else {
                xz -= 3;
            }
        } else {
            xz = i14;
        }
        zy += (i17 - zy) / 10;
    }

    static void getfollow(final ContO conto, int i, final int i29) {
        zy = 10;
        int i30 = 2 + Math.abs(bcxz) / 4;
        if (i30 > 20) {
            i30 = 20;
        }
        if (i29 != 0) {
            if (i29 == 1) {
                if (bcxz < 180) {
                    bcxz += i30;
                }
                if (bcxz > 180) {
                    bcxz = 180;
                }
            }
            if (i29 == -1) {
                if (bcxz > -180) {
                    bcxz -= i30;
                }
                if (bcxz < -180) {
                    bcxz = -180;
                }
            }
        } else if (Math.abs(bcxz) > i30) {
            if (bcxz > 0) {
                bcxz -= i30;
            } else {
                bcxz += i30;
            }
        } else if (bcxz != 0) {
            bcxz = 0;
        }
        i += bcxz;
        xz = -i;
        final int i31 = conto.x - cx + (int) (-(conto.z - 800 - conto.z) * sin(i));
        final int i32 = conto.z - cz + (int) ((conto.z - 800 - conto.z) * cos(i));
        final int i33 = conto.y - 250 - cy;
        int i34 = 0;
        if (Math.abs(i33 - y) > fvect) {
            if (y < i33) {
                y += fvect;
            } else {
                y -= fvect;
            }
        } else {
            y = i33;
            i34++;
        }
        if (Math.abs(i31 - x) > fvect) {
            if (x < i31) {
                x += fvect;
            } else {
                x -= fvect;
            }
        } else {
            x = i31;
            i34++;
        }
        if (Math.abs(i32 - z) > fvect) {
            if (z < i32) {
                z += fvect;
            } else {
                z -= fvect;
            }
        } else {
            z = i32;
            i34++;
        }
        if (i34 == 3) {
            fvect = 200;
        } else {
            fvect += 2;
        }
    }

    static private void groundpolys(final Graphics2D graphics2d) {
        int i = (x - sgpx) / 1200 - 12;
        if (i < 0) {
            i = 0;
        }
        int i48 = i + 25;
        if (i48 > nrw) {
            i48 = nrw;
        }
        if (i48 < i) {
            i48 = i;
        }
        int i49 = (z - sgpz) / 1200 - 12;
        if (i49 < 0) {
            i49 = 0;
        }
        int i50 = i49 + 25;
        if (i50 > ncl) {
            i50 = ncl;
        }
        if (i50 < i49) {
            i50 = i49;
        }
        final int[][] is = new int[i48 - i][i50 - i49];
        for (int i51 = i; i51 < i48; i51++) {
            for (int i52 = i49; i52 < i50; i52++) {
                is[i51 - i][i52 - i49] = 0;
                final int i53 = i51 + i52 * nrw;
                if (resdown < 2 || i53 % 2 == 0) {
                    final int i54 = cx + (int) ((cgpx[i53] - x - cx) * cos(xz) - (cgpz[i53] - z - cz) * sin(xz));
                    final int i55 = cz + (int) ((cgpx[i53] - x - cx) * sin(xz) + (cgpz[i53] - z - cz) * cos(xz));
                    final int i56 = cz + (int) ((250 - y - cy) * sin(zy) + (i55 - cz) * cos(zy));
                    if (xs(i54 + pmx[i53], i56) > 0 && xs(i54 - pmx[i53], i56) < w && i56 > -pmx[i53] && i56 < fade[2]) {
                        is[i51 - i][i52 - i49] = i56;
                        final int[] is57 = new int[8];
                        final int[] is58 = new int[8];
                        final int[] is59 = new int[8];
                        for (int i60 = 0; i60 < 8; i60++) {
                            is57[i60] = (int) (ogpx[i53][i60] * pvr[i53][i60] + cgpx[i53] - x);
                            is58[i60] = (int) (ogpz[i53][i60] * pvr[i53][i60] + cgpz[i53] - z);
                            is59[i60] = ground;
                        }
                        rot(is57, is58, cx, cz, xz, 8);
                        rot(is59, is58, cy, cz, zy, 8);
                        final int[] is61 = new int[8];
                        final int[] is62 = new int[8];
                        int i63 = 0;
                        int i64 = 0;
                        int i65 = 0;
                        int i66 = 0;
                        boolean bool = true;
                        for (int i67 = 0; i67 < 8; i67++) {
                            is61[i67] = xs(is57[i67], is58[i67]);
                            is62[i67] = ys(is59[i67], is58[i67]);
                            if (is62[i67] < 0 || is58[i67] < 10) {
                                i63++;
                            }
                            if (is62[i67] > h || is58[i67] < 10) {
                                i64++;
                            }
                            if (is61[i67] < 0 || is58[i67] < 10) {
                                i65++;
                            }
                            if (is61[i67] > w || is58[i67] < 10) {
                                i66++;
                            }
                        }
                        if (i65 == 8 || i63 == 8 || i64 == 8 || i66 == 8) {
                            bool = false;
                        }
                        if (bool) {
                            int i68 = (int) ((cpol[0] * pcv[i53] + cgrnd[0]) / 2.0F);
                            int i69 = (int) ((cpol[1] * pcv[i53] + cgrnd[1]) / 2.0F);
                            int i70 = (int) ((cpol[2] * pcv[i53] + cgrnd[2]) / 2.0F);
                            if (i56 - pmx[i53] > fade[0]) {
                                i68 = (i68 * 7 + cfade[0]) / 8;
                                i69 = (i69 * 7 + cfade[1]) / 8;
                                i70 = (i70 * 7 + cfade[2]) / 8;
                            }
                            if (i56 - pmx[i53] > fade[1]) {
                                i68 = (i68 * 7 + cfade[0]) / 8;
                                i69 = (i69 * 7 + cfade[1]) / 8;
                                i70 = (i70 * 7 + cfade[2]) / 8;
                            }
                            graphics2d.setColor(new Color(i68, i69, i70));
                            graphics2d.fillPolygon(is61, is62, 8);
                        }
                    }
                }
            }
        }
        for (int i71 = i; i71 < i48; i71++) {
            for (int i72 = i49; i72 < i50; i72++)
                if (is[i71 - i][i72 - i49] != 0) {
                    final int i73 = i71 + i72 * nrw;
                    final int[] is74 = new int[8];
                    final int[] is75 = new int[8];
                    final int[] is76 = new int[8];
                    for (int i77 = 0; i77 < 8; i77++) {
                        is74[i77] = ogpx[i73][i77] + cgpx[i73] - x;
                        is75[i77] = ogpz[i73][i77] + cgpz[i73] - z;
                        is76[i77] = ground;
                    }
                    rot(is74, is75, cx, cz, xz, 8);
                    rot(is76, is75, cy, cz, zy, 8);
                    final int[] is78 = new int[8];
                    final int[] is79 = new int[8];
                    int i80 = 0;
                    int i81 = 0;
                    int i82 = 0;
                    int i83 = 0;
                    boolean bool = true;
                    for (int i84 = 0; i84 < 8; i84++) {
                        is78[i84] = xs(is74[i84], is75[i84]);
                        is79[i84] = ys(is76[i84], is75[i84]);
                        if (is79[i84] < 0 || is75[i84] < 10) {
                            i80++;
                        }
                        if (is79[i84] > h || is75[i84] < 10) {
                            i81++;
                        }
                        if (is78[i84] < 0 || is75[i84] < 10) {
                            i82++;
                        }
                        if (is78[i84] > w || is75[i84] < 10) {
                            i83++;
                        }
                    }
                    if (i82 == 8 || i80 == 8 || i81 == 8 || i83 == 8) {
                        bool = false;
                    }
                    if (bool) {
                        int i85 = (int) (cpol[0] * pcv[i73]);
                        int i86 = (int) (cpol[1] * pcv[i73]);
                        int i87 = (int) (cpol[2] * pcv[i73]);
                        if (is[i71 - i][i72 - i49] - pmx[i73] > fade[0]) {
                            i85 = (i85 * 7 + cfade[0]) / 8;
                            i86 = (i86 * 7 + cfade[1]) / 8;
                            i87 = (i87 * 7 + cfade[2]) / 8;
                        }
                        if (is[i71 - i][i72 - i49] - pmx[i73] > fade[1]) {
                            i85 = (i85 * 7 + cfade[0]) / 8;
                            i86 = (i86 * 7 + cfade[1]) / 8;
                            i87 = (i87 * 7 + cfade[2]) / 8;
                        }
                        graphics2d.setColor(new Color(i85, i86, i87));
                        graphics2d.fillPolygon(is78, is79, 8);
                    }
                }
        }
    }

    static void newclouds(int i, int i88, int i89, int i90) {
        clx = null;
        clz = null;
        cmx = null;
        clax = null;
        clay = null;
        claz = null;
        clc = null;
        i = i / 20 - 10000;
        i88 = i88 / 20 + 10000;
        i89 = i89 / 20 - 10000;
        i90 = i90 / 20 + 10000;
        noc = (i88 - i) * (i90 - i89) / 16666667;
        clx = new int[noc];
        clz = new int[noc];
        cmx = new int[noc];
        clax = new int[noc][3][12];
        clay = new int[noc][3][12];
        claz = new int[noc][3][12];
        clc = new int[noc][2][6][3];
        for (int i91 = 0; i91 < noc; i91++) {
            clx[i91] = (int) (i + (i88 - i) * ThreadLocalRandom.current().nextDouble());
            clz[i91] = (int) (i89 + (i90 - i89) * ThreadLocalRandom.current().nextDouble());
            final float f = (float) (0.25 + ThreadLocalRandom.current().nextDouble() * 1.25);
            float f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][0] = (int) (f92 * 0.3826);
            claz[i91][0][0] = (int) (f92 * 0.9238);
            clay[i91][0][0] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][1] = (int) (f92 * 0.7071);
            claz[i91][0][1] = (int) (f92 * 0.7071);
            clay[i91][0][1] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][2] = (int) (f92 * 0.9238);
            claz[i91][0][2] = (int) (f92 * 0.3826);
            clay[i91][0][2] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][3] = (int) (f92 * 0.9238);
            claz[i91][0][3] = -(int) (f92 * 0.3826);
            clay[i91][0][3] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][4] = (int) (f92 * 0.7071);
            claz[i91][0][4] = -(int) (f92 * 0.7071);
            clay[i91][0][4] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][5] = (int) (f92 * 0.3826);
            claz[i91][0][5] = -(int) (f92 * 0.9238);
            clay[i91][0][5] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][6] = -(int) (f92 * 0.3826);
            claz[i91][0][6] = -(int) (f92 * 0.9238);
            clay[i91][0][6] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][7] = -(int) (f92 * 0.7071);
            claz[i91][0][7] = -(int) (f92 * 0.7071);
            clay[i91][0][7] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][8] = -(int) (f92 * 0.9238);
            claz[i91][0][8] = -(int) (f92 * 0.3826);
            clay[i91][0][8] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][9] = -(int) (f92 * 0.9238);
            claz[i91][0][9] = (int) (f92 * 0.3826);
            clay[i91][0][9] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][10] = -(int) (f92 * 0.7071);
            claz[i91][0][10] = (int) (f92 * 0.7071);
            clay[i91][0][10] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            f92 = (float) ((200.0 + ThreadLocalRandom.current().nextDouble() * 700.0) * f);
            clax[i91][0][11] = -(int) (f92 * 0.3826);
            claz[i91][0][11] = (int) (f92 * 0.9238);
            clay[i91][0][11] = (int) ((25.0 - ThreadLocalRandom.current().nextDouble() * 50.0) * f);
            for (int i93 = 0; i93 < 12; i93++) {
                int i94 = i93 - 1;
                if (i94 == -1) {
                    i94 = 11;
                }
                int i95 = i93 + 1;
                if (i95 == 12) {
                    i95 = 0;
                }
                clax[i91][0][i93] = ((clax[i91][0][i94] + clax[i91][0][i95]) / 2 + clax[i91][0][i93]) / 2;
                clay[i91][0][i93] = ((clay[i91][0][i94] + clay[i91][0][i95]) / 2 + clay[i91][0][i93]) / 2;
                claz[i91][0][i93] = ((claz[i91][0][i94] + claz[i91][0][i95]) / 2 + claz[i91][0][i93]) / 2;
            }
            for (int i96 = 0; i96 < 12; i96++) {
                f92 = (float) (1.2 + 0.6 * ThreadLocalRandom.current().nextDouble());
                clax[i91][1][i96] = (int) (clax[i91][0][i96] * f92);
                claz[i91][1][i96] = (int) (claz[i91][0][i96] * f92);
                clay[i91][1][i96] = (int) (clay[i91][0][i96] - 100.0 * ThreadLocalRandom.current().nextDouble());
                f92 = (float) (1.1 + 0.3 * ThreadLocalRandom.current().nextDouble());
                clax[i91][2][i96] = (int) (clax[i91][1][i96] * f92);
                claz[i91][2][i96] = (int) (claz[i91][1][i96] * f92);
                clay[i91][2][i96] = (int) (clay[i91][1][i96] - 240.0 * ThreadLocalRandom.current().nextDouble());
            }
            cmx[i91] = 0;
            for (int i97 = 0; i97 < 12; i97++) {
                int i98 = i97 - 1;
                if (i98 == -1) {
                    i98 = 11;
                }
                int i99 = i97 + 1;
                if (i99 == 12) {
                    i99 = 0;
                }
                clay[i91][1][i97] = ((clay[i91][1][i98] + clay[i91][1][i99]) / 2 + clay[i91][1][i97]) / 2;
                clay[i91][2][i97] = ((clay[i91][2][i98] + clay[i91][2][i99]) / 2 + clay[i91][2][i97]) / 2;
                final int i100 = (int) Math.sqrt(clax[i91][2][i97] * clax[i91][2][i97] + claz[i91][2][i97] * claz[i91][2][i97]);
                if (i100 > cmx[i91]) {
                    cmx[i91] = i100;
                }
            }
            for (int i101 = 0; i101 < 6; i101++) {
                final double d = ThreadLocalRandom.current().nextDouble();
                final double d102 = ThreadLocalRandom.current().nextDouble();
                for (int i103 = 0; i103 < 3; i103++) {
                    f92 = clds[i103] * 1.05F - clds[i103];
                    clc[i91][0][i101][i103] = (int) (clds[i103] + f92 * d);
                    if (clc[i91][0][i101][i103] > 255) {
                        clc[i91][0][i101][i103] = 255;
                    }
                    if (clc[i91][0][i101][i103] < 0) {
                        clc[i91][0][i101][i103] = 0;
                    }
                    clc[i91][1][i101][i103] = (int) (clds[i103] * 1.05F + f92 * d102);
                    if (clc[i91][1][i101][i103] > 255) {
                        clc[i91][1][i101][i103] = 255;
                    }
                    if (clc[i91][1][i101][i103] < 0) {
                        clc[i91][1][i101][i103] = 0;
                    }
                }
            }
        }
    }

    static void newmountains(final int i, final int i167, final int i168, final int i169) {
        final Random random = new Random(mgen);
        nmt = (int) (20.0 + 10.0 * random.nextDouble());
        final int i170 = (i + i167) / 60;
        final int i171 = (i168 + i169) / 60;
        final int i172 = Math.max(i167 - i, i169 - i168) / 60;
        mrd = null;
        nmv = null;
        mtx = null;
        mty = null;
        mtz = null;
        mtc = null;
        mrd = new int[nmt];
        nmv = new int[nmt];
        mtx = new int[nmt][];
        mty = new int[nmt][];
        mtz = new int[nmt][];
        mtc = new int[nmt][][];
        final int[] is = new int[nmt];
        final int[] is173 = new int[nmt];
        for (int i174 = 0; i174 < nmt; i174++) {
            int i175;
            float f;
            float f176;
            is[i174] = (int) (10000.0 + random.nextDouble() * 10000.0);
            final int i177 = (int) (random.nextDouble() * 360.0);
            if (random.nextDouble() > random.nextDouble()) {
                f = (float) (0.2 + random.nextDouble() * 0.35);
                f176 = (float) (0.2 + random.nextDouble() * 0.35);
                nmv[i174] = (int) (f * (24.0 + 16.0 * random.nextDouble()));
                i175 = (int) (85.0 + 10.0 * random.nextDouble());
            } else {
                f = (float) (0.3 + random.nextDouble() * 1.1);
                f176 = (float) (0.2 + random.nextDouble() * 0.35);
                nmv[i174] = (int) (f * (12.0 + 8.0 * random.nextDouble()));
                i175 = (int) (104.0 - 10.0 * random.nextDouble());
            }
            mtx[i174] = new int[nmv[i174] * 2];
            mty[i174] = new int[nmv[i174] * 2];
            mtz[i174] = new int[nmv[i174] * 2];
            mtc[i174] = new int[nmv[i174]][3];
            for (int i178 = 0; i178 < nmv[i174]; i178++) {
                mtx[i174][i178] = (int) ((i178 * 500 + (random.nextDouble() * 800.0 - 400.0) - 250 * (nmv[i174] - 1)) * f);
                mtx[i174][i178 + nmv[i174]] = (int) ((i178 * 500 + (random.nextDouble() * 800.0 - 400.0) - 250 * (nmv[i174] - 1)) * f);
                mtx[i174][nmv[i174]] = (int) (mtx[i174][0] - (100.0 + random.nextDouble() * 600.0) * f);
                mtx[i174][nmv[i174] * 2 - 1] = (int) (mtx[i174][nmv[i174] - 1] + (100.0 + random.nextDouble() * 600.0) * f);
                if (i178 == 0 || i178 == nmv[i174] - 1) {
                    mty[i174][i178] = (int) ((-400.0 - 1200.0 * random.nextDouble()) * f176 + ground);
                }
                if (i178 == 1 || i178 == nmv[i174] - 2) {
                    mty[i174][i178] = (int) ((-1000.0 - 1450.0 * random.nextDouble()) * f176 + ground);
                }
                if (i178 > 1 && i178 < nmv[i174] - 2) {
                    mty[i174][i178] = (int) ((-1600.0 - 1700.0 * random.nextDouble()) * f176 + ground);
                }
                mty[i174][i178 + nmv[i174]] = ground - 70;
                mtz[i174][i178] = i171 + i172 + is[i174];
                mtz[i174][i178 + nmv[i174]] = i171 + i172 + is[i174];
                final float f179 = (float) (0.5 + random.nextDouble() * 0.5);
                mtc[i174][i178][0] = (int) (170.0F * f179 + 170.0F * f179 * (snap[0] / 100.0F));
                if (mtc[i174][i178][0] > 255) {
                    mtc[i174][i178][0] = 255;
                }
                if (mtc[i174][i178][0] < 0) {
                    mtc[i174][i178][0] = 0;
                }
                mtc[i174][i178][1] = (int) (i175 * f179 + 85.0F * f179 * (snap[1] / 100.0F));
                if (mtc[i174][i178][1] > 255) {
                    mtc[i174][i178][1] = 255;
                }
                if (mtc[i174][i178][1] < 1) {
                    mtc[i174][i178][1] = 0;
                }
                mtc[i174][i178][2] = 0;
            }
            for (int i180 = 1; i180 < nmv[i174] - 1; i180++) {
                final int i181 = i180 - 1;
                final int i182 = i180 + 1;
                mty[i174][i180] = ((mty[i174][i181] + mty[i174][i182]) / 2 + mty[i174][i180]) / 2;
            }
            rot(mtx[i174], mtz[i174], i170, i171, i177, nmv[i174] * 2);
            is173[i174] = 0;
        }
        for (int i183 = 0; i183 < nmt; i183++) {
            for (int i184 = i183 + 1; i184 < nmt; i184++)
                if (is[i183] < is[i184]) {
                    is173[i183]++;
                } else {
                    is173[i184]++;
                }
            mrd[is173[i183]] = i183;
        }
    }

    static void newpolys(final int i, final int i35, final int i36, final int i37, final int i38) {
        final Random random = new Random((i38 + cgrnd[0] + cgrnd[1] + cgrnd[2]) * 1671);
        nrw = i35 / 1200 + 9;
        ncl = i37 / 1200 + 9;
        sgpx = i - 4800;
        sgpz = i36 - 4800;
        ogpx = null;
        ogpz = null;
        pvr = null;
        cgpx = null;
        cgpz = null;
        pmx = null;
        pcv = null;
        ogpx = new int[nrw * ncl][8];
        ogpz = new int[nrw * ncl][8];
        pvr = new float[nrw * ncl][8];
        cgpx = new int[nrw * ncl];
        cgpz = new int[nrw * ncl];
        pmx = new int[nrw * ncl];
        pcv = new float[nrw * ncl];
        int i39 = 0;
        int i40 = 0;
        for (int i41 = 0; i41 < nrw * ncl; i41++) {
            cgpx[i41] = sgpx + i39 * 1200 + (int) (random.nextDouble() * 1000.0 - 500.0);
            cgpz[i41] = sgpz + i40 * 1200 + (int) (random.nextDouble() * 1000.0 - 500.0);
            for (int i42 = 0; i42 < Trackers.nt; i42++)
                if (Trackers.zy[i42] == 0 && Trackers.xy[i42] == 0) {
                    if (Trackers.radx[i42] < Trackers.radz[i42] && Math.abs(cgpz[i41] - Trackers.z[i42]) < Trackers.radz[i42]) {
                        for (/**/; Math.abs(cgpx[i41] - Trackers.x[i42]) < Trackers.radx[i42]; cgpx[i41] += random.nextDouble() * Trackers.radx[i42] * 2.0 - Trackers.radx[i42]) {

                        }
                    }
                    if (Trackers.radz[i42] < Trackers.radx[i42] && Math.abs(cgpx[i41] - Trackers.x[i42]) < Trackers.radx[i42]) {
                        for (/**/; Math.abs(cgpz[i41] - Trackers.z[i42]) < Trackers.radz[i42]; cgpz[i41] += random.nextDouble() * Trackers.radz[i42] * 2.0 - Trackers.radz[i42]) {

                        }
                    }
                }
            if (++i39 == nrw) {
                i39 = 0;
                i40++;
            }
        }
        for (int i43 = 0; i43 < nrw * ncl; i43++) {
            final float f = (float) (0.3 + 1.6 * random.nextDouble());
            ogpx[i43][0] = 0;
            ogpz[i43][0] = (int) ((100.0 + random.nextDouble() * 760.0) * f);
            ogpx[i43][1] = (int) ((100.0 + random.nextDouble() * 760.0) * 0.7071 * f);
            ogpz[i43][1] = ogpx[i43][1];
            ogpx[i43][2] = (int) ((100.0 + random.nextDouble() * 760.0) * f);
            ogpz[i43][2] = 0;
            ogpx[i43][3] = (int) ((100.0 + random.nextDouble() * 760.0) * 0.7071 * f);
            ogpz[i43][3] = -ogpx[i43][3];
            ogpx[i43][4] = 0;
            ogpz[i43][4] = -(int) ((100.0 + random.nextDouble() * 760.0) * f);
            ogpx[i43][5] = -(int) ((100.0 + random.nextDouble() * 760.0) * 0.7071 * f);
            ogpz[i43][5] = ogpx[i43][5];
            ogpx[i43][6] = -(int) ((100.0 + random.nextDouble() * 760.0) * f);
            ogpz[i43][6] = 0;
            ogpx[i43][7] = -(int) ((100.0 + random.nextDouble() * 760.0) * 0.7071 * f);
            ogpz[i43][7] = -ogpx[i43][7];
            for (int i44 = 0; i44 < 8; i44++) {
                int i45 = i44 - 1;
                if (i45 == -1) {
                    i45 = 7;
                }
                int i46 = i44 + 1;
                if (i46 == 8) {
                    i46 = 0;
                }
                ogpx[i43][i44] = ((ogpx[i43][i45] + ogpx[i43][i46]) / 2 + ogpx[i43][i44]) / 2;
                ogpz[i43][i44] = ((ogpz[i43][i45] + ogpz[i43][i46]) / 2 + ogpz[i43][i44]) / 2;
                pvr[i43][i44] = (float) (1.1 + random.nextDouble() * 0.8);
                final int i47 = (int) Math.sqrt((int) (ogpx[i43][i44] * ogpx[i43][i44] * pvr[i43][i44] * pvr[i43][i44] + ogpz[i43][i44] * ogpz[i43][i44] * pvr[i43][i44] * pvr[i43][i44]));
                if (i47 > pmx[i43]) {
                    pmx[i43] = i47;
                }
            }
            pcv[i43] = (float) (0.97 + random.nextDouble() * 0.03);
            if (pcv[i43] > 1.0F) {
                pcv[i43] = 1.0F;
            }
            if (random.nextDouble() > random.nextDouble()) {
                pcv[i43] = 1.0F;
            }
        }
    }

    static void newstars() {
        stx = null;
        stz = null;
        stc = null;
        bst = null;
        twn = null;
        nst = 0;
        if (lightson) {
            final Random random = new Random((long) (ThreadLocalRandom.current().nextDouble() * 100000.0));
            nst = 40;
            stx = new int[nst];
            stz = new int[nst];
            stc = new int[nst][2][3];
            bst = new boolean[nst];
            twn = new int[nst];
            for (int i = 0; i < nst; i++) {
                stx[i] = (int) (2000.0 * random.nextDouble() - 1000.0);
                stz[i] = (int) (2000.0 * random.nextDouble() - 1000.0);
                int i212 = (int) (3.0 * random.nextDouble());
                if (i212 >= 3) {
                    i212 = 0;
                }
                if (i212 <= -1) {
                    i212 = 2;
                }
                int i213 = i212 + 1;
                if (random.nextDouble() > random.nextDouble()) {
                    i213 = i212 - 1;
                }
                if (i213 == 3) {
                    i213 = 0;
                }
                if (i213 == -1) {
                    i213 = 2;
                }
                for (int i214 = 0; i214 < 3; i214++) {
                    stc[i][0][i214] = 200;
                    if (i212 == i214) {
                        stc[i][0][i214] += (int) (55.0 * random.nextDouble());
                    }
                    if (i213 == i214) {
                        stc[i][0][i214] += 55;
                    }
                    stc[i][0][i214] = (stc[i][0][i214] * 2 + csky[i214]) / 3;
                    stc[i][1][i214] = (stc[i][0][i214] + csky[i214]) / 2;
                }
                twn[i] = (int) (4.0 * random.nextDouble());
                bst[i] = random.nextDouble() > 0.8;
            }
        }
    }

    static float random() {
        if (cntrn == 0) {
            for (int i = 0; i < 3; i++) {
                rand[i] = (int) (10.0 * ThreadLocalRandom.current().nextDouble());
                diup[i] = ThreadLocalRandom.current().nextDouble() <= ThreadLocalRandom.current().nextDouble();
            }
            cntrn = 20;
        } else {
            cntrn--;
        }
        for (int i = 0; i < 3; i++)
            if (diup[i]) {
                rand[i]++;
                if (rand[i] == 10) {
                    rand[i] = 0;
                }
            } else {
                rand[i]--;
                if (rand[i] == -1) {
                    rand[i] = 9;
                }
            }
        trn++;
        if (trn == 3) {
            trn = 0;
        }
        return rand[trn] / 10.0F;
    }

    static private void rot(final int[] is, final int[] is274, final int i, final int i275, final int i276, final int i277) {
        if (i276 != 0) {
            for (int i278 = 0; i278 < i277; i278++) {
                final int i279 = is[i278];
                final int i280 = is274[i278];
                is[i278] = i + (int) ((i279 - i) * cos(i276) - (i280 - i275) * sin(i276));
                is274[i278] = i275 + (int) ((i279 - i) * sin(i276) + (i280 - i275) * cos(i276));
            }
        }
    }

    static void setcloads(final int i, final int i252, final int i253, int i254, int i255) {
        if (i254 < 0) {
            i254 = 0;
        }
        if (i254 > 10) {
            i254 = 10;
        }
        if (i255 < -1500) {
            i255 = -1500;
        }
        if (i255 > -500) {
            i255 = -500;
        }
        cldd[0] = i;
        cldd[1] = i252;
        cldd[2] = i253;
        cldd[3] = i254;
        cldd[4] = i255;
        for (int i256 = 0; i256 < 3; i256++) {
            clds[i256] = (osky[i256] * cldd[3] + cldd[i256]) / (cldd[3] + 1);
            clds[i256] = (int) (clds[i256] + clds[i256] * (snap[i256] / 100.0F));
            if (clds[i256] > 255) {
                clds[i256] = 255;
            }
            if (clds[i256] < 0) {
                clds[i256] = 0;
            }
        }
    }

    static void setexture(int i, int i261, int i262, int i263) {
        if (i263 < 20) {
            i263 = 20;
        }
        if (i263 > 60) {
            i263 = 60;
        }
        texture[0] = i;
        texture[1] = i261;
        texture[2] = i262;
        texture[3] = i263;
        i = (ogrnd[0] * i263 + i) / (1 + i263);
        i261 = (ogrnd[1] * i263 + i261) / (1 + i263);
        i262 = (ogrnd[2] * i263 + i262) / (1 + i263);
        cpol[0] = (int) (i + i * (snap[0] / 100.0F));
        if (cpol[0] > 255) {
            cpol[0] = 255;
        }
        if (cpol[0] < 0) {
            cpol[0] = 0;
        }
        cpol[1] = (int) (i261 + i261 * (snap[1] / 100.0F));
        if (cpol[1] > 255) {
            cpol[1] = 255;
        }
        if (cpol[1] < 0) {
            cpol[1] = 0;
        }
        cpol[2] = (int) (i262 + i262 * (snap[2] / 100.0F));
        if (cpol[2] > 255) {
            cpol[2] = 255;
        }
        if (cpol[2] < 0) {
            cpol[2] = 0;
        }
        for (int i264 = 0; i264 < 3; i264++) {
            crgrnd[i264] = (int) ((cpol[i264] * 0.99 + cgrnd[i264]) / 2.0);
        }
    }

    static void setfade(final int i, final int i268, final int i269) {
        cfade[0] = (int) (i + i * (snap[0] / 100.0F));
        if (cfade[0] > 255) {
            cfade[0] = 255;
        }
        if (cfade[0] < 0) {
            cfade[0] = 0;
        }
        cfade[1] = (int) (i268 + i268 * (snap[1] / 100.0F));
        if (cfade[1] > 255) {
            cfade[1] = 255;
        }
        if (cfade[1] < 0) {
            cfade[1] = 0;
        }
        cfade[2] = (int) (i269 + i269 * (snap[2] / 100.0F));
        if (cfade[2] > 255) {
            cfade[2] = 255;
        }
        if (cfade[2] < 0) {
            cfade[2] = 0;
        }
    }

    static void setgrnd(final int i, final int i257, final int i258) {
        ogrnd[0] = i;
        ogrnd[1] = i257;
        ogrnd[2] = i258;
        for (int i259 = 0; i259 < 3; i259++) {
            cpol[i259] = (ogrnd[i259] * texture[3] + texture[i259]) / (1 + texture[3]);
            cpol[i259] = (int) (cpol[i259] + cpol[i259] * (snap[i259] / 100.0F));
            if (cpol[i259] > 255) {
                cpol[i259] = 255;
            }
            if (cpol[i259] < 0) {
                cpol[i259] = 0;
            }
        }
        cgrnd[0] = (int) (i + i * (snap[0] / 100.0F));
        if (cgrnd[0] > 255) {
            cgrnd[0] = 255;
        }
        if (cgrnd[0] < 0) {
            cgrnd[0] = 0;
        }
        cgrnd[1] = (int) (i257 + i257 * (snap[1] / 100.0F));
        if (cgrnd[1] > 255) {
            cgrnd[1] = 255;
        }
        if (cgrnd[1] < 0) {
            cgrnd[1] = 0;
        }
        cgrnd[2] = (int) (i258 + i258 * (snap[2] / 100.0F));
        if (cgrnd[2] > 255) {
            cgrnd[2] = 255;
        }
        if (cgrnd[2] < 0) {
            cgrnd[2] = 0;
        }
        for (int i260 = 0; i260 < 3; i260++) {
            crgrnd[i260] = (int) ((cpol[i260] * 0.99 + cgrnd[i260]) / 2.0);
        }
    }

    static void setpolys(final int i, final int i265, final int i266) {
        cpol[0] = (int) (i + i * (snap[0] / 100.0F));
        if (cpol[0] > 255) {
            cpol[0] = 255;
        }
        if (cpol[0] < 0) {
            cpol[0] = 0;
        }
        cpol[1] = (int) (i265 + i265 * (snap[1] / 100.0F));
        if (cpol[1] > 255) {
            cpol[1] = 255;
        }
        if (cpol[1] < 0) {
            cpol[1] = 0;
        }
        cpol[2] = (int) (i266 + i266 * (snap[2] / 100.0F));
        if (cpol[2] > 255) {
            cpol[2] = 255;
        }
        if (cpol[2] < 0) {
            cpol[2] = 0;
        }
        for (int i267 = 0; i267 < 3; i267++) {
            crgrnd[i267] = (int) ((cpol[i267] * 0.99 + cgrnd[i267]) / 2.0);
        }
    }

    static void setsky(final int i, final int i249, final int i250) {
        osky[0] = i;
        osky[1] = i249;
        osky[2] = i250;
        for (int i251 = 0; i251 < 3; i251++) {
            clds[i251] = (osky[i251] * cldd[3] + cldd[i251]) / (cldd[3] + 1);
            clds[i251] = (int) (clds[i251] + clds[i251] * (snap[i251] / 100.0F));
            if (clds[i251] > 255) {
                clds[i251] = 255;
            }
            if (clds[i251] < 0) {
                clds[i251] = 0;
            }
        }
        csky[0] = (int) (i + i * (snap[0] / 100.0F));
        if (csky[0] > 255) {
            csky[0] = 255;
        }
        if (csky[0] < 0) {
            csky[0] = 0;
        }
        csky[1] = (int) (i249 + i249 * (snap[1] / 100.0F));
        if (csky[1] > 255) {
            csky[1] = 255;
        }
        if (csky[1] < 0) {
            csky[1] = 0;
        }
        csky[2] = (int) (i250 + i250 * (snap[2] / 100.0F));
        if (csky[2] > 255) {
            csky[2] = 255;
        }
        if (csky[2] < 0) {
            csky[2] = 0;
        }
        final float[] fs = new float[3];
        Color.RGBtoHSB(csky[0], csky[1], csky[2], fs);
        darksky = fs[2] < 0.6;
    }

    static void setsnap(final int i, final int i247, final int i248) {
        snap[0] = i;
        snap[1] = i247;
        snap[2] = i248;
    }

    static float sin(int i) {
        for (/**/; i >= 360; i -= 360) {

        }
        for (/**/; i < 0; i += 360) {

        }
        return tsin[i];
    }

    static void transaround(final ContO conto, final ContO conto18, final int i) {
        final int i19 = (conto.x * (20 - i) + conto18.x * i) / 20;
        final int i20 = (conto.y * (20 - i) + conto18.y * i) / 20;
        final int i21 = (conto.z * (20 - i) + conto18.z * i) / 20;
        if (!vert) {
            adv += 2;
        } else {
            adv -= 2;
        }
        if (adv > 900) {
            vert = true;
        }
        if (adv < -500) {
            vert = false;
        }
        int i22 = 500 + adv;
        if (i22 < 1000) {
            i22 = 1000;
        }
        y = i20 - adv;
        if (y > 10) {
            vert = false;
        }
        x = i19 + (int) ((i19 - i22 - i19) * cos(vxz));
        z = i21 + (int) ((i19 - i22 - i19) * sin(vxz));
        vxz += 2;
        int i23 = 0;
        int i24 = y;
        if (i24 > 0) {
            i24 = 0;
        }
        if (i20 - i24 - cy < 0) {
            i23 = -180;
        }
        final int i25 = (int) Math.sqrt((i21 - z + cz) * (i21 - z + cz) + (i19 - x - cx) * (i19 - x - cx));
        final int i26 = (int) (90 + i23 - Math.atan((double) i25 / (double) (i20 - i24 - cy)) / 0.017453292519943295);
        xz = -vxz + 90;
        zy += (i26 - zy) / 10;
    }

    static void watch(final ContO conto, final int i) {
        if (td) {
            y = (int) (conto.y - 300 - 1100.0F * random());
            x = conto.x + (int) ((conto.x + 400 - conto.x) * cos(i) - (conto.z + 5000 - conto.z) * sin(i));
            z = conto.z + (int) ((conto.x + 400 - conto.x) * sin(i) + (conto.z + 5000 - conto.z) * cos(i));
            td = false;
        }
        int i0 = 0;
        if (conto.x - x - cx > 0) {
            i0 = 180;
        }
        int i1 = -(int) (90 + i0 + Math.atan((double) (conto.z - z) / (double) (conto.x - x - cx)) / 0.017453292519943295);
        i0 = 0;
        if (conto.y - y - cy < 0) {
            i0 = -180;
        }
        final int i2 = (int) Math.sqrt((conto.z - z) * (conto.z - z) + (conto.x - x - cx) * (conto.x - x - cx));
        final int i3 = (int) (90 + i0 - Math.atan((double) i2 / (double) (conto.y - y - cy)) / 0.017453292519943295);
        for (/**/; i1 < 0; i1 += 360) {

        }
        for (/**/; i1 > 360; i1 -= 360) {

        }
        xz = i1;
        zy += (i3 - zy) / 5;
        if ((int) Math.sqrt((conto.z - z) * (conto.z - z) + (conto.x - x - cx) * (conto.x - x - cx) + (conto.y - y - cy) * (conto.y - y - cy)) > 6000) {
            td = true;
        }
    }

    static private int xs(final int i, int i272) {
        if (i272 < cz) {
            i272 = cz;
        }
        return (i272 - focusPoint) * (cx - i) / i272 + i;
    }

    static private int ys(final int i, int i273) {
        if (i273 < 10) {
            i273 = 10;
        }
        return (i273 - focusPoint) * (cy - i) / i273 + i;
    }
}
//package nfm.open;
/* MouseHandler - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.PopupMenu;
//importjava.awt.event.MouseAdapter;
//importjava.awt.event.MouseEvent;

class MouseHandler extends MouseAdapter {
    private final int id;
    private final PopupMenu popupMenu;

    public MouseHandler(final PopupMenu popupmenu, final int i) {
        popupMenu = popupmenu;
        id = i;
    }

    @Override
    public void mousePressed(final MouseEvent mouseevent) {
        if (mouseevent.isPopupTrigger()) {
            popupMenu.show(mouseevent.getComponent(), mouseevent.getX(), mouseevent.getY());
            Madness.textid = id;
            mouseevent.consume();
        }
    }

    @Override
    public void mouseReleased(final MouseEvent mouseevent) {
        if (mouseevent.isPopupTrigger()) {
            popupMenu.show(mouseevent.getComponent(), mouseevent.getX(), mouseevent.getY());
            Madness.textid = id;
            mouseevent.consume();
        }
    }
}
//package nfm.open;
/* Plane - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.BasicStroke;
//importjava.awt.Color;
//importjava.awt.Graphics2D;
//importjava.awt.RenderingHints;
//importjava.util.concurrent.ThreadLocalRandom;

final class Plane implements Comparable<Plane> {
    private int av = 0;
    int bfase = 0;
    final int[] c = new int[3];
    int chip = 0;
    int colnum = 0;
    private final int[] cox = new int[3];
    private final int[] coy = new int[3];
    private final int[] coz = new int[3];
    float ctmag = 0.0F;
    private int cxy = 0;
    private int cxz = 0;
    private int czy = 0;
    private float deltaf = 1.0F;
    private int disline = 7;
    private int dx = 0;
    private int dy = 0;
    private int dz = 0;
    int embos = 0;
    int flx = 0;
    int fs = 0;
    int glass = 0;
    int gr = 0;
    final float[] hsb = new float[3];
    int light = 0;
    int master = 0;
    int n;
    boolean nocol = false;
    final int[] oc = new int[3];
    final int[] ox;
    final int[] oy;
    final int[] oz;
    private int pa = 0;
    private int pb = 0;
    private float projf = 1.0F;
    boolean road = false;
    boolean solo = false;
    private int typ = 0;
    private int vx = 0;
    private int vy = 0;
    private int vz = 0;
    int wx = 0;
    int wy = 0;
    int wz = 0;

    final boolean customstroke;
    final int strokewidth;
    final int strokecap;
    final int strokejoin;
    final int strokemtlimit;
    final boolean randomcolor;
    final boolean randoutline;
    
    byte project;//booleans are bytes anyway so hey why not

    Plane(final int[] is, final int[] is0, final int[] is1, final int i, final int[] is2, final int i3, final int i4, final int i5, final int i6, final int i7, final int i8, final int i9, final int i10, final boolean bool, final int i11, final boolean bool12, final boolean randomcolor, final boolean randoutline, final boolean customstroke, final int strokewidth, final int strokecap, final int strokejoin, final int strokemtlimit) {
        this.randoutline = randoutline;
        this.randomcolor = randomcolor;
        //stroke
        this.customstroke = customstroke;
        this.strokewidth = strokewidth;
        this.strokecap = strokecap;
        this.strokejoin = strokejoin;
        this.strokemtlimit = strokemtlimit;
        n = i;
        ox = new int[n];
        oz = new int[n];
        oy = new int[n];
        for (int i13 = 0; i13 < n; i13++) {
            ox[i13] = is[i13];
            oy[i13] = is1[i13];
            oz[i13] = is0[i13];
        }
        System.arraycopy(is2, 0, oc, 0, 3);
        if (i4 == -15) {
            if (is2[0] == 211) {
                final int i15 = (int) (ThreadLocalRandom.current().nextDouble() * 40.0 - 20.0);
                final int i16 = (int) (ThreadLocalRandom.current().nextDouble() * 40.0 - 20.0);
                for (int i17 = 0; i17 < n; i17++) {
                    ox[i17] += i15;
                    oz[i17] += i16;
                }
            }
            final int i18 = (int) (185.0 + ThreadLocalRandom.current().nextDouble() * 20.0);
            is2[0] = (217 + i18) / 2;
            if (is2[0] == 211) {
                is2[0] = 210;
            }
            is2[1] = (189 + i18) / 2;
            is2[2] = (132 + i18) / 2;
            for (int i19 = 0; i19 < n; i19++) {
                if (ThreadLocalRandom.current().nextDouble() > ThreadLocalRandom.current().nextDouble()) {
                    ox[i19] += (int) (8.0 * ThreadLocalRandom.current().nextDouble() - 4.0);
                }
                if (ThreadLocalRandom.current().nextDouble() > ThreadLocalRandom.current().nextDouble()) {
                    oy[i19] += (int) (8.0 * ThreadLocalRandom.current().nextDouble() - 4.0);
                }
                if (ThreadLocalRandom.current().nextDouble() > ThreadLocalRandom.current().nextDouble()) {
                    oz[i19] += (int) (8.0 * ThreadLocalRandom.current().nextDouble() - 4.0);
                }
            }
        }
        if (is2[0] == is2[1] && is2[1] == is2[2]) {
            nocol = true;
        }
        if (i3 == 0) {
            for (int i20 = 0; i20 < 3; i20++) {
                c[i20] = (int) (is2[i20] + is2[i20] * (Medium.snap[i20] / 100.0F));
                if (c[i20] > 255) {
                    c[i20] = 255;
                }
                if (c[i20] < 0) {
                    c[i20] = 0;
                }
            }
        }
        if (i3 == 1) {
            for (int i21 = 0; i21 < 3; i21++) {
                c[i21] = (Medium.csky[i21] * Medium.fade[0] * 2 + Medium.cfade[i21] * 3000) / (Medium.fade[0] * 2 + 3000);
            }
        }
        if (i3 == 2) {
            for (int i22 = 0; i22 < 3; i22++) {
                c[i22] = (int) (Medium.crgrnd[i22] * 0.925F);
            }
        }
        if (i3 == 3) {
            System.arraycopy(is2, 0, c, 0, 3);
        }
        disline = i9;
        bfase = i10;
        glass = i3;
        Color.RGBtoHSB(c[0], c[1], c[2], hsb);
        if (i3 == 3 && Medium.trk != 2) {
            hsb[1] += 0.05F;
            if (hsb[1] > 1.0F) {
                hsb[1] = 1.0F;
            }
        }
        if (!nocol && glass != 1) {
            if (bfase > 20 && hsb[1] > 0.25) {
                hsb[1] = 0.25F;
            }
            if (bfase > 25 && hsb[2] > 0.7) {
                hsb[2] = 0.7F;
            }
            if (bfase > 30 && hsb[1] > 0.15) {
                hsb[1] = 0.15F;
            }
            if (bfase > 35 && hsb[2] > 0.6) {
                hsb[2] = 0.6F;
            }
            if (bfase > 40) {
                hsb[0] = 0.075F;
            }
            if (bfase > 50 && hsb[2] > 0.5) {
                hsb[2] = 0.5F;
            }
            if (bfase > 60) {
                hsb[0] = 0.05F;
            }
        }
        road = bool;
        light = i11;
        solo = bool12;
        gr = i4;
        if (gr == -1337) {
            project = -1;
            gr = 0;
        } else if (gr == 1337) {
            project = 1;
            gr = 0;
        }
        fs = i5;
        wx = i6;
        wy = i7;
        wz = i8;
        deltafntyp();
    }

    void d(final Plane _last, final Plane _next, final Graphics2D graphics2d, final int _mx, final int _my, final int _mz, final int _xz, final int _xy, final int _yz, final int i34, final int i35, boolean bool, final int i36) {
        if (master == 1)
            if (av > 1500 && !Medium.crs) {
                n = 12;
            } else {
                n = 20;
            }
        final int[] _x = new int[n];
        final int[] _z = new int[n];
        final int[] _y = new int[n];
        if (embos == 0) {
            for (int i39 = 0; i39 < n; i39++) {
                _x[i39] = ox[i39] + _mx;
                _y[i39] = oy[i39] + _my;
                _z[i39] = oz[i39] + _mz;
            }
            if ((gr == -11 || gr == -12 || gr == -13) && Medium.lastmaf == 1) {
                for (int i40 = 0; i40 < n; i40++) {
                    _x[i40] = -ox[i40] + _mx;
                    _y[i40] = oy[i40] + _my;
                    _z[i40] = -oz[i40] + _mz;
                }
            }
        } else {
            if (embos <= 11 && Medium.random() > 0.5 && glass != 1) {
                for (int i41 = 0; i41 < n; i41++) {
                    _x[i41] = (int) (ox[i41] + _mx + (15.0F - Medium.random() * 30.0F));
                    _y[i41] = (int) (oy[i41] + _my + (15.0F - Medium.random() * 30.0F));
                    _z[i41] = (int) (oz[i41] + _mz + (15.0F - Medium.random() * 30.0F));
                }
                rot(_x, _y, _mx, _my, _xy, n);
                rot(_y, _z, _my, _mz, _yz, n);
                rot(_x, _z, _mx, _mz, _xz, n);
                rot(_x, _z, Medium.cx, Medium.cz, Medium.xz, n);
                rot(_y, _z, Medium.cy, Medium.cz, Medium.zy, n);
                final int[] is42 = new int[n];
                final int[] is43 = new int[n];
                for (int i44 = 0; i44 < n; i44++) {
                    is42[i44] = xs(_x[i44], _z[i44]);
                    is43[i44] = ys(_y[i44], _z[i44]);
                }
                graphics2d.setColor(new Color(230, 230, 230));
                graphics2d.fillPolygon(is42, is43, n);
            }
            float f = 1.0F;
            if (embos <= 4) {
                f = 1.0F + Medium.random() / 5.0F;
            }
            if (embos > 4 && embos <= 7) {
                f = 1.0F + Medium.random() / 4.0F;
            }
            if (embos > 7 && embos <= 9) {
                f = 1.0F + Medium.random() / 3.0F;
                if (hsb[2] > 0.7) {
                    hsb[2] = 0.7F;
                }
            }
            if (embos > 9 && embos <= 10) {
                f = 1.0F + Medium.random() / 2.0F;
                if (hsb[2] > 0.6) {
                    hsb[2] = 0.6F;
                }
            }
            if (embos > 10 && embos <= 12) {
                f = 1.0F + Medium.random() / 1.0F;
                if (hsb[2] > 0.5) {
                    hsb[2] = 0.5F;
                }
            }
            if (embos == 12) {
                chip = 1;
                ctmag = 2.0F;
                bfase = -7;
            }
            if (embos == 13) {
                hsb[1] = 0.2F;
                hsb[2] = 0.4F;
            }
            if (embos == 16) {
                pa = (int) (Medium.random() * n);
                for (pb = (int) (Medium.random() * n); pa == pb; pb = (int) (Medium.random() * n)) {

                }
            }
            if (embos >= 16) {
                int i45 = 1;
                int i46 = 1;
                int i47;
                for (i47 = Math.abs(_yz); i47 > 270; i47 -= 360) {

                }
                i47 = Math.abs(i47);
                if (i47 > 90) {
                    i45 = -1;
                }
                int i48;
                for (i48 = Math.abs(_xy); i48 > 270; i48 -= 360) {

                }
                i48 = Math.abs(i48);
                if (i48 > 90) {
                    i46 = -1;
                }
                final int[] is49 = new int[3];
                final int[] is50 = new int[3];
                _x[0] = ox[pa] + _mx;
                _y[0] = oy[pa] + _my;
                _z[0] = oz[pa] + _mz;
                _x[1] = ox[pb] + _mx;
                _y[1] = oy[pb] + _my;
                _z[1] = oz[pb] + _mz;
                while (Math.abs(_x[0] - _x[1]) > 100)
                    if (_x[1] > _x[0]) {
                        _x[1] -= 30;
                    } else {
                        _x[1] += 30;
                    }
                while (Math.abs(_z[0] - _z[1]) > 100)
                    if (_z[1] > _z[0]) {
                        _z[1] -= 30;
                    } else {
                        _z[1] += 30;
                    }
                final int i51 = (int) (Math.abs(_x[0] - _x[1]) / 3 * (0.5 - Medium.random()));
                final int i52 = (int) (Math.abs(_z[0] - _z[1]) / 3 * (0.5 - Medium.random()));
                _x[2] = (_x[0] + _x[1]) / 2 + i51;
                _z[2] = (_z[0] + _z[1]) / 2 + i52;
                int i53 = (int) ((Math.abs(_x[0] - _x[1]) + Math.abs(_z[0] - _z[1])) / 1.5 * (Medium.random() / 2.0F + 0.5));
                _y[2] = (_y[0] + _y[1]) / 2 - i45 * i46 * i53;
                rot(_x, _y, _mx, _my, _xy, 3);
                rot(_y, _z, _my, _mz, _yz, 3);
                rot(_x, _z, _mx, _mz, _xz, 3);
                rot(_x, _z, Medium.cx, Medium.cz, Medium.xz, 3);
                rot(_y, _z, Medium.cy, Medium.cz, Medium.zy, 3);
                for (int i54 = 0; i54 < 3; i54++) {
                    is49[i54] = xs(_x[i54], _z[i54]);
                    is50[i54] = ys(_y[i54], _z[i54]);
                }
                int i55 = (int) (255.0F + 255.0F * (Medium.snap[0] / 400.0F));
                if (i55 > 255) {
                    i55 = 255;
                }
                if (i55 < 0) {
                    i55 = 0;
                }
                int i56 = (int) (169.0F + 169.0F * (Medium.snap[1] / 300.0F));
                if (i56 > 255) {
                    i56 = 255;
                }
                if (i56 < 0) {
                    i56 = 0;
                }
                int i57 = (int) (89.0F + 89.0F * (Medium.snap[2] / 200.0F));
                if (i57 > 255) {
                    i57 = 255;
                }
                if (i57 < 0) {
                    i57 = 0;
                }
                graphics2d.setColor(new Color(i55, i56, i57));
                graphics2d.fillPolygon(is49, is50, 3);
                _x[0] = ox[pa] + _mx;
                _y[0] = oy[pa] + _my;
                _z[0] = oz[pa] + _mz;
                _x[1] = ox[pb] + _mx;
                _y[1] = oy[pb] + _my;
                _z[1] = oz[pb] + _mz;
                while (Math.abs(_x[0] - _x[1]) > 100)
                    if (_x[1] > _x[0]) {
                        _x[1] -= 30;
                    } else {
                        _x[1] += 30;
                    }
                while (Math.abs(_z[0] - _z[1]) > 100)
                    if (_z[1] > _z[0]) {
                        _z[1] -= 30;
                    } else {
                        _z[1] += 30;
                    }
                _x[2] = (_x[0] + _x[1]) / 2 + i51;
                _z[2] = (_z[0] + _z[1]) / 2 + i52;
                i53 *= 0.8;
                _y[2] = (_y[0] + _y[1]) / 2 - i45 * i46 * i53;
                rot(_x, _y, _mx, _my, _xy, 3);
                rot(_y, _z, _my, _mz, _yz, 3);
                rot(_x, _z, _mx, _mz, _xz, 3);
                rot(_x, _z, Medium.cx, Medium.cz, Medium.xz, 3);
                rot(_y, _z, Medium.cy, Medium.cz, Medium.zy, 3);
                for (int i58 = 0; i58 < 3; i58++) {
                    is49[i58] = xs(_x[i58], _z[i58]);
                    is50[i58] = ys(_y[i58], _z[i58]);
                }
                i55 = (int) (255.0F + 255.0F * (Medium.snap[0] / 400.0F));
                if (i55 > 255) {
                    i55 = 255;
                }
                if (i55 < 0) {
                    i55 = 0;
                }
                i56 = (int) (207.0F + 207.0F * (Medium.snap[1] / 300.0F));
                if (i56 > 255) {
                    i56 = 255;
                }
                if (i56 < 0) {
                    i56 = 0;
                }
                i57 = (int) (136.0F + 136.0F * (Medium.snap[2] / 200.0F));
                if (i57 > 255) {
                    i57 = 255;
                }
                if (i57 < 0) {
                    i57 = 0;
                }
                graphics2d.setColor(new Color(i55, i56, i57));
                graphics2d.fillPolygon(is49, is50, 3);
            }
            for (int i59 = 0; i59 < n; i59++) {
                if (typ == 1) {
                    _x[i59] = (int) (ox[i59] * f + _mx);
                } else {
                    _x[i59] = ox[i59] + _mx;
                }
                if (typ == 2) {
                    _y[i59] = (int) (oy[i59] * f + _my);
                } else {
                    _y[i59] = oy[i59] + _my;
                }
                if (typ == 3) {
                    _z[i59] = (int) (oz[i59] * f + _mz);
                } else {
                    _z[i59] = oz[i59] + _mz;
                }
            }
            if (embos != 70) {
                embos++;
            } else {
                embos = 16;
            }
        }
        if (wz != 0) {
            rot(_y, _z, wy + _my, wz + _mz, i35, n);
        }
        if (wx != 0) {
            rot(_x, _z, wx + _mx, wz + _mz, i34, n);
        }
        if (chip == 1 && (Medium.random() > 0.6 || bfase == 0)) {
            chip = 0;
            if (bfase == 0 && nocol) {
                bfase = 1;
            }
        }
        if (chip != 0) {
            if (chip == 1) {
                cxz = _xz;
                cxy = _xy;
                czy = _yz;
                final int i60 = (int) (Medium.random() * n);
                cox[0] = ox[i60];
                coz[0] = oz[i60];
                coy[0] = oy[i60];
                if (ctmag > 3.0F) {
                    ctmag = 3.0F;
                }
                if (ctmag < -3.0F) {
                    ctmag = -3.0F;
                }
                cox[1] = (int) (cox[0] + ctmag * (10.0F - Medium.random() * 20.0F));
                cox[2] = (int) (cox[0] + ctmag * (10.0F - Medium.random() * 20.0F));
                coy[1] = (int) (coy[0] + ctmag * (10.0F - Medium.random() * 20.0F));
                coy[2] = (int) (coy[0] + ctmag * (10.0F - Medium.random() * 20.0F));
                coz[1] = (int) (coz[0] + ctmag * (10.0F - Medium.random() * 20.0F));
                coz[2] = (int) (coz[0] + ctmag * (10.0F - Medium.random() * 20.0F));
                dx = 0;
                dy = 0;
                dz = 0;
                if (bfase != -7) {
                    vx = (int) (ctmag * (30.0F - Medium.random() * 60.0F));
                    vz = (int) (ctmag * (30.0F - Medium.random() * 60.0F));
                    vy = (int) (ctmag * (30.0F - Medium.random() * 60.0F));
                } else {
                    vx = (int) (ctmag * (10.0F - Medium.random() * 20.0F));
                    vz = (int) (ctmag * (10.0F - Medium.random() * 20.0F));
                    vy = (int) (ctmag * (10.0F - Medium.random() * 20.0F));
                }
                chip = 2;
            }
            final int[] is61 = new int[3];
            final int[] is62 = new int[3];
            final int[] is63 = new int[3];
            for (int i64 = 0; i64 < 3; i64++) {
                is61[i64] = cox[i64] + _mx;
                is63[i64] = coy[i64] + _my;
                is62[i64] = coz[i64] + _mz;
            }
            rot(is61, is63, _mx, _my, cxy, 3);
            rot(is63, is62, _my, _mz, czy, 3);
            rot(is61, is62, _mx, _mz, cxz, 3);
            for (int i65 = 0; i65 < 3; i65++) {
                is61[i65] += dx;
                is63[i65] += dy;
                is62[i65] += dz;
            }
            dx += vx;
            dz += vz;
            dy += vy;
            vy += 7;
            if (is63[0] > Medium.ground) {
                chip = 19;
            }
            rot(is61, is62, Medium.cx, Medium.cz, Medium.xz, 3);
            rot(is63, is62, Medium.cy, Medium.cz, Medium.zy, 3);
            final int[] is66 = new int[3];
            final int[] is67 = new int[3];
            for (int i68 = 0; i68 < 3; i68++) {
                is66[i68] = xs(is61[i68], is62[i68]);
                is67[i68] = ys(is63[i68], is62[i68]);
            }
            final int i69 = (int) (Medium.random() * 3.0F);
            if (bfase != -7) {
                if (i69 == 0) {
                    graphics2d.setColor(new Color(c[0], c[1], c[2]).darker());
                }
                if (i69 == 1) {
                    graphics2d.setColor(new Color(c[0], c[1], c[2]));
                }
                if (i69 == 2) {
                    graphics2d.setColor(new Color(c[0], c[1], c[2]).brighter());
                }
            } else {
                graphics2d.setColor(Color.getHSBColor(hsb[0], hsb[1], hsb[2]));
            }
            graphics2d.fillPolygon(is66, is67, 3);
            chip++;
            if (chip == 20) {
                chip = 0;
            }
        }
        rot(_x, _y, _mx, _my, _xy, n);
        rot(_y, _z, _my, _mz, _yz, n);
        rot(_x, _z, _mx, _mz, _xz, n);
        if ((_xy != 0 || _yz != 0 || _xz != 0) && Medium.trk != 2) {
            projf = 1.0F;
            for (int i70 = 0; i70 < 3; i70++) {
                for (int i71 = 0; i71 < 3; i71++)
                    if (i71 != i70) {
                        projf *= (float) (Math.sqrt((_x[i70] - _x[i71]) * (_x[i70] - _x[i71]) + (_z[i70] - _z[i71]) * (_z[i70] - _z[i71])) / 100.0);
                    }
            }
            projf = projf / 3.0F;
        }
        rot(_x, _z, Medium.cx, Medium.cz, Medium.xz, n);
        boolean bool72 = false;
        final int[] is73 = new int[n];
        final int[] is74 = new int[n];
        int i75 = 500;
        for (int i76 = 0; i76 < n; i76++) {
            is73[i76] = xs(_x[i76], _z[i76]);
            is74[i76] = ys(_y[i76], _z[i76]);
        }
        int i77 = 0;
        int i78 = 1;
        for (int i79 = 0; i79 < n; i79++) {
            for (int i80 = i79; i80 < n; i80++)
                if (i79 != i80 && Math.abs(is73[i79] - is73[i80]) - Math.abs(is74[i79] - is74[i80]) < i75) {
                    i78 = i79;
                    i77 = i80;
                    i75 = Math.abs(is73[i79] - is73[i80]) - Math.abs(is74[i79] - is74[i80]);
                }
        }
        if (is74[i77] < is74[i78]) {
            final int i81 = i77;
            i77 = i78;
            i78 = i81;
        }
        if (spy(_x[i77], _z[i77]) > spy(_x[i78], _z[i78])) {
            bool72 = true;
            int i82 = 0;
            for (int i83 = 0; i83 < n; i83++)
                if (_z[i83] < 50 && _y[i83] > Medium.cy) {
                    bool72 = false;
                } else if (_y[i83] == _y[0]) {
                    i82++;
                }
            if (i82 == n && _y[0] > Medium.cy) {
                bool72 = false;
            }
        }
        rot(_y, _z, Medium.cy, Medium.cz, Medium.zy, n);
        boolean bool84 = true;
        final int[] is85 = new int[n];
        final int[] is86 = new int[n];
        int i87 = 0;
        int i88 = 0;
        int i89 = 0;
        int i90 = 0;
        int i91 = 0;
        for (int i92 = 0; i92 < n; i92++) {
            is85[i92] = xs(_x[i92], _z[i92]);
            is86[i92] = ys(_y[i92], _z[i92]);
            if (is86[i92] < Medium.ih || _z[i92] < 10) {
                i87++;
            }
            if (is86[i92] > Medium.h || _z[i92] < 10) {
                i88++;
            }
            if (is85[i92] < Medium.iw || _z[i92] < 10) {
                i89++;
            }
            if (is85[i92] > Medium.w || _z[i92] < 10) {
                i90++;
            }
            if (_z[i92] < 10) {
                i91++;
            }
        }
        if (i89 == n || i87 == n || i88 == n || i90 == n) {
            bool84 = false;
        }
        if ((Medium.trk == 1 || Medium.trk == 4) && (i89 != 0 || i87 != 0 || i88 != 0 || i90 != 0)) {
            bool84 = false;
        }
        if (Medium.trk == 3 && i91 != 0) {
            bool84 = false;
        }
        if (i91 != 0) {
            bool = true;
        }
        if (bool84 && i36 != -1) {
            int i93 = 0;
            int i94 = 0;
            for (int i95 = 0; i95 < n; i95++) {
                for (int i96 = i95; i96 < n; i96++)
                    if (i95 != i96) {
                        if (Math.abs(is85[i95] - is85[i96]) > i93) {
                            i93 = Math.abs(is85[i95] - is85[i96]);
                        }
                        if (Math.abs(is86[i95] - is86[i96]) > i94) {
                            i94 = Math.abs(is86[i95] - is86[i96]);
                        }
                    }
            }
            if (i93 == 0 || i94 == 0) {
                bool84 = false;
            } else if (i93 < 3 && i94 < 3 && (i36 / i93 > 15 && i36 / i94 > 15 || bool) && (!Medium.lightson || light == 0)) {
                bool84 = false;
            }
        }
        if (bool84) {
            int i97 = 1;
            int i98 = gr;
            if (i98 < 0 && i98 >= -15) {
                i98 = 0;
            }
            if (gr == -11) {
                i98 = -90;
            }
            if (gr == -12) {
                i98 = -75;
            }
            if (gr == -14 || gr == -15) {
                i98 = -50;
            }
            if (glass == 2) {
                i98 = 200;
            }
            if (fs != 0) {
                int i101;
                int i102;
                if (Math.abs(is86[0] - is86[1]) > Math.abs(is86[2] - is86[1])) {
                    i101 = 0;
                    i102 = 2;
                } else {
                    i101 = 2;
                    i102 = 0;
                    i97 *= -1;
                }
                if (is86[1] > is86[i101]) {
                    i97 *= -1;
                }
                if (is85[1] > is85[i102]) {
                    i97 *= -1;
                }
                if (fs != 22) {
                    i97 *= fs;
                    if (i97 == -1) {
                        i98 += 40;
                        i97 = -111;
                    }
                }
            }
            if (Medium.lightson && light == 2) {
                i98 -= 40;
            }
            int i103 = _y[0];
            int i104 = _y[0];
            int i105 = _x[0];
            int i106 = _x[0];
            int i107 = _z[0];
            int i108 = _z[0];
            for (int i109 = 0; i109 < n; i109++) {
                if (_y[i109] > i103) {
                    i103 = _y[i109];
                }
                if (_y[i109] < i104) {
                    i104 = _y[i109];
                }
                if (_x[i109] > i105) {
                    i105 = _x[i109];
                }
                if (_x[i109] < i106) {
                    i106 = _x[i109];
                }
                if (_z[i109] > i107) {
                    i107 = _z[i109];
                }
                if (_z[i109] < i108) {
                    i108 = _z[i109];
                }
            }
            final int i110 = (i103 + i104) / 2;
            final int i111 = (i105 + i106) / 2;
            final int i112 = (i107 + i108) / 2;
            av = (int) Math.sqrt((Medium.cy - i110) * (Medium.cy - i110) + (Medium.cx - i111) * (Medium.cx - i111) + i112 * i112 + i98 * i98 * i98);
            if (Medium.trk == 0 && (av > Medium.fade[disline] || av == 0)) {
                bool84 = false;
            }
            if (i97 == -111 && av > 4500 && !road) {
                bool84 = false;
            }
            if (i97 == -111 && av > 1500) {
                bool = true;
            }
            if (av > 3000 && Medium.adv <= 900) {
                bool = true;
            }
            if (fs == 22 && av < 11200) {
                Medium.lastmaf = i97;
            }
            if (gr == -13 && (!Medium.lastcheck || i36 != -1)) {
                bool84 = false;
            }
            if (master == 2 && av > 1500 && !Medium.crs) {
                bool84 = false;
            }
            if ((gr == -14 || gr == -15 || gr == -12) && (av > 11000 || bool72 || i97 == -111 || Medium.resdown == 2) && Medium.trk != 2 && Medium.trk != 3) {
                bool84 = false;
            }
            if (gr == -11 && av > 11000 && Medium.trk != 2 && Medium.trk != 3) {
                bool84 = false;
            }
            if (glass == 2 && (Medium.trk != 0 || av > 6700)) {
                bool84 = false;
            }
            if (flx != 0 && Medium.random() > 0.3 && flx != 77) {
                bool84 = false;
            }
        }
        if (bool84) {
            float f = (float) (projf / deltaf + 0.3);
            if (bool && !solo) {
                boolean bool113 = false;
                if (f > 1.0F) {
                    if (f >= 1.27) {
                        bool113 = true;
                    }
                    f = 1.0F;
                }
                if (bool113) {
                    f *= 0.89;
                } else {
                    f *= 0.86;
                }
                if (f < 0.37) {
                    f = 0.37F;
                }
                if (gr == -9) {
                    f = 0.7F;
                }
                if (gr == -4) {
                    f = 0.74F;
                }
                if (gr != -7 && Medium.trk == 0 && bool72) {
                    f = 0.32F;
                }
                if (gr == -8 || gr == -14 || gr == -15) {
                    f = 1.0F;
                }
                if (gr == -11 || gr == -12) {
                    f = 0.6F;
                    if (i36 == -1)
                        if (Medium.cpflik || Medium.nochekflk && !Medium.lastcheck) {
                            f = 1.0F;
                        } else {
                            f = 0.76F;
                        }
                }
                if (gr == -13 && i36 == -1)
                    if (Medium.cpflik) {
                        f = 0.0F;
                    } else {
                        f = 0.76F;
                    }
                if (gr == -6) {
                    f = 0.62F;
                }
                if (gr == -5) {
                    f = 0.55F;
                }
            } else {
                if (f > 1.0F) {
                    f = 1.0F;
                }
                if (f < 0.6 || bool72) {
                    f = 0.6F;
                }
            }
            if (project==-1) {
                f = (float) (_last.projf / _last.deltaf + 0.3);

                if (f > 1.0F) {
                    f = 1.0F;
                }
                if (f < 0.6 || bool72) {//yeah its referencing OUR bool72, i dunno man...
                    f = 0.6F;
                }
            } else if (project==1 && _next!=null) {
                f = (float) (_next.projf / _next.deltaf + 0.3);

                if (f > 1.0F) {
                    f = 1.0F;
                }
                if (f < 0.6 || bool72) {//yeah its referencing OUR bool72, i dunno man...
                    f = 0.6F;
                }
            }
            Color color = Color.getHSBColor(hsb[0], hsb[1], hsb[2] * f);
            if (Medium.trk == 1) {
                final float[] fs = new float[3];
                Color.RGBtoHSB(oc[0], oc[1], oc[2], fs);
                fs[0] = 0.15F;
                fs[1] = 0.3F;
                color = Color.getHSBColor(fs[0], fs[1], fs[2] * f + 0.0F);
            }
            if (Medium.trk == 3) {
                final float[] fs = new float[3];
                Color.RGBtoHSB(oc[0], oc[1], oc[2], fs);
                fs[0] = 0.6F;
                fs[1] = 0.14F;
                color = Color.getHSBColor(fs[0], fs[1], fs[2] * f + 0.0F);
            }
            int i114 = color.getRed();
            int i115 = color.getGreen();
            int i116 = color.getBlue();
            if (randomcolor) { //before the dim
                i114 = (int) (ThreadLocalRandom.current().nextDouble() * 255);
                i115 = (int) (ThreadLocalRandom.current().nextDouble() * 255);
                i116 = (int) (ThreadLocalRandom.current().nextDouble() * 255);
            }
            if (Medium.lightson && (light != 0 || (gr == -11 || gr == -12) && i36 == -1)) {
                i114 = oc[0];
                if (i114 > 255) {
                    i114 = 255;
                }
                if (i114 < 0) {
                    i114 = 0;
                }
                i115 = oc[1];
                if (i115 > 255) {
                    i115 = 255;
                }
                if (i115 < 0) {
                    i115 = 0;
                }
                i116 = oc[2];
                if (i116 > 255) {
                    i116 = 255;
                }
                if (i116 < 0) {
                    i116 = 0;
                }
            }
            if (Medium.trk == 0) {
                for (int i117 = 0; i117 < 16; i117++)
                    if (av > Medium.fade[i117]) {
                        i114 = (i114 * Medium.fogd + Medium.cfade[0]) / (Medium.fogd + 1);
                        i115 = (i115 * Medium.fogd + Medium.cfade[1]) / (Medium.fogd + 1);
                        i116 = (i116 * Medium.fogd + Medium.cfade[2]) / (Medium.fogd + 1);
                    }
            }
            graphics2d.setColor(new Color(i114, i115, i116));
            graphics2d.fillPolygon(is85, is86, n);
            if (Medium.trk != 0 && gr == -10) {
                bool = false;
            }
            if (!bool) {
                if (flx == 0) {
                    if (!solo) {
                        i114 = 0;
                        i115 = 0;
                        i116 = 0;
                        if (randoutline) {
                            i114 = (int) (ThreadLocalRandom.current().nextDouble() * 255);
                            i115 = (int) (ThreadLocalRandom.current().nextDouble() * 255);
                            i116 = (int) (ThreadLocalRandom.current().nextDouble() * 255);
                        }
                        if (Medium.lightson && light != 0) {
                            i114 = oc[0] / 2;
                            if (i114 > 255) {
                                i114 = 255;
                            }
                            if (i114 < 0) {
                                i114 = 0;
                            }
                            i115 = oc[1] / 2;
                            if (i115 > 255) {
                                i115 = 255;
                            }
                            if (i115 < 0) {
                                i115 = 0;
                            }
                            i116 = oc[2] / 2;
                            if (i116 > 255) {
                                i116 = 255;
                            }
                            if (i116 < 0) {
                                i116 = 0;
                            }
                        }
                        if (Madness.anti == 1) {
                            graphics2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                        }
                        graphics2d.setColor(new Color(i114, i115, i116));
                        if (customstroke) {
                            graphics2d.setStroke(new BasicStroke(strokewidth, strokecap, strokejoin, strokemtlimit));
                        }
                        graphics2d.drawPolygon(is85, is86, n);
                        if (customstroke) {
                            graphics2d.setStroke(new BasicStroke());
                        }
                        if (Madness.anti == 1) {
                            graphics2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
                        }
                    }
                } else {
                    if (flx == 2) {
                        graphics2d.setColor(new Color(0, 0, 0));
                        graphics2d.drawPolygon(is85, is86, n);
                    }
                    if (flx == 1) {
                        i114 = 0;
                        i115 = (int) (223.0F + 223.0F * (Medium.snap[1] / 100.0F));
                        if (i115 > 255) {
                            i115 = 255;
                        }
                        if (i115 < 0) {
                            i115 = 0;
                        }
                        i116 = (int) (255.0F + 255.0F * (Medium.snap[2] / 100.0F));
                        if (i116 > 255) {
                            i116 = 255;
                        }
                        if (i116 < 0) {
                            i116 = 0;
                        }
                        graphics2d.setColor(new Color(i114, i115, i116));
                        graphics2d.drawPolygon(is85, is86, n);
                        flx = 2;
                    }
                    if (flx == 3) {
                        i114 = 0;
                        i115 = (int) (255.0F + 255.0F * (Medium.snap[1] / 100.0F));
                        if (i115 > 255) {
                            i115 = 255;
                        }
                        if (i115 < 0) {
                            i115 = 0;
                        }
                        i116 = (int) (223.0F + 223.0F * (Medium.snap[2] / 100.0F));
                        if (i116 > 255) {
                            i116 = 255;
                        }
                        if (i116 < 0) {
                            i116 = 0;
                        }
                        graphics2d.setColor(new Color(i114, i115, i116));
                        graphics2d.drawPolygon(is85, is86, n);
                        flx = 2;
                    }
                    if (flx == 77) {
                        graphics2d.setColor(new Color(16, 198, 255));
                        graphics2d.drawPolygon(is85, is86, n);
                        flx = 0;
                    }
                }
            } else if (road && av <= 3000 && Medium.trk == 0 && Medium.fade[0] > 4000) {
                i114 -= 10;
                if (i114 < 0) {
                    i114 = 0;
                }
                i115 -= 10;
                if (i115 < 0) {
                    i115 = 0;
                }
                i116 -= 10;
                if (i116 < 0) {
                    i116 = 0;
                }
                graphics2d.setColor(new Color(i114, i115, i116));
                graphics2d.drawPolygon(is85, is86, n);
            }
            if (gr == -10)
                if (Medium.trk == 0) {
                    i114 = c[0];
                    i115 = c[1];
                    i116 = c[2];
                    if (i36 == -1 && Medium.cpflik) {
                        i114 *= 1.6;
                        if (i114 > 255) {
                            i114 = 255;
                        }
                        i115 *= 1.6;
                        if (i115 > 255) {
                            i115 = 255;
                        }
                        i116 *= 1.6;
                        if (i116 > 255) {
                            i116 = 255;
                        }
                    }
                    for (int i118 = 0; i118 < 16; i118++)
                        if (av > Medium.fade[i118]) {
                            i114 = (i114 * Medium.fogd + Medium.cfade[0]) / (Medium.fogd + 1);
                            i115 = (i115 * Medium.fogd + Medium.cfade[1]) / (Medium.fogd + 1);
                            i116 = (i116 * Medium.fogd + Medium.cfade[2]) / (Medium.fogd + 1);
                        }
                    graphics2d.setColor(new Color(i114, i115, i116));
                    graphics2d.drawPolygon(is85, is86, n);
                } else if (Medium.cpflik && Medium.hit == 5000) {
                    i115 = (int) (ThreadLocalRandom.current().nextDouble() * 115.0);
                    i114 = i115 * 2 - 54;
                    if (i114 < 0) {
                        i114 = 0;
                    }
                    if (i114 > 255) {
                        i114 = 255;
                    }
                    i116 = 202 + i115 * 2;
                    if (i116 < 0) {
                        i116 = 0;
                    }
                    if (i116 > 255) {
                        i116 = 255;
                    }
                    i115 += 101;
                    if (i115 < 0) {
                        i115 = 0;
                    }
                    if (i115 > 255) {
                        i115 = 255;
                    }
                    graphics2d.setColor(new Color(i114, i115, i116));
                    graphics2d.drawPolygon(is85, is86, n);
                }
            if (gr == -18 && Medium.trk == 0) {
                i114 = c[0];
                i115 = c[1];
                i116 = c[2];
                if (Medium.cpflik && Medium.elecr >= 0.0F) {
                    i114 = (int) (25.5F * Medium.elecr);
                    if (i114 > 255) {
                        i114 = 255;
                    }
                    i115 = (int) (128.0F + 12.8F * Medium.elecr);
                    if (i115 > 255) {
                        i115 = 255;
                    }
                    i116 = 255;
                }
                for (int i119 = 0; i119 < 16; i119++)
                    if (av > Medium.fade[i119]) {
                        i114 = (i114 * Medium.fogd + Medium.cfade[0]) / (Medium.fogd + 1);
                        i115 = (i115 * Medium.fogd + Medium.cfade[1]) / (Medium.fogd + 1);
                        i116 = (i116 * Medium.fogd + Medium.cfade[2]) / (Medium.fogd + 1);
                    }
                graphics2d.setColor(new Color(i114, i115, i116));
                graphics2d.drawPolygon(is85, is86, n);
            }
        }
    }

    void deltafntyp() {
        final int i = Math.abs(ox[2] - ox[1]);
        final int i24 = Math.abs(oy[2] - oy[1]);
        final int i25 = Math.abs(oz[2] - oz[1]);
        if (i24 <= i && i24 <= i25) {
            typ = 2;
        }
        if (i <= i24 && i <= i25) {
            typ = 1;
        }
        if (i25 <= i && i25 <= i24) {
            typ = 3;
        }
        deltaf = 1.0F;
        for (int i26 = 0; i26 < 3; i26++) {
            for (int i27 = 0; i27 < 3; i27++)
                if (i27 != i26) {
                    deltaf *= (float) (Math.sqrt((ox[i27] - ox[i26]) * (ox[i27] - ox[i26]) + (oy[i27] - oy[i26]) * (oy[i27] - oy[i26]) + (oz[i27] - oz[i26]) * (oz[i27] - oz[i26])) / 100.0);
                }
        }
        deltaf = deltaf / 3.0F;
    }

    void loadprojf() {
        projf = 1.0F;
        for (int i = 0; i < 3; i++) {
            for (int i28 = 0; i28 < 3; i28++)
                if (i28 != i) {
                    projf *= (float) (Math.sqrt((ox[i] - ox[i28]) * (ox[i] - ox[i28]) + (oz[i] - oz[i28]) * (oz[i] - oz[i28])) / 100.0);
                }
        }
        projf = projf / 3.0F;
    }

    void rot(final int[] is, final int[] is163, final int i, final int i164, final int i165, final int i166) {
        if (i165 != 0) {
            for (int i167 = 0; i167 < i166; i167++) {
                final int i168 = is[i167];
                final int i169 = is163[i167];
                is[i167] = i + (int) ((i168 - i) * Medium.cos(i165) - (i169 - i164) * Medium.sin(i165));
                is163[i167] = i164 + (int) ((i168 - i) * Medium.sin(i165) + (i169 - i164) * Medium.cos(i165));
            }
        }
    }

    void s(final Graphics2D graphics2d, final int i, final int i120, final int i121, final int i122, final int i123, final int i124, final int i125) {
        final int[] is = new int[n];
        final int[] is126 = new int[n];
        final int[] is127 = new int[n];
        for (int i128 = 0; i128 < n; i128++) {
            is[i128] = ox[i128] + i;
            is127[i128] = oy[i128] + i120;
            is126[i128] = oz[i128] + i121;
        }
        rot(is, is127, i, i120, i123, n);
        rot(is127, is126, i120, i121, i124, n);
        rot(is, is126, i, i121, i122, n);
        int i129 = (int) (Medium.crgrnd[0] / 1.5);
        int i130 = (int) (Medium.crgrnd[1] / 1.5);
        int i131 = (int) (Medium.crgrnd[2] / 1.5);
        for (int i132 = 0; i132 < n; i132++) {
            is127[i132] = Medium.ground;
        }
        if (i125 == 0) {
            int i133 = 0;
            int i134 = 0;
            int i135 = 0;
            int i136 = 0;
            for (int i137 = 0; i137 < n; i137++) {
                int i138 = 0;
                int i139 = 0;
                int i140 = 0;
                int i141 = 0;
                for (int i142 = 0; i142 < n; i142++) {
                    if (is[i137] >= is[i142]) {
                        i138++;
                    }
                    if (is[i137] <= is[i142]) {
                        i139++;
                    }
                    if (is126[i137] >= is126[i142]) {
                        i140++;
                    }
                    if (is126[i137] <= is126[i142]) {
                        i141++;
                    }
                }
                if (i138 == n) {
                    i133 = is[i137];
                }
                if (i139 == n) {
                    i134 = is[i137];
                }
                if (i140 == n) {
                    i135 = is126[i137];
                }
                if (i141 == n) {
                    i136 = is126[i137];
                }
            }
            final int i143 = (i133 + i134) / 2;
            final int i144 = (i135 + i136) / 2;
            int i145 = (i143 - Trackers.sx + Medium.x) / 3000;
            if (i145 > Trackers.ncx) {
                i145 = Trackers.ncx;
            }
            if (i145 < 0) {
                i145 = 0;
            }
            int i146 = (i144 - Trackers.sz + Medium.z) / 3000;
            if (i146 > Trackers.ncz) {
                i146 = Trackers.ncz;
            }
            if (i146 < 0) {
                i146 = 0;
            }
            for (int i147 = Trackers.sect[i145][i146].length - 1; i147 >= 0; i147--) {
                final int i148 = Trackers.sect[i145][i146][i147];
                int i149 = 0;
                if (Math.abs(Trackers.zy[i148]) != 90 && Math.abs(Trackers.xy[i148]) != 90 && Trackers.rady[i148] != 801 && Math.abs(i143 - (Trackers.x[i148] - Medium.x)) < Trackers.radx[i148] && Math.abs(i144 - (Trackers.z[i148] - Medium.z)) < Trackers.radz[i148] && (!Trackers.decor[i148] || Medium.resdown != 2)) {
                    i149++;
                }
                if (i149 != 0) {
                    for (int i150 = 0; i150 < n; i150++) {
                        is127[i150] = Trackers.y[i148] - Medium.y;
                        if (Trackers.zy[i148] != 0) {
                            is127[i150] += (is126[i150] - (Trackers.z[i148] - Medium.z - Trackers.radz[i148])) * Medium.sin(Trackers.zy[i148]) / Medium.sin(90 - Trackers.zy[i148]) - Trackers.radz[i148] * Medium.sin(Trackers.zy[i148]) / Medium.sin(90 - Trackers.zy[i148]);
                        }
                        if (Trackers.xy[i148] != 0) {
                            is127[i150] += (is[i150] - (Trackers.x[i148] - Medium.x - Trackers.radx[i148])) * Medium.sin(Trackers.xy[i148]) / Medium.sin(90 - Trackers.xy[i148]) - Trackers.radx[i148] * Medium.sin(Trackers.xy[i148]) / Medium.sin(90 - Trackers.xy[i148]);
                        }
                    }
                    i129 = (int) (Trackers.c[i148][0] / 1.5);
                    i130 = (int) (Trackers.c[i148][1] / 1.5);
                    i131 = (int) (Trackers.c[i148][2] / 1.5);
                    break;
                }
            }
        }
        boolean bool = true;
        final int[] is151 = new int[n];
        final int[] is152 = new int[n];
        if (i125 == 2) {
            i129 = 87;
            i130 = 85;
            i131 = 57;
        } else {
            for (int i153 = 0; i153 < Medium.nsp; i153++) {
                for (int i154 = 0; i154 < n; i154++)
                    if (Math.abs(is[i154] - Medium.spx[i153]) < Medium.sprad[i153] && Math.abs(is126[i154] - Medium.spz[i153]) < Medium.sprad[i153]) {
                        bool = false;
                    }
            }
        }
        if (bool) {
            rot(is, is126, Medium.cx, Medium.cz, Medium.xz, n);
            rot(is127, is126, Medium.cy, Medium.cz, Medium.zy, n);
            int i155 = 0;
            int i156 = 0;
            int i157 = 0;
            int i158 = 0;
            for (int i159 = 0; i159 < n; i159++) {
                is151[i159] = xs(is[i159], is126[i159]);
                is152[i159] = ys(is127[i159], is126[i159]);
                if (is152[i159] < Medium.ih || is126[i159] < 10) {
                    i155++;
                }
                if (is152[i159] > Medium.h || is126[i159] < 10) {
                    i156++;
                }
                if (is151[i159] < Medium.iw || is126[i159] < 10) {
                    i157++;
                }
                if (is151[i159] > Medium.w || is126[i159] < 10) {
                    i158++;
                }
            }
            if (i157 == n || i155 == n || i156 == n || i158 == n) {
                bool = false;
            }
        }
        if (bool) {
            for (int i160 = 0; i160 < 16; i160++)
                if (av > Medium.fade[i160]) {
                    i129 = (i129 * Medium.fogd + Medium.cfade[0]) / (Medium.fogd + 1);
                    i130 = (i130 * Medium.fogd + Medium.cfade[1]) / (Medium.fogd + 1);
                    i131 = (i131 * Medium.fogd + Medium.cfade[2]) / (Medium.fogd + 1);
                }
            graphics2d.setColor(new Color(i129, i130, i131));
            graphics2d.fillPolygon(is151, is152, n);
        }
    }

    private int spy(final int i, final int i170) {
        return (int) Math.sqrt((i - Medium.cx) * (i - Medium.cx) + i170 * i170);
    }

    private int xs(final int i, int i161) {
        if (i161 < Medium.cz) {
            i161 = Medium.cz;
        }
        return (i161 - Medium.focusPoint) * (Medium.cx - i) / i161 + i;
    }

    private int ys(final int i, int i162) {
        if (i162 < Medium.cz) {
            i162 = Medium.cz;
        }
        return (i162 - Medium.focusPoint) * (Medium.cy - i) / i162 + i;
    }

    @Override
    public int compareTo(final Plane o) {
        if (av != o.av) {
            if (av < o.av)
                return 1;
            else
                return -1;
        }
        return 0;
    }
}
//package nfm.open;
/* Record - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.Color;

class Record {
    static final ContO[][] car = new ContO[6][8];
    static int caught = 0;
    static private final int[] checkpoint = new int[300];
    static int closefinish = 0;
    static final int[] cntdest = new int[8];
    static private int cntf = 50;
    static final int[] dest = new int[8];
    static final int[] fix = new int[8];
    static boolean hcaught = false;
    static private final int[] hcheckpoint = new int[300];
    static private final int[] hdest = {
            -1, -1, -1, -1, -1, -1, -1, -1
    };
    static final int[] hfix = {
            -1, -1, -1, -1, -1, -1, -1, -1
    };
    static private final boolean[] hlastcheck = new boolean[300];
    static private final int[][][] hmagx = new int[8][4][7];
    static private final int[][][] hmagy = new int[8][4][7];
    static private final int[][][] hmagz = new int[8][4][7];
    static private final boolean[][] hmtouch = new boolean[8][7];
    static private final float[][] hrcx = new float[8][200];
    static private final float[][] hrcy = new float[8][200];
    static private final float[][] hrcz = new float[8][200];
    static private final int[][] hrspark = new int[8][200];
    static private final int[][][] hrx = new int[8][4][7];
    static private final int[][][] hry = new int[8][4][7];
    static private final int[][][] hrz = new int[8][4][7];
    static private final int[][][] hscx = new int[8][20][30];
    static private final int[][][] hscz = new int[8][20][30];
    static private final float[][][] hsmag = new float[8][20][30];
    static private final int[][] hsprk = new int[8][200];
    static private final int[] hsquash = {
            0, 0, 0, 0, 0, 0, 0, 0
    };
    static private final int[][] hsrx = new int[8][200];
    static private final int[][] hsry = new int[8][200];
    static private final int[][] hsrz = new int[8][200];
    static private final int[][][] hsspark = new int[8][20][30];
    static private final int[][][] hsx = new int[8][20][30];
    static private final int[][][] hsy = new int[8][20][30];
    static private final int[][][] hsz = new int[8][20][30];
    static private final int[][] hwxz = new int[300][8];
    static private final int[][] hwzy = new int[300][8];
    static private final int[][] hx = new int[300][8];
    static private final int[][] hxy = new int[300][8];
    static private final int[][] hxz = new int[300][8];
    static private final int[][] hy = new int[300][8];
    static private final int[][] hz = new int[300][8];
    static private final int[][] hzy = new int[300][8];
    static private final boolean[] lastcheck = new boolean[300];
    static private int lastfr = 0;
    static private final int[][][] magx = new int[8][4][7];
    static private final int[][][] magy = new int[8][4][7];
    static private final int[][][] magz = new int[8][4][7];
    static private final boolean[][] mtouch = new boolean[8][7];
    static private final int[] nr = new int[8];
    static private final int[][] nrx = new int[8][4];
    static private final int[][] nry = new int[8][4];
    static private final int[][] nrz = new int[8][4];
    static private final int[][] ns = new int[8][20];
    static final ContO[] ocar = new ContO[8];
    static int powered = 0;
    static private boolean prepit = true;
    static private final float[][] rcx = new float[8][200];
    static private final float[][] rcy = new float[8][200];
    static private final float[][] rcz = new float[8][200];
    static private final int[][] rspark = new int[8][200];
    static private final int[][][] rx = new int[8][4][7];
    static private final int[][][] ry = new int[8][4][7];
    static private final int[][][] rz = new int[8][4][7];
    static private final int[][][] scx = new int[8][20][30];
    static private final int[][][] scz = new int[8][20][30];
    static private final float[][][] smag = new float[8][20][30];
    static private final int[][] sprk = new int[8][200];
    static private final int[][] squash = new int[6][8];
    static private final int[][] srx = new int[8][200];
    static private final int[][] sry = new int[8][200];
    static private final int[][] srz = new int[8][200];
    static private final int[][][] sspark = new int[8][20][30];
    static final ContO[] starcar = new ContO[8];
    static private final int[][][] sx = new int[8][20][30];
    static private final int[][][] sy = new int[8][20][30];
    static private final int[][][] sz = new int[8][20][30];
    static int wasted = 0;
    static int whenwasted = 0;
    static private final int[][] wxz = new int[300][8];
    static private final int[][] wzy = new int[300][8];
    static private final int[][] x = new int[300][8];
    static private final int[][] xy = new int[300][8];
    static private final int[][] xz = new int[300][8];
    static private final int[][] y = new int[300][8];
    static private final int[][] z = new int[300][8];
    static private final int[][] zy = new int[300][8];

    Record() {
        caught = 0;
        cotchinow(0);
    }

    static private void chipx(final int i, float f, final ContO conto, final Mad mad) {
        if (Math.abs(f) > 100.0F) {
            if (f > 100.0F) {
                f -= 100.0F;
            }
            if (f < -100.0F) {
                f += 100.0F;
            }
            for (int i68 = 0; i68 < conto.npl; i68++) {
                float f69 = 0.0F;
                for (int i70 = 0; i70 < conto.p[i68].n; i70++)
                    if (conto.p[i68].wz == 0 && py(conto.keyx[i], conto.p[i68].ox[i70], conto.keyz[i], conto.p[i68].oz[i70]) < mad.stat.clrad) {
                        f69 = f / 20.0F * Medium.random();
                    }
                if (f69 != 0.0F && Math.abs(f69) >= 1.0F) {
                    conto.p[i68].chip = 1;
                    conto.p[i68].ctmag = f69;
                }
            }
        }
    }

    static private void chipz(final int i, float f, final ContO conto, final Mad mad) {
        if (Math.abs(f) > 100.0F) {
            if (f > 100.0F) {
                f -= 100.0F;
            }
            if (f < -100.0F) {
                f += 100.0F;
            }
            for (int i71 = 0; i71 < conto.npl; i71++) {
                float f72 = 0.0F;
                for (int i73 = 0; i73 < conto.p[i71].n; i73++)
                    if (conto.p[i71].wz == 0 && py(conto.keyx[i], conto.p[i71].ox[i73], conto.keyz[i], conto.p[i71].oz[i73]) < mad.stat.clrad) {
                        f72 = f / 20.0F * Medium.random();
                    }
                if (f72 != 0.0F && Math.abs(f72) >= 1.0F) {
                    conto.p[i71].chip = 1;
                    conto.p[i71].ctmag = f72;
                }
            }
        }
    }

    static void cotchinow(final int i) {
        if (caught >= 300) {
            wasted = i;
            for (int i6 = 0; i6 < 8; i6++) {
                starcar[i6] = new ContO(car[0][i6], 0, 0, 0, 0);
                hsquash[i6] = squash[0][i6];
                hfix[i6] = fix[i6];
                hdest[i6] = dest[i6];
            }
            for (int i7 = 0; i7 < 300; i7++) {
                for (int i8 = 0; i8 < 8; i8++) {
                    hx[i7][i8] = x[i7][i8];
                    hy[i7][i8] = y[i7][i8];
                    hz[i7][i8] = z[i7][i8];
                    hxy[i7][i8] = xy[i7][i8];
                    hzy[i7][i8] = zy[i7][i8];
                    hxz[i7][i8] = xz[i7][i8];
                    hwxz[i7][i8] = wxz[i7][i8];
                    hwzy[i7][i8] = wzy[i7][i8];
                }
                hcheckpoint[i7] = checkpoint[i7];
                hlastcheck[i7] = lastcheck[i7];
            }
            for (int i9 = 0; i9 < 8; i9++) {
                for (int i10 = 0; i10 < 20; i10++) {
                    for (int i11 = 0; i11 < 30; i11++) {
                        hsspark[i9][i10][i11] = sspark[i9][i10][i11];
                        hsx[i9][i10][i11] = sx[i9][i10][i11];
                        hsy[i9][i10][i11] = sy[i9][i10][i11];
                        hsz[i9][i10][i11] = sz[i9][i10][i11];
                        hsmag[i9][i10][i11] = smag[i9][i10][i11];
                        hscx[i9][i10][i11] = scx[i9][i10][i11];
                        hscz[i9][i10][i11] = scz[i9][i10][i11];
                    }
                }
                for (int i12 = 0; i12 < 200; i12++) {
                    hrspark[i9][i12] = rspark[i9][i12];
                    hsprk[i9][i12] = sprk[i9][i12];
                    hsrx[i9][i12] = srx[i9][i12];
                    hsry[i9][i12] = sry[i9][i12];
                    hsrz[i9][i12] = srz[i9][i12];
                    hrcx[i9][i12] = rcx[i9][i12];
                    hrcy[i9][i12] = rcy[i9][i12];
                    hrcz[i9][i12] = rcz[i9][i12];
                }
            }
            for (int i13 = 0; i13 < 8; i13++) {
                for (int i14 = 0; i14 < 4; i14++) {
                    for (int i15 = 0; i15 < 7; i15++) {
                        hry[i13][i14][i15] = ry[i13][i14][i15];
                        hmagy[i13][i14][i15] = magy[i13][i14][i15];
                        hrx[i13][i14][i15] = rx[i13][i14][i15];
                        hmagx[i13][i14][i15] = magx[i13][i14][i15];
                        hrz[i13][i14][i15] = rz[i13][i14][i15];
                        hmagz[i13][i14][i15] = magz[i13][i14][i15];
                    }
                }
            }
            for (int i16 = 0; i16 < 8; i16++) {
                System.arraycopy(mtouch[i16], 0, hmtouch[i16], 0, 7);
            }
            hcaught = true;
        }
    }

    static void play(final ContO conto, final Mad mad, final int i, final int i30) {
        conto.x = x[i30][i];
        conto.y = y[i30][i];
        conto.z = z[i30][i];
        conto.zy = zy[i30][i];
        conto.xy = xy[i30][i];
        conto.xz = xz[i30][i];
        conto.wxz = wxz[i30][i];
        conto.wzy = wzy[i30][i];
        if (i == 0) {
            Medium.checkpoint = checkpoint[i30];
            Medium.lastcheck = lastcheck[i30];
        }
        if (i30 == 0) {
            cntdest[i] = 0;
        }
        if (dest[i] == i30) {
            cntdest[i] = 7;
        }
        if (i30 == 0 && dest[i] < -1) {
            for (int i31 = 0; i31 < conto.npl; i31++)
                if (conto.p[i31].wz == 0 || conto.p[i31].gr == -17 || conto.p[i31].gr == -16) {
                    conto.p[i31].embos = 13;
                }
        }
        if (cntdest[i] != 0) {
            for (int i32 = 0; i32 < conto.npl; i32++)
                if (conto.p[i32].wz == 0 || conto.p[i32].gr == -17 || conto.p[i32].gr == -16) {
                    conto.p[i32].embos = 1;
                }
            cntdest[i]--;
        }
        for (int i33 = 0; i33 < 20; i33++) {
            for (int i34 = 0; i34 < 30; i34++)
                if (sspark[i][i33][i34] == i30) {
                    conto.stg[i33] = 1;
                    conto.sx[i33] = sx[i][i33][i34];
                    conto.sy[i33] = sy[i][i33][i34];
                    conto.sz[i33] = sz[i][i33][i34];
                    conto.osmag[i33] = smag[i][i33][i34];
                    conto.scx[i33] = scx[i][i33][i34];
                    conto.scz[i33] = scz[i][i33][i34];
                }
        }
        for (int i35 = 0; i35 < 200; i35++)
            if (rspark[i][i35] == i30) {
                conto.sprk = sprk[i][i35];
                conto.srx = srx[i][i35];
                conto.sry = sry[i][i35];
                conto.srz = srz[i][i35];
                conto.rcx = rcx[i][i35];
                conto.rcy = rcy[i][i35];
                conto.rcz = rcz[i][i35];
            }
        for (int i36 = 0; i36 < 4; i36++) {
            for (int i37 = 0; i37 < 7; i37++) {
                if (ry[i][i36][i37] == i30) {
                    regy(i36, magy[i][i36][i37], mtouch[i][i37], conto, mad);
                }
                if (rx[i][i36][i37] == i30) {
                    regx(i36, magx[i][i36][i37], conto, mad);
                }
                if (rz[i][i36][i37] == i30) {
                    regz(i36, magz[i][i36][i37], conto, mad);
                }
            }
        }
    }

    static void playh(final ContO conto, final Mad mad, final int i, final int i38, final int i39) {
        conto.x = hx[i38][i];
        conto.y = hy[i38][i];
        conto.z = hz[i38][i];
        conto.zy = hzy[i38][i];
        conto.xy = hxy[i38][i];
        conto.xz = hxz[i38][i];
        conto.wxz = hwxz[i38][i];
        conto.wzy = hwzy[i38][i];
        if (i == i39) {
            Medium.checkpoint = hcheckpoint[i38];
            Medium.lastcheck = hlastcheck[i38];
        }
        if (i38 == 0) {
            cntdest[i] = 0;
        }
        if (hdest[i] == i38) {
            cntdest[i] = 7;
        }
        if (i38 == 0 && hdest[i] < -1) {
            for (int i40 = 0; i40 < conto.npl; i40++)
                if (conto.p[i40].wz == 0 || conto.p[i40].gr == -17 || conto.p[i40].gr == -16) {
                    conto.p[i40].embos = 13;
                }
        }
        if (cntdest[i] != 0) {
            for (int i41 = 0; i41 < conto.npl; i41++)
                if (conto.p[i41].wz == 0 || conto.p[i41].gr == -17 || conto.p[i41].gr == -16) {
                    conto.p[i41].embos = 1;
                }
            cntdest[i]--;
        }
        for (int i42 = 0; i42 < 20; i42++) {
            for (int i43 = 0; i43 < 30; i43++)
                if (hsspark[i][i42][i43] == i38) {
                    conto.stg[i42] = 1;
                    conto.sx[i42] = hsx[i][i42][i43];
                    conto.sy[i42] = hsy[i][i42][i43];
                    conto.sz[i42] = hsz[i][i42][i43];
                    conto.osmag[i42] = hsmag[i][i42][i43];
                    conto.scx[i42] = hscx[i][i42][i43];
                    conto.scz[i42] = hscz[i][i42][i43];
                }
        }
        for (int i44 = 0; i44 < 200; i44++)
            if (hrspark[i][i44] == i38) {
                conto.sprk = hsprk[i][i44];
                conto.srx = hsrx[i][i44];
                conto.sry = hsry[i][i44];
                conto.srz = hsrz[i][i44];
                conto.rcx = hrcx[i][i44];
                conto.rcy = hrcy[i][i44];
                conto.rcz = hrcz[i][i44];
            }
        for (int i45 = 0; i45 < 4; i45++) {
            for (int i46 = 0; i46 < 7; i46++) {
                if (hry[i][i45][i46] == i38 && lastfr != i38) {
                    regy(i45, hmagy[i][i45][i46], hmtouch[i][i46], conto, mad);
                }
                if (hrx[i][i45][i46] == i38)
                    if (lastfr != i38) {
                        regx(i45, hmagx[i][i45][i46], conto, mad);
                    } else {
                        chipx(i45, hmagx[i][i45][i46], conto, mad);
                    }
                if (hrz[i][i45][i46] == i38)
                    if (lastfr != i38) {
                        regz(i45, hmagz[i][i45][i46], conto, mad);
                    } else {
                        chipz(i45, hmagz[i][i45][i46], conto, mad);
                    }
            }
        }
        lastfr = i38;
    }

    static private int py(final int i, final int i74, final int i75, final int i76) {
        return (i - i74) * (i - i74) + (i75 - i76) * (i75 - i76);
    }

    static void rec(final ContO conto, final int i, final int i18, final int i19, final int i20, final int i21) {
        if (i == i21) {
            caught++;
        }
        if (cntf == 50) {
            for (int i22 = 0; i22 < 5; i22++) {
                car[i22][i] = new ContO(car[i22 + 1][i], 0, 0, 0, 0);
                squash[i22][i] = squash[i22 + 1][i];
            }
            car[5][i] = new ContO(conto, 0, 0, 0, 0);
            squash[5][i] = i18;
            cntf = 0;
        } else {
            cntf++;
        }
        fix[i]--;
        if (i20 != 0) {
            dest[i]--;
        }
        if (dest[i] == 230)
            if (i == i21) {
                cotchinow(i21);
                whenwasted = 229;
            } else if (i19 != 0) {
                cotchinow(i);
                whenwasted = 165 + i19;
            }
        for (int i23 = 0; i23 < 299; i23++) {
            x[i23][i] = x[i23 + 1][i];
            y[i23][i] = y[i23 + 1][i];
            z[i23][i] = z[i23 + 1][i];
            zy[i23][i] = zy[i23 + 1][i];
            xy[i23][i] = xy[i23 + 1][i];
            xz[i23][i] = xz[i23 + 1][i];
            wxz[i23][i] = wxz[i23 + 1][i];
            wzy[i23][i] = wzy[i23 + 1][i];
        }
        x[299][i] = conto.x;
        y[299][i] = conto.y;
        z[299][i] = conto.z;
        xy[299][i] = conto.xy;
        zy[299][i] = conto.zy;
        xz[299][i] = conto.xz;
        wxz[299][i] = conto.wxz;
        wzy[299][i] = conto.wzy;
        if (i == i21) {
            for (int i24 = 0; i24 < 299; i24++) {
                checkpoint[i24] = checkpoint[i24 + 1];
                lastcheck[i24] = lastcheck[i24 + 1];
            }
            checkpoint[299] = Medium.checkpoint;
            lastcheck[299] = Medium.lastcheck;
        }
        for (int i25 = 0; i25 < 20; i25++) {
            if (conto.stg != null && conto.stg[i25] == 1) {
                sspark[i][i25][ns[i][i25]] = 300;
                sx[i][i25][ns[i][i25]] = conto.sx[i25];
                sy[i][i25][ns[i][i25]] = conto.sy[i25];
                sz[i][i25][ns[i][i25]] = conto.sz[i25];
                smag[i][i25][ns[i][i25]] = conto.osmag[i25];
                scx[i][i25][ns[i][i25]] = conto.scx[i25];
                scz[i][i25][ns[i][i25]] = conto.scz[i25];
                ns[i][i25]++;
                if (ns[i][i25] == 30) {
                    ns[i][i25] = 0;
                }
            }
            for (int i26 = 0; i26 < 30; i26++) {
                sspark[i][i25][i26]--;
            }
        }
        if (conto.sprk != 0) {
            rspark[i][nr[i]] = 300;
            sprk[i][nr[i]] = conto.sprk;
            srx[i][nr[i]] = conto.srx;
            sry[i][nr[i]] = conto.sry;
            srz[i][nr[i]] = conto.srz;
            rcx[i][nr[i]] = conto.rcx;
            rcy[i][nr[i]] = conto.rcy;
            rcz[i][nr[i]] = conto.rcz;
            nr[i]++;
            if (nr[i] == 200) {
                nr[i] = 0;
            }
        }
        for (int i27 = 0; i27 < 200; i27++) {
            rspark[i][i27]--;
        }
        for (int i28 = 0; i28 < 4; i28++) {
            for (int i29 = 0; i29 < 7; i29++) {
                ry[i][i28][i29]--;
                rx[i][i28][i29]--;
                rz[i][i28][i29]--;
            }
        }
    }

    static void recx(final int i, final float f, final int i48) {
        rx[i48][i][nry[i48][i]] = 300;
        magx[i48][i][nry[i48][i]] = (int) f;
        nrx[i48][i]++;
        if (nrx[i48][i] == 7) {
            nrx[i48][i] = 0;
        }
    }

    static void recy(final int i, final float f, final boolean bool, final int i47) {
        ry[i47][i][nry[i47][i]] = 300;
        magy[i47][i][nry[i47][i]] = (int) f;
        mtouch[i47][nry[i47][i]] = bool;
        nry[i47][i]++;
        if (nry[i47][i] == 7) {
            nry[i47][i] = 0;
        }
    }

    static void recz(final int i, final float f, final int i49) {
        rz[i49][i][nry[i49][i]] = 300;
        magz[i49][i][nry[i49][i]] = (int) f;
        nrz[i49][i]++;
        if (nrz[i49][i] == 7) {
            nrz[i49][i] = 0;
        }
    }

    static private void regx(final int i, float f, final ContO conto, final Mad mad) {
        if (Math.abs(f) > 100.0F) {
            if (f > 100.0F) {
                f -= 100.0F;
            }
            if (f < -100.0F) {
                f += 100.0F;
            }
            for (int i62 = 0; i62 < conto.npl; i62++) {
                float f63 = 0.0F;
                for (int i64 = 0; i64 < conto.p[i62].n; i64++)
                    if (conto.p[i62].wz == 0 && py(conto.keyx[i], conto.p[i62].ox[i64], conto.keyz[i], conto.p[i62].oz[i64]) < mad.stat.clrad) {
                        f63 = f / 20.0F * Medium.random();
                        conto.p[i62].oz[i64] -= f63 * Medium.sin(conto.xz) * Medium.cos(conto.zy);
                        conto.p[i62].ox[i64] += f63 * Medium.cos(conto.xz) * Medium.cos(conto.xy);
                    }
                if (f63 != 0.0F) {
                    if (Math.abs(f63) >= 1.0F) {
                        conto.p[i62].chip = 1;
                        conto.p[i62].ctmag = f63;
                    }
                    if (!conto.p[i62].nocol && conto.p[i62].glass != 1) {
                        if (conto.p[i62].bfase > 20 && conto.p[i62].hsb[1] > 0.2) {
                            conto.p[i62].hsb[1] = 0.2F;
                        }
                        if (conto.p[i62].bfase > 30) {
                            if (conto.p[i62].hsb[2] < 0.5) {
                                conto.p[i62].hsb[2] = 0.5F;
                            }
                            if (conto.p[i62].hsb[1] > 0.1) {
                                conto.p[i62].hsb[1] = 0.1F;
                            }
                        }
                        if (conto.p[i62].bfase > 40) {
                            conto.p[i62].hsb[1] = 0.05F;
                        }
                        if (conto.p[i62].bfase > 50) {
                            if (conto.p[i62].hsb[2] > 0.8) {
                                conto.p[i62].hsb[2] = 0.8F;
                            }
                            conto.p[i62].hsb[0] = 0.075F;
                            conto.p[i62].hsb[1] = 0.05F;
                        }
                        if (conto.p[i62].bfase > 60) {
                            conto.p[i62].hsb[0] = 0.05F;
                        }
                        conto.p[i62].bfase += Math.abs(f63);
                        new Color(conto.p[i62].c[0], conto.p[i62].c[1], conto.p[i62].c[2]);
                        final Color color = Color.getHSBColor(conto.p[i62].hsb[0], conto.p[i62].hsb[1], conto.p[i62].hsb[2]);
                        conto.p[i62].c[0] = color.getRed();
                        conto.p[i62].c[1] = color.getGreen();
                        conto.p[i62].c[2] = color.getBlue();
                    }
                    if (conto.p[i62].glass == 1) {
                        conto.p[i62].gr += Math.abs(f63 * 1.5);
                    }
                }
            }
        }
    }

    static private void regy(final int i, float f, final boolean bool, final ContO conto, final Mad mad) {
        if (f > 100.0F) {
            f -= 100.0F;
            int i50 = 0;
            int i51 = 0;
            int i52 = conto.zy;
            int i53 = conto.xy;
            for (/**/; i52 < 360; i52 += 360) {

            }
            for (/**/; i52 > 360; i52 -= 360) {

            }
            if (i52 < 210 && i52 > 150) {
                i50 = -1;
            }
            if (i52 > 330 || i52 < 30) {
                i50 = 1;
            }
            for (/**/; i53 < 360; i53 += 360) {

            }
            for (/**/; i53 > 360; i53 -= 360) {

            }
            if (i53 < 210 && i53 > 150) {
                i51 = -1;
            }
            if (i53 > 330 || i53 < 30) {
                i51 = 1;
            }
            if (i51 * i50 == 0 || bool) {
                for (int i54 = 0; i54 < conto.npl; i54++) {
                    float f55 = 0.0F;
                    for (int i56 = 0; i56 < conto.p[i54].n; i56++)
                        if (conto.p[i54].wz == 0 && py(conto.keyx[i], conto.p[i54].ox[i56], conto.keyz[i], conto.p[i54].oz[i56]) < mad.stat.clrad) {
                            f55 = f / 20.0F * Medium.random();
                            conto.p[i54].oz[i56] += f55 * Medium.sin(i52);
                            conto.p[i54].ox[i56] -= f55 * Medium.sin(i53);
                        }
                    if (f55 != 0.0F) {
                        if (Math.abs(f55) >= 1.0F) {
                            conto.p[i54].chip = 1;
                            conto.p[i54].ctmag = f55;
                        }
                        if (!conto.p[i54].nocol && conto.p[i54].glass != 1) {
                            if (conto.p[i54].bfase > 20 && conto.p[i54].hsb[1] > 0.2) {
                                conto.p[i54].hsb[1] = 0.2F;
                            }
                            if (conto.p[i54].bfase > 30) {
                                if (conto.p[i54].hsb[2] < 0.5) {
                                    conto.p[i54].hsb[2] = 0.5F;
                                }
                                if (conto.p[i54].hsb[1] > 0.1) {
                                    conto.p[i54].hsb[1] = 0.1F;
                                }
                            }
                            if (conto.p[i54].bfase > 40) {
                                conto.p[i54].hsb[1] = 0.05F;
                            }
                            if (conto.p[i54].bfase > 50) {
                                if (conto.p[i54].hsb[2] > 0.8) {
                                    conto.p[i54].hsb[2] = 0.8F;
                                }
                                conto.p[i54].hsb[0] = 0.075F;
                                conto.p[i54].hsb[1] = 0.05F;
                            }
                            if (conto.p[i54].bfase > 60) {
                                conto.p[i54].hsb[0] = 0.05F;
                            }
                            conto.p[i54].bfase += f55;
                            new Color(conto.p[i54].c[0], conto.p[i54].c[1], conto.p[i54].c[2]);
                            final Color color = Color.getHSBColor(conto.p[i54].hsb[0], conto.p[i54].hsb[1], conto.p[i54].hsb[2]);
                            conto.p[i54].c[0] = color.getRed();
                            conto.p[i54].c[1] = color.getGreen();
                            conto.p[i54].c[2] = color.getBlue();
                        }
                        if (conto.p[i54].glass == 1) {
                            conto.p[i54].gr += Math.abs(f55 * 1.5);
                        }
                    }
                }
            }
            if (i51 * i50 == -1) {
                int i57 = 0;
                int i58 = 1;
                for (int i59 = 0; i59 < conto.npl; i59++) {
                    float f60 = 0.0F;
                    for (int i61 = 0; i61 < conto.p[i59].n; i61++)
                        if (conto.p[i59].wz == 0) {
                            f60 = f / 15.0F * Medium.random();
                            if ((Math.abs(conto.p[i59].oy[i61] - mad.stat.flipy - squash[0][mad.im]) < mad.stat.msquash * 3 || conto.p[i59].oy[i61] < mad.stat.flipy + squash[0][mad.im]) && squash[0][mad.im] < mad.stat.msquash) {
                                conto.p[i59].oy[i61] += f60;
                                i57 += f60;
                                i58++;
                            }
                        }
                    if (conto.p[i59].glass == 1) {
                        conto.p[i59].gr += 5;
                    } else if (f60 != 0.0F) {
                        conto.p[i59].bfase += f60;
                    }
                    if (Math.abs(f60) >= 1.0F) {
                        conto.p[i59].chip = 1;
                        conto.p[i59].ctmag = f60;
                    }
                }
                squash[0][mad.im] += i57 / i58;
            }
        }
    }

    static private void regz(final int i, float f, final ContO conto, final Mad mad) {
        if (Math.abs(f) > 100.0F) {
            if (f > 100.0F) {
                f -= 100.0F;
            }
            if (f < -100.0F) {
                f += 100.0F;
            }
            for (int i65 = 0; i65 < conto.npl; i65++) {
                float f66 = 0.0F;
                for (int i67 = 0; i67 < conto.p[i65].n; i67++)
                    if (conto.p[i65].wz == 0 && py(conto.keyx[i], conto.p[i65].ox[i67], conto.keyz[i], conto.p[i65].oz[i67]) < mad.stat.clrad) {
                        f66 = f / 20.0F * Medium.random();
                        conto.p[i65].oz[i67] += f66 * Medium.cos(conto.xz) * Medium.cos(conto.zy);
                        conto.p[i65].ox[i67] += f66 * Medium.sin(conto.xz) * Medium.cos(conto.xy);
                    }
                if (f66 != 0.0F) {
                    if (Math.abs(f66) >= 1.0F) {
                        conto.p[i65].chip = 1;
                        conto.p[i65].ctmag = f66;
                    }
                    if (!conto.p[i65].nocol && conto.p[i65].glass != 1) {
                        if (conto.p[i65].bfase > 20 && conto.p[i65].hsb[1] > 0.2) {
                            conto.p[i65].hsb[1] = 0.2F;
                        }
                        if (conto.p[i65].bfase > 30) {
                            if (conto.p[i65].hsb[2] < 0.5) {
                                conto.p[i65].hsb[2] = 0.5F;
                            }
                            if (conto.p[i65].hsb[1] > 0.1) {
                                conto.p[i65].hsb[1] = 0.1F;
                            }
                        }
                        if (conto.p[i65].bfase > 40) {
                            conto.p[i65].hsb[1] = 0.05F;
                        }
                        if (conto.p[i65].bfase > 50) {
                            if (conto.p[i65].hsb[2] > 0.8) {
                                conto.p[i65].hsb[2] = 0.8F;
                            }
                            conto.p[i65].hsb[0] = 0.075F;
                            conto.p[i65].hsb[1] = 0.05F;
                        }
                        if (conto.p[i65].bfase > 60) {
                            conto.p[i65].hsb[0] = 0.05F;
                        }
                        conto.p[i65].bfase += Math.abs(f66);
                        new Color(conto.p[i65].c[0], conto.p[i65].c[1], conto.p[i65].c[2]);
                        final Color color = Color.getHSBColor(conto.p[i65].hsb[0], conto.p[i65].hsb[1], conto.p[i65].hsb[2]);
                        conto.p[i65].c[0] = color.getRed();
                        conto.p[i65].c[1] = color.getGreen();
                        conto.p[i65].c[2] = color.getBlue();
                    }
                    if (conto.p[i65].glass == 1) {
                        conto.p[i65].gr += Math.abs(f66 * 1.5);
                    }
                }
            }
        }
    }

    static void reset(final ContO[] contos) {
        caught = 0;
        hcaught = false;
        wasted = 0;
        whenwasted = 0;
        closefinish = 0;
        powered = 0;
        for (int i = 0; i < 8; i++) {
            if (prepit) {
                starcar[i] = new ContO(contos[i], 0, 0, 0, 0);
            }
            fix[i] = -1;
            dest[i] = -1;
            cntdest[i] = 0;
        }
        for (int i = 0; i < 6; i++) {
            for (int i0 = 0; i0 < 8; i0++) {
                car[i][i0] = new ContO(contos[i0], 0, 0, 0, 0);
                squash[i][i0] = 0;
            }
        }
        for (int i = 0; i < 8; i++) {
            nr[i] = 0;
            for (int i1 = 0; i1 < 200; i1++) {
                rspark[i][i1] = -1;
            }
            for (int i2 = 0; i2 < 20; i2++) {
                ns[i][i2] = 0;
                for (int i3 = 0; i3 < 30; i3++) {
                    sspark[i][i2][i3] = -1;
                }
            }
            for (int i4 = 0; i4 < 4; i4++) {
                nry[i][i4] = 0;
                nrx[i][i4] = 0;
                nrz[i][i4] = 0;
                for (int i5 = 0; i5 < 7; i5++) {
                    ry[i][i4][i5] = -1;
                    rx[i][i4][i5] = -1;
                    rz[i][i4][i5] = -1;
                }
            }
        }
        prepit = false;
    }
}
//package nfm.open;
/* Smenu - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importjava.awt.AlphaComposite;
//importjava.awt.Color;
//importjava.awt.Font;
//importjava.awt.FontMetrics;
//importjava.awt.Graphics2D;


/* Smenu - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */

/**
 * The Class Smenu.
 */
public class Smenu {

    public boolean alphad = false;
    private Color bcol = Color.white;
    public boolean carsel = false;
    private boolean dis = false;
    private Color fcol = Color.black;
    private boolean flksel = false;
    private final Font font = new Font("Arial", 1, 13);
    private FontMetrics ftm;
    public int[] iroom;

    public int kmoused = 0;
    int maxl = 0;
    public int no = 0;
    private boolean om = false;
    private boolean onsc = false;
    public boolean open = false;
    public final String[] opts;
    private boolean revup = false;
    public boolean rooms = false;
    private int scra = 0;
    private int scro = 0;
    public int sel = 0;
    public boolean show = false;
    public final String[] sopts;

    public int w = 0;
    private int x = 0;
    private int y = 0;

    //public int getX() { return x; }
    //public int getY() { return y; }
    public int getScreenSize() {
        return y + 25 + scro + no * (ftm.getHeight() + 2);
    }

    /**
     * Instantiates a new smenu.
     *
     * @param i the i
     */
    public Smenu(final int i) {
        opts = new String[i];
        sopts = new String[i];
    }

    /**
     * Adds the.
     *
     * @param graphics2d the graphics2d
     * @param string     the string
     */
    public void add(final Graphics2D graphics2d, String string) {
        graphics2d.setFont(font);
        ftm = graphics2d.getFontMetrics();
        if ((!rooms || no == 0) && ftm.stringWidth(string) + 30 > w) {
            w = ftm.stringWidth(string) + 30;
        }
        if (rooms) {
            iroom = new int[7];
            for (int i = 0; i < 7; i++) {
                iroom[i] = 0;
            }
        }
        opts[no] = string;
        if (maxl != 0) {
            int i;
            for (i = string.length(); ftm.stringWidth(string.substring(0, i)) + 30 > maxl; i--) {
                /* empty */
            }
            if (i != string.length()) {
                string = string.substring(0, i - 3);
                string = string + "...";
            }
        }
        sopts[no] = string;
        if (no < opts.length - 1) {
            no++;
        }
    }

    /**
     * Addstg.
     *
     * @param string the string
     */
    public void addstg(final String string) {
        if (ftm.stringWidth(string) + 30 > w) {
            w = ftm.stringWidth(string) + 30;
        }
        no++;
        if (no > 701) {
            no = 701;
        }
        for (int i = no - 1; i > 1; i--) {
            opts[i] = opts[i - 1];
            sopts[i] = sopts[i - 1];
        }
        opts[1] = string;
        sopts[1] = string;
    }

    /**
     * Addw.
     *
     * @param string  the string
     * @param string0 the string0
     */
    public void addw(final String string, final String string0) {
        w = 300;
        opts[no] = string0;
        sopts[no] = string;
        if (no < opts.length - 1) {
            no++;
        }
    }

    /**
     * Disable.
     */
    @Deprecated
    public void disable() {
        dis = true;
    }

    /**
     * Draw.
     *
     * @param graphics2d the graphics2d
     * @param _mousex    the i
     * @param _mousey    the i4
     * @param bool       the bool
     * @param i5         the i5
     * @param bool6      the bool6
     * @return true, if successful
     */
    public boolean draw(final Graphics2D graphics2d, final int _mousex, final int _mousey, final boolean bool, final int i5, boolean bool6) {
        boolean bool7 = false;
        if (revup) {
            bool6 = !bool6;
            revup = false;
        }
        if (show) {
            if (alphad) {
                graphics2d.setComposite(AlphaComposite.getInstance(3, 0.7F));
            }
            boolean bool8 = false;
            if (bool) {
                if (!om) {
                    om = true;
                    bool8 = true;
                }
            } else if (om) {
                om = false;
            }
            boolean bool9 = false;
            if ((bcol.getRed() + bcol.getGreen() + bcol.getBlue()) / 3 > (fcol.getRed() + fcol.getGreen() + fcol.getBlue()) / 3) {
                bool9 = true;
            }
            boolean bool10 = false;
            if (_mousex > x && _mousex < x + w && _mousey > y + 1 && _mousey < y + 22 && !open && !dis) {
                bool10 = true;
            }
            if (!open && bool10 && bool8 && !dis) {
                open = true;
                bool8 = false;
            }
            graphics2d.setFont(font);
            ftm = graphics2d.getFontMetrics();
            if (open) {
                final int i11 = 4 + (ftm.getHeight() + 2) * no;
                if (!bool6) {
                    int i12 = 0;
                    graphics2d.setColor(bcol);
                    graphics2d.fillRect(x, y + 23, w, i11);
                    graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
                    graphics2d.drawRect(x, y + 23, w, i11);
                    if (y + 23 + i11 > i5) {
                        graphics2d.drawLine(x + w - 18, y + 17, x + w - 18, i5);
                        if (bool9) {
                            graphics2d.setColor(new Color((bcol.getRed() + 510) / 3, (bcol.getGreen() + 510) / 3, (bcol.getBlue() + 510) / 3));
                        } else {
                            graphics2d.setColor(new Color((fcol.getRed() + 510) / 3, (fcol.getGreen() + 510) / 3, (fcol.getBlue() + 510) / 3));
                        }
                        graphics2d.fillRect(x + w - 15, y + 25 + scra, 13, 30);
                        graphics2d.setColor(fcol);
                        graphics2d.drawRect(x + w - 15, y + 25 + scra, 12, 30);
                        graphics2d.setColor(Color.black);
                        graphics2d.drawLine(x + w - 12, y + 9 + 29 + scra, x + w - 12, y + 10 + 29 + scra);
                        graphics2d.drawLine(x + w - 11, y + 10 + 29 + scra, x + w - 11, y + 11 + 29 + scra);
                        graphics2d.drawLine(x + w - 10, y + 11 + 29 + scra, x + w - 10, y + 12 + 29 + scra);
                        graphics2d.drawLine(x + w - 9, y + 12 + 29 + scra, x + w - 9, y + 13 + 29 + scra);
                        graphics2d.drawLine(x + w - 8, y + 11 + 29 + scra, x + w - 8, y + 12 + 29 + scra);
                        graphics2d.drawLine(x + w - 7, y + 10 + 29 + scra, x + w - 7, y + 11 + 29 + scra);
                        graphics2d.drawLine(x + w - 6, y + 9 + 29 + scra, x + w - 6, y + 10 + 29 + scra);
                        i12 = -18;
                        if (bool) {
                            if (_mousex > x + w - 18 && _mousex < x + w && _mousey > y + 25 && _mousey < i5) {
                                bool8 = false;
                                onsc = true;
                            }
                        } else if (onsc) {
                            onsc = false;
                        }
                        if (onsc) {
                            scra = _mousey - (y + 25) - 15;
                            if (scra < 0) {
                                scra = 0;
                            }
                            final int i13 = i5 - (y + 25) - 33;
                            if (scra > i13) {
                                scra = i13;
                            }
                            final int i14 = no * (ftm.getHeight() + 2) - i13 - ftm.getHeight() / 2;
                            scro = -(int) (scra * ((float) i14 / (float) i13));
                        }
                    }
                    for (int i15 = 0; i15 < no; i15++)
                        if (Math.abs(scro) < (i15 + 1) * (ftm.getHeight() + 2)) {
                            graphics2d.setColor(fcol);
                            if (_mousex > x && _mousex < x + w && _mousey > y + 25 + scro + i15 * (ftm.getHeight() + 2) && _mousey < y + 25 + scro + (i15 + 1) * (ftm.getHeight() + 2)) {
                                if (bool9) {
                                    graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
                                } else {
                                    graphics2d.setColor(fcol);
                                }
                                graphics2d.fillRect(x + 1, y + 25 + scro + i15 * (ftm.getHeight() + 2), w - 1 + i12, ftm.getHeight() + 2);
                                graphics2d.setColor(bcol);
                                if (bool8) {
                                    if (!rooms || !opts[i15].equals("full")) {
                                        sel = i15;
                                        if (rooms && i15 != 0) {
                                            sopts[i15] = " ";
                                        }
                                    } else {
                                        kmoused = 20;
                                    }
                                    open = false;
                                }
                            }
                            if (rooms && sopts[i15].contains("10 / 10")) {
                                graphics2d.setColor(Color.red);
                            }
                            graphics2d.drawString(sopts[i15], x + 4, y + 38 + scro + i15 * (ftm.getHeight() + 2));
                        }
                    if (i12 != 0) {
                        graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
                        graphics2d.drawLine(x, i5 - 1, x + w, i5 - 1);
                    }
                } else {
                    int i16 = 0;
                    graphics2d.setColor(bcol);
                    graphics2d.fillRect(x, y - i11, w, i11);
                    graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
                    graphics2d.drawRect(x, y - i11, w, i11);
                    if (y - i11 < 0) {
                        graphics2d.drawLine(x + w - 18, 0, x + w - 18, y);
                        if (bool9) {
                            graphics2d.setColor(new Color((bcol.getRed() + 510) / 3, (bcol.getGreen() + 510) / 3, (bcol.getBlue() + 510) / 3));
                        } else {
                            graphics2d.setColor(new Color((fcol.getRed() + 510) / 3, (fcol.getGreen() + 510) / 3, (fcol.getBlue() + 510) / 3));
                        }
                        graphics2d.fillRect(x + w - 15, y - scra - 33, 13, 30);
                        graphics2d.setColor(fcol);
                        graphics2d.drawRect(x + w - 15, y - scra - 33, 12, 30);
                        graphics2d.setColor(Color.black);
                        graphics2d.drawLine(x + w - 12, y + 13 - 29 - scra, x + w - 12, y + 12 - 29 - scra);
                        graphics2d.drawLine(x + w - 11, y + 12 - 29 - scra, x + w - 11, y + 11 - 29 - scra);
                        graphics2d.drawLine(x + w - 10, y + 11 - 29 - scra, x + w - 10, y + 10 - 29 - scra);
                        graphics2d.drawLine(x + w - 9, y + 10 - 29 - scra, x + w - 9, y + 9 - 29 - scra);
                        graphics2d.drawLine(x + w - 8, y + 11 - 29 - scra, x + w - 8, y + 10 - 29 - scra);
                        graphics2d.drawLine(x + w - 7, y + 12 - 29 - scra, x + w - 7, y + 11 - 29 - scra);
                        graphics2d.drawLine(x + w - 6, y + 13 - 29 - scra, x + w - 6, y + 12 - 29 - scra);
                        i16 = -18;
                        if (bool) {
                            if (_mousex > x + w - 18 && _mousex < x + w && _mousey > 0 && _mousey < y - 3) {
                                bool8 = false;
                                onsc = true;
                            }
                        } else if (onsc) {
                            onsc = false;
                        }
                        if (onsc) {
                            scra = y - 3 - 15 - _mousey;
                            if (scra < 0) {
                                scra = 0;
                            }
                            final int i17 = y - 35;
                            if (scra > i17) {
                                scra = i17;
                            }
                            final int i18 = no * (ftm.getHeight() + 2) - i17 - ftm.getHeight() / 2;
                            scro = (int) (scra * ((float) i18 / (float) i17));
                        }
                    }
                    for (int i19 = 0; i19 < no; i19++)
                        if (Math.abs(scro) < (i19 + 1) * (ftm.getHeight() + 2)) {
                            graphics2d.setColor(fcol);
                            if (_mousex > x && _mousex < x + w && _mousey < y - 18 + scro - (i19 - 1) * (ftm.getHeight() + 2) && _mousey > y - 18 + scro - i19 * (ftm.getHeight() + 2)) {
                                if (bool9) {
                                    graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
                                } else {
                                    graphics2d.setColor(fcol);
                                }
                                graphics2d.fillRect(x + 1, y - 18 + scro - i19 * (ftm.getHeight() + 2), w - 1 + i16, ftm.getHeight() + 2);
                                graphics2d.setColor(bcol);
                                if (bool8) {
                                    sel = i19;
                                    open = false;
                                }
                            }
                            graphics2d.drawString(sopts[i19], x + 4, y - 5 + scro - i19 * (ftm.getHeight() + 2));
                        }
                    if (i16 != 0) {
                        graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
                        graphics2d.drawLine(x, 0, x + w, 0);
                    }
                }
                bool7 = true;
                if (bool8) {
                    open = false;
                }
            } else {
                if (scro != 0) {
                    scro = 0;
                }
                if (scra != 0) {
                    scra = 0;
                }
            }
            if (bool10) {
                if (bool9) {
                    graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
                } else {
                    graphics2d.setColor(fcol);
                }
            } else {
                graphics2d.setColor(bcol);
            }
            graphics2d.fillRect(x, y + 1, w, 21);
            graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed()) / 2, (fcol.getGreen() + bcol.getGreen()) / 2, (fcol.getBlue() + bcol.getBlue()) / 2));
            graphics2d.drawRect(x, y + 1, w, 21);
            if (bool9) {
                graphics2d.setColor(new Color((bcol.getRed() + 255) / 2, (bcol.getGreen() + 255) / 2, (bcol.getBlue() + 255) / 2));
            } else {
                graphics2d.setColor(new Color((fcol.getRed() + 255) / 2, (fcol.getGreen() + 255) / 2, (fcol.getBlue() + 255) / 2));
            }
            graphics2d.drawRect(x + 1, y + 2, w - 2, 19);
            graphics2d.drawLine(x + w - 17, y + 3, x + w - 17, y + 20);
            graphics2d.setColor(fcol);
            if (dis) {
                graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed() * 2) / 3, (fcol.getGreen() + bcol.getGreen() * 2) / 3, (fcol.getBlue() + bcol.getBlue() * 2) / 3));
            }
            graphics2d.drawRect(x + w - 16, y + 3, 14, 17);
            if (bool9) {
                graphics2d.setColor(new Color((bcol.getRed() + 510) / 3, (bcol.getGreen() + 510) / 3, (bcol.getBlue() + 510) / 3));
            } else {
                graphics2d.setColor(new Color((fcol.getRed() + 510) / 3, (fcol.getGreen() + 510) / 3, (fcol.getBlue() + 510) / 3));
            }
            graphics2d.fillRect(x + w - 15, y + 4, 13, 16);
            graphics2d.setColor(Color.black);
            if (dis) {
                graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed() * 2) / 3, (fcol.getGreen() + bcol.getGreen() * 2) / 3, (fcol.getBlue() + bcol.getBlue() * 2) / 3));
            }
            graphics2d.drawLine(x + w - 12, y + 9, x + w - 12, y + 10);
            graphics2d.drawLine(x + w - 11, y + 10, x + w - 11, y + 11);
            graphics2d.drawLine(x + w - 10, y + 11, x + w - 10, y + 12);
            graphics2d.drawLine(x + w - 9, y + 12, x + w - 9, y + 13);
            graphics2d.drawLine(x + w - 8, y + 11, x + w - 8, y + 12);
            graphics2d.drawLine(x + w - 7, y + 10, x + w - 7, y + 11);
            graphics2d.drawLine(x + w - 6, y + 9, x + w - 6, y + 10);
            if (bool10) {
                graphics2d.setColor(bcol);
            } else {
                graphics2d.setColor(fcol);
            }
            if (dis) {
                graphics2d.setColor(new Color((fcol.getRed() + bcol.getRed() * 2) / 3, (fcol.getGreen() + bcol.getGreen() * 2) / 3, (fcol.getBlue() + bcol.getBlue() * 2) / 3));
            }
            if (carsel && !bool10)
                if (flksel) {
                    graphics2d.setColor(new Color(240, 240, 240));
                    flksel = false;
                } else {
                    flksel = true;
                }
            graphics2d.drawString(sopts[sel], x + 4, y + ftm.getHeight() + 2);
            if (alphad) {
                graphics2d.setComposite(AlphaComposite.getInstance(3, 1.0F));
            }
        } else {
            if (scro != 0) {
                scro = 0;
            }
            if (scra != 0) {
                scra = 0;
            }
        }
        return bool7;
    }

    /**
     * Enable.
     */
    @Deprecated
    public void enable() {
        dis = false;
    }

    /**
     * Gets the background.
     *
     * @return the background
     */
    public Color getBackground() {
        return bcol;
    }

    /**
     * Gets the foreground.
     *
     * @return the foreground
     */
    public Color getForeground() {
        return fcol;
    }

    /**
     * Gets the item.
     *
     * @param i the i
     * @return the item
     */
    public String getItem(final int i) {
        if (i >= 0 && i < no)
            return opts[i];
        return "";
    }

    public int getIndex(final String string) {
        for (int i = 0; i < no; i++)
            if (opts[i].equals(string))
                return i;
        return -1;
    }

    /**
     * Gets the item count.
     *
     * @return the item count
     */
    public int getItemCount() {
        return no;
    }

    /**
     * Gets the selected index.
     *
     * @return the selected index
     */
    public int getSelectedIndex() {
        return sel;
    }

    /**
     * Gets the selected item.
     *
     * @return the selected item
     */
    public String getSelectedItem() {
        return opts[sel];
    }

    /**
     * Gets the width.
     *
     * @return the width
     */
    public int getWidth() {
        return w;
    }

    /**
     * Checks for focus.
     *
     * @return true, if successful
     */
    public boolean hasFocus() {
        return false;
    }

    /**
     * Use {@link #setVisible(boolean)} instead.
     *
     * @see #setVisible(boolean)
     */
    @Deprecated
    public void hide() {
        show = false;
        open = false;
    }

    /**
     * Checks if is enabled.
     *
     * @return true, if is enabled
     */
    public boolean isEnabled() {
        return !dis;
    }

    /**
     * Checks if is showing.
     *
     * @return true, if is showing
     */
    public boolean isShowing() {
        return show;
    }

    /**
     * Move.
     *
     * @param i  the i
     * @param i3 the i3
     */
    public void move(final int i, final int i3) {
        x = i;
        y = i3;
    }

    /**
     * Removes the.
     *
     * @param string the string
     */
    public void remove(final String string) {
        for (int i = 0; i < no; i++)
            if (opts[i].equals(string)) {
                for (int i1 = i; i1 < no; i1++)
                    if (i1 != no - 1) {
                        opts[i1] = opts[i1 + 1];
                        sopts[i1] = sopts[i1 + 1];
                    }
                no--;
                break;
            }
    }

    /**
     * Removes the all.
     */
    public void removeAll() {
        no = 0;
        w = 0;
        sel = 0;
    }

    /**
     * Select.
     *
     * @param i the i
     */
    public void select(final int i) {
        if (i >= 0 && i < no) {
            sel = i;
        }
    }

    /**
     * Select.
     *
     * @param string the string
     */
    public void select(final String string) {
        for (int i = 0; i < no; i++)
            if (opts[i].equals(string)) {
                sel = i;
                break;
            }
    }

    /**
     * Sets the background.
     *
     * @param color the new background
     */
    public void setBackground(final Color color) {
        if (color == null)
            throw new IllegalArgumentException("background can't be null");
        bcol = color;
    }

    /**
     * Sets the font.
     */
    public void setFont() {
        // font = font;
    }

    /**
     * Sets the foreground.
     *
     * @param color the new foreground
     */
    public void setForeground(final Color color) {
        if (color == null)
            throw new IllegalArgumentException("foreground can't be null");
        fcol = color;
    }

    /**
     * Sets the size.
     *
     * @param i  the i
     * @param i2 the i2
     */
    @SuppressWarnings("unused")
    public void setSize(final int i, final int i2) {
        w = i;
        // XXX h = i2;
    }
    public void setSize(final int i) {
        w = i;
        // XXX h = i2;
    }

    /**
     * Sets the visible.
     *
     * @param v the new visible
     */
    public void setVisible(final boolean v) {
        if (v) {
            show = true;
        } else {
            show = false;
            open = false;
        }
    }

    /**
     * Use setVisible instead.
     */
    @Deprecated
    public void show() {
        show = true;
    }

    /**
     * Sets the enabled.
     *
     * @param b the new enabled
     */
    public void setEnabled(final boolean b) {
        dis = b;
    }
}
//package nfm.open;

/**
 * Created by Rafael on 24/07/2016.
 *
 * TODO integrate fully (currently only Mad)
 */
public class Stat {
    final int[] swits;
    final float[] acelf;
    final int handb;
    final float airs;
    final int airc;
    final int turn;
    final float grip;
    final float bounce;
    final float simag;
    final float moment;
    final float comprad;
    final int push;
    final int revpush;
    final int lift;
    final int revlift;
    final int powerloss;
    final int flipy;
    final int msquash;
    final int clrad;
    final float dammult;
    final int maxmag;
    final float dishandle;
    final float outdam;
    final int cclass;
    final String names;
    final int enginsignature;

    boolean include = false;
    String createdby = "";
    int publish = 0;

    public Stat(int[] swits, float[] acelf, int handb, float airs, int airc, int turn, float grip, float bounce, float simag, float moment, float comprad, int push, int revpush, int lift, int revlift, int powerloss, int flipy, int msquash, int clrad, float dammult, int maxmag, float dishandle, float outdam, int cclass, String names, int enginsignature,
                boolean include, String createdby, int publish) {
        this(swits,
             acelf,
             handb,
             airs,
             airc,
             turn,
             grip,
             bounce,
             simag,
             moment,
             comprad,
             push,
             revpush,
             lift,
             revlift,
             powerloss,
             flipy,
             msquash,
             clrad,
             dammult,
             maxmag,
             dishandle,
             outdam,
             cclass,
             names,
             enginsignature);

        this.include = include;
        this.createdby = createdby;
        this.publish = publish;
    }

    public Stat(int[] swits, float[] acelf, int handb, float airs, int airc, int turn, float grip, float bounce, float simag, float moment, float comprad, int push, int revpush, int lift, int revlift, int powerloss, int flipy, int msquash, int clrad, float dammult, int maxmag, float dishandle, float outdam, int cclass, String names, int enginsignature) {
        this.swits = swits.clone();
        this.acelf = acelf.clone();

        this.handb = handb;
        this.airs = airs;
        this.airc = airc;
        this.turn = turn;
        this.grip = grip;
        this.bounce = bounce;
        this.simag = simag;
        this.moment = moment;
        this.comprad = comprad;
        this.push = push;
        this.revpush = revpush;
        this.lift = lift;
        this.revlift = revlift;
        this.powerloss = powerloss;
        this.flipy = flipy;
        this.msquash = msquash;
        this.clrad = clrad;
        this.dammult = dammult;
        this.maxmag = maxmag;
        this.dishandle = dishandle;
        this.outdam = outdam;
        this.cclass = cclass;
        this.names = names;
        this.enginsignature = enginsignature;
    }

    public Stat(Stat clone) {
        this.swits = clone.swits.clone();
        this.acelf = clone.acelf.clone();

        this.handb = clone.handb;
        this.airs = clone.airs;
        this.airc = clone.airc;
        this.turn = clone.turn;
        this.grip = clone.grip;
        this.bounce = clone.bounce;
        this.simag = clone.simag;
        this.moment = clone.moment;
        this.comprad = clone.comprad;
        this.push = clone.push;
        this.revpush = clone.revpush;
        this.lift = clone.lift;
        this.revlift = clone.revlift;
        this.powerloss = clone.powerloss;
        this.flipy = clone.flipy;
        this.msquash = clone.msquash;
        this.clrad = clone.clrad;
        this.dammult = clone.dammult;
        this.maxmag = clone.maxmag;
        this.dishandle = clone.dishandle;
        this.outdam = clone.outdam;
        this.cclass = clone.cclass;
        this.names = clone.names;
        this.enginsignature = clone.enginsignature;
    }

    public Stat(int cn) {
        this.swits = CarDefine.swits[cn].clone();
        this.acelf = CarDefine.acelf[cn].clone();

        this.handb = CarDefine.handb[cn];
        this.airs = CarDefine.airs[cn];
        this.airc = CarDefine.airc[cn];
        this.turn = CarDefine.turn[cn];
        this.grip = CarDefine.grip[cn];
        this.bounce = CarDefine.bounce[cn];
        this.simag = CarDefine.simag[cn];
        this.moment = CarDefine.moment[cn];
        this.comprad = CarDefine.comprad[cn];
        this.push = CarDefine.push[cn];
        this.revpush = CarDefine.revpush[cn];
        this.lift = CarDefine.lift[cn];
        this.revlift = CarDefine.revlift[cn];
        this.powerloss = CarDefine.powerloss[cn];
        this.flipy = CarDefine.flipy[cn];
        this.msquash = CarDefine.msquash[cn];
        this.clrad = CarDefine.clrad[cn];
        this.dammult = CarDefine.dammult[cn];
        this.maxmag = CarDefine.maxmag[cn];
        this.dishandle = CarDefine.dishandle[cn];
        this.outdam = CarDefine.outdam[cn];
        this.cclass = CarDefine.cclass[cn];
        this.names = CarDefine.names[cn];
        this.enginsignature = CarDefine.enginsignature[cn];

        if (cn >= CarDefine.SIXTEEN) {
            include = CarDefine.include[cn];
            createdby = CarDefine.createdby[cn];
            publish = CarDefine.publish[cn];
        }
    }
}
//package nfm.open;

/* Trackers - Decompiled by JODE extended
 * DragShot Software
 * JODE (c) 1998-2001 Jochen Hoenicke
 */
class Trackers {
    //private Trackers() {}
    static final int[][] c = new int[75000][3];
    static final int[] dam = new int[75000];
    static final boolean[] decor = new boolean[75000];
    static int ncx = 0;
    static int ncz = 0;
    static final boolean[] notwall = new boolean[75000];
    static int nt = 0;
    static final int[] radx = new int[75000];
    static final int[] rady = new int[75000];
    static final int[] radz = new int[75000];
    static int[][][] sect = null;
    static final int[] skd = new int[75000];
    static int sx = 0;
    static int sz = 0;
    static final int[] x = new int[75000];
    static final int[] xy = new int[75000];
    static final int[] y = new int[75000];
    static final int[] z = new int[75000];
    static final int[] zy = new int[75000];

    static void devidetrackers(final int i, final int i0, final int i1, final int i2) {
        sect = null;
        sx = i;
        sz = i1;
        ncx = i0 / 3000;
        if (ncx <= 0) {
            ncx = 1;
        }
        ncz = i2 / 3000;
        if (ncz <= 0) {
            ncz = 1;
        }
        sect = new int[ncx][ncz][];
        for (int i3 = 0; i3 < ncx; i3++) {
            for (int i4 = 0; i4 < ncz; i4++) {
                final int i5 = sx + i3 * 3000 + 1500;
                final int i6 = sz + i4 * 3000 + 1500;
                final int[] is = new int[6700];
                int i7 = 0;
                for (int i8 = 0; i8 < nt; i8++) {
                    final int i9 = py(i5, x[i8], i6, z[i8]);
                    if (i9 < 20250000 && i9 > 0 && dam[i8] != 167) {
                        is[i7] = i8;
                        i7++;
                    }
                }
                if (i3 == 0 || i4 == 0 || i3 == ncx - 1 || i4 == ncz - 1) {
                    for (int i10 = 0; i10 < nt; i10++)
                        if (dam[i10] == 167) {
                            is[i7] = i10;
                            i7++;
                        }
                }
                if (i7 == 0) {
                    is[i7] = 0;
                    i7++;
                }
                sect[i3][i4] = new int[i7];
                System.arraycopy(is, 0, sect[i3][i4], 0, i7);
            }
        }
        for (int i12 = 0; i12 < nt; i12++)
            if (dam[i12] == 167) {
                dam[i12] = 1;
            }
        ncx--;
        ncz--;
    }

    private static int py(final int i, final int i13, final int i14, final int i15) {
        return (i - i13) * (i - i13) + (i14 - i15) * (i14 - i15);
    }
}
//package nfm.open;

//importjavax.swing.*;
//importjava.io.ByteArrayOutputStream;
//importjava.io.IOException;
//importjava.util.Map;
//importjava.util.Objects;
//importjava.util.Vector;
//importjava.util.concurrent.ThreadLocalRandom;
//importjava.util.zip.ZipEntry;
//importjava.util.zip.ZipInputStream;

public final class Utility {

    /**
     * This is an utility class, so it can't be inherited.
     */
    private Utility() {
    }

    /**
     * Gets a value from a string in format:
     * string(value1,value2,value3...)
     *
     *
     * @param string The variable name (e.g: foo(bar) = foo)
     * @param string262 The string (single line) to get the value from
     * @param i The position of the value (starting from 0)
     * @return An integer containing the value
     */
    static int getvalue(final String string, final String string262, final int i) {
        int i263 = 0;
        String string264 = "";
        for (int i265 = string.length() + 1; i265 < string262.length(); i265++) {
            final String string266 = "" + string262.charAt(i265);
            if (string266.equals(",") || string266.equals(")")) {
                i263++;
                i265++;
            }
            if (i263 == i) {
                string264 = "" + string264 + string262.charAt(i265);
            }
        }
        return (int) Float.parseFloat(string264);
    }

    /**
     * Gets a value from a string like: a|b|c|0|1|2|
     * @param string the string to get the value from
     * @param i the value position
     * @return the value at the position
     */
    public static int getServerValue(final String string, final int i) {
        int i437 = -1;
        try {
            int i438 = 0;
            int i439 = 0;
            int i440 = 0;
            String string441;
            String string442 = "";
            for (; i438 < string.length() && i440 != 2; i438++) {
                string441 = "" + string.charAt(i438);
                if (string441.equals("|")) {
                    i439++;
                    if (i440 == 1 || i439 > i) {
                        i440 = 2;
                    }
                } else if (i439 == i) {
                    string442 = "" + string442 + string441;
                    i440 = 1;
                }
            }
            if (string442.equals("")) {
                string442 = "-1";
            }
            i437 = Integer.parseInt(string442);
        } catch (final Exception ignored) {

        }
        return i437;
    }

    /**
     * Turns a 3D XY coordinate into a 2D X perspective coordinate.
     *
     * @param i
     *            The 3D X point
     * @param i338
     *            The 3D Y point
     * @param m the Medium
     * @return The 2D X coordinate.
     */
    static int xs(final int i, int i338) {
        if (i338 < Medium.cz) {
            i338 = Medium.cz;
        }
        return (i338 - Medium.focusPoint) * (Medium.cx - i) / i338 + i;
    }

    /**
     * Turns a 3D ZY coordinate into a 2D Y perspective coordinate.
     *
     * @param i
     *            The 3D Z point
     * @param i339
     *            The 3D Y point
     * @param m the Medium
     * @return The 2D Y coordinate.
     */
    static int ys(final int i, int i339) {
        if (i339 < Medium.cz) {
            i339 = Medium.cz;
        }
        return (i339 - Medium.focusPoint) * (Medium.cy - i) / i339 + i;
    }

    // alt

    static int altXs(final int i, int i260) {
        if (i260 < 50) {
            i260 = 50;
        }
        return (i260 - Medium.focusPoint) * (Medium.cx - i) / i260 + i;
    }

    static int altYs(final int i, int i261) {
        if (i261 < 50) {
            i261 = 50;
        }
        return (i261 - Medium.focusPoint) * (Medium.cy - i) / i261 + i;
    }

    // medium

    /*static public int mediumXs(final int i, int i272) {
    	if (i272 < m.cz)
    		i272 = m.cz;
    	return (i272 - m.focusPoint) * (m.cx - i) / i272 + i;
    }*/

    static int mediumYs(final int i, int i273) {
        if (i273 < 10) {
            i273 = 10;
        }
        return (i273 - Medium.focusPoint) * (Medium.cy - i) / i273 + i;
    }

    public static int getint(final String string, final String string262, final int i) {
        int i263 = 0;
        String string264 = "";
        for (int i265 = string.length() + 1; i265 < string262.length(); i265++) {
            final String string266 = "" + string262.charAt(i265);
            if (string266.equals(",") || string266.equals(")")) {
                i263++;
                i265++;
            }
            if (i263 == i) {
                string264 = "" + string264 + string262.charAt(i265);
            }
        }
        return Integer.parseInt(string264);
    }

    private final static float EPSILON = 0.0000001F;
    private final static double EPSILON_DOUBLE = 0.0000001D;

    static boolean fEquals(final float a, final float b) {
        return Math.abs(a - b) < EPSILON;
    }

    static boolean dEquals(final double a, final double b) {
        return Math.abs(a - b) < EPSILON_DOUBLE;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    public static <E> boolean arrayContains(final E[] arr, final E targetValue) {
        for (final E s : arr) {
            if (s.equals(targetValue))
                return true;
        }
        return false;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    static boolean arrayContains(final int[] arr, final int targetValue) {
        for (final int s : arr) {
            if (s == targetValue)
                return true;
        }
        return false;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    public static boolean arrayContains(final byte[] arr, final byte targetValue) {
        for (final byte s : arr) {
            if (s == targetValue)
                return true;
        }
        return false;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    public static boolean arrayContains(final short[] arr, final short targetValue) {
        for (final short s : arr) {
            if (s == targetValue)
                return true;
        }
        return false;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    public static boolean arrayContains(final char[] arr, final char targetValue) {
        for (final char s : arr) {
            if (s == targetValue)
                return true;
        }
        return false;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    public static boolean arrayContains(final long[] arr, final long targetValue) {
        for (final long s : arr) {
            if (s == targetValue)
                return true;
        }
        return false;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    public static boolean arrayContains(final float[] arr, final float targetValue) {
        for (final float s : arr) {
            if (s == targetValue)
                return true;
        }
        return false;
    }

    /**
     * Check if an array contains a value, <a href="http://www.programcreek.com/2014/04/check-if-array-contains-a-value-java/">very efficient</a>
     *
     * @param arr         The array to check against
     * @param targetValue The value to check for
     * @return {@code true} if the value is found, {@code false} otherwise
     */
    public static boolean arrayContains(final double[] arr, final double targetValue) {
        for (final double s : arr) {
            if (s == targetValue)
                return true;
        }
        return false;
    }


    /**
     * Unsafe subclass of ByteArrayOutputStream that doesn't copy array on output
     *
     * @author http://stackoverflow.com/users/80002/mark
     */
    public static class UnsafeByteArrayOutputStream extends ByteArrayOutputStream {

        public UnsafeByteArrayOutputStream() {
        }

        public UnsafeByteArrayOutputStream(final int size) {
            super(size);
        }

        public int getByteCount() {
            return count;
        }

        public byte[] getDataBuffer() {
            return buf;
        }
    }

    /* for proper .length access and stuff */
    public static UnsafeByteArrayOutputStream streamNoSize(final ZipInputStream zipinputstream, final ZipEntry zipentry, final int entrySize) throws IOException {
        final UnsafeByteArrayOutputStream bytes = new UnsafeByteArrayOutputStream(entrySize < 0 ? 8192 : entrySize);
        System.out.println(zipentry.getName() + "; size = " + zipentry.getSize());

        while (true) {
            final int b = zipinputstream.read();
            if (b == -1) {
                break;
            }
            bytes.write(b);
        }
        return bytes;
    }


    /**
     * Checks if a string contains a POSITIVE INTEGER.
     *
     * @param str
     * @return
     */
    public static boolean isNumeric(final String str) {
        for (final char c : str.toCharArray()) {
            if (!Character.isDigit(c))
                return false;
        }
        return true;
    }

    public static <T, E> T getKeyByValue(final Map<T, E> map, final E value) {
        for (final Map.Entry<T, E> entry : map.entrySet()) {
            if (Objects.equals(value, entry.getValue()))
                return entry.getKey();
        }
        return null;
    }

    public static <E> boolean listModelEquals(final ListModel<E> lm, final ListModel<E> lm2) {
        for (int i = 0; i < lm.getSize(); i++) {
            if (!lm.getElementAt(i).equals(lm2.getElementAt(i)))
                return false;
        }
        return true;
    }

    public static <E> boolean listModelEquals(final ListModel<E> lm, final E[] e2) {
        for (int i = 0; i < lm.getSize(); i++) {
            if (!lm.getElementAt(i).equals(e2))
                return false;
        }
        return true;
    }

    public static <E> boolean listModelEquals(final ListModel<E> lm, final Vector<E> lm2) {
        for (int i = 0; i < lm.getSize(); i++) {
            if (!lm.getElementAt(i).equals(lm2.elementAt(i)))
                return false;
        }
        return false;
    }

//    /**
//     * Pick an item from an array.
//     *
//     * @param is The array.
//     * @return The item.
//     * @author Rafael
//     */
//    public static int choose(final int... is) {
//        return is[ThreadLocalRandom.current().nextInt(is.length)];
//    }

    /**
     * Pick an item from an array.
     *
     * @param is The array.
     * @return The item.
     * @author Rafael
     */
    @SafeVarargs
    public static <E> E choose(final E... is) {
        return is[ThreadLocalRandom.current().nextInt(is.length)];
    }

    public static double getDistance(final int x1, final int y1, final int z1, final int x2, final int y2, final int z2) {
        final int dx = x1 - x2;
        final int dy = y1 - y2;
        final int dz = z1 - z2;

        // We should avoid Math.pow or Math.hypot due to perfomance reasons
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }

    public static double getDistance(final float x1, final float y1, final float z1, final float x2, final float y2, final float z2) {
        final float dx = x1 - x2;
        final float dy = y1 - y2;
        final float dz = z1 - z2;

        // We should avoid Math.pow or Math.hypot due to perfomance reasons
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }

    public static class ArrayUtilities {
        /**
         * Reverses an array of bytes.
         * @param data The array to reverse.
         */
        public static void reverse(byte[] data) {
            for (int left = 0, right = data.length - 1; left < right; left++, right--) {
                // swap the values at the left and right indices
                byte temp = data[left];
                data[left] = data[right];
                data[right] = temp;
            }
        }

        /**
         * Reverses an array of elements.
         * @param data The array to reverse.
         */
        public static <E> void reverse(E[] data) {
            for (int left = 0, right = data.length - 1; left < right; left++, right--) {
                // swap the values at the left and right indices
                E temp = data[left];
                data[left] = data[right];
                data[right] = temp;
            }
        }
    }

    public static int pointDirection(int x, int y, int tX, int tY) {
        int angle = (int) Math.toDegrees(Math.atan2(tY - y, tX - x));

        return angle < 0 ? angle + 360 : angle;
    }


}
//package nfm.open;/* Wheels - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */

class Wheels {
    private float depth = 3.0F;
    int ground = 0;
    int mast = 0;
    private final int[] rc = {
            120, 120, 120
    };
    private float size = 2.0F;
    int sparkat = 0;

    public Wheels() {
        sparkat = 0;
        ground = 0;
    }

    void make(final Plane[] planes, int i, final int i4, final int i5, final int i6, final int i7, final int i8, final int i9, final int i10) {
        final int[] is = new int[20];
        final int[] is11 = new int[20];
        final int[] is12 = new int[20];
        final int[] is13 = {
                45, 45, 45
        };
        int i14 = 0;
        final float f = i8 / 10.0F;
        final float f15 = i9 / 10.0F;
        if (i7 == 11) {
            i14 = (int) (i4 + 4.0F * f);
        }
        sparkat = (int) (f15 * 24.0F);
        ground = (int) (i5 + 13.0F * f15);
        int i16 = -1;
        if (i4 < 0) {
            i16 = 1;
        }
        for (int i17 = 0; i17 < 20; i17++) {
            is[i17] = (int) (i4 - 4.0F * f);
        }
        is11[0] = (int) (i5 - 9.1923F * f15);
        is12[0] = (int) (i6 + 9.1923F * f15);
        is11[1] = (int) (i5 - 12.557F * f15);
        is12[1] = (int) (i6 + 3.3646F * f15);
        is11[2] = (int) (i5 - 12.557F * f15);
        is12[2] = (int) (i6 - 3.3646F * f15);
        is11[3] = (int) (i5 - 9.1923F * f15);
        is12[3] = (int) (i6 - 9.1923F * f15);
        is11[4] = (int) (i5 - 3.3646F * f15);
        is12[4] = (int) (i6 - 12.557F * f15);
        is11[5] = (int) (i5 + 3.3646F * f15);
        is12[5] = (int) (i6 - 12.557F * f15);
        is11[6] = (int) (i5 + 9.1923F * f15);
        is12[6] = (int) (i6 - 9.1923F * f15);
        is11[7] = (int) (i5 + 12.557F * f15);
        is12[7] = (int) (i6 - 3.3646F * f15);
        is11[8] = (int) (i5 + 12.557F * f15);
        is12[8] = (int) (i6 + 3.3646F * f15);
        is11[9] = (int) (i5 + 9.1923F * f15);
        is12[9] = (int) (i6 + 9.1923F * f15);
        is11[10] = (int) (i5 + 3.3646F * f15);
        is12[10] = (int) (i6 + 12.557F * f15);
        is11[11] = (int) (i5 - 3.3646F * f15);
        is12[11] = (int) (i6 + 12.557F * f15);
        is11[12] = i5;
        is12[12] = (int) (i6 + 10.0F * size);
        is11[13] = (int) (i5 + 8.66 * size);
        is12[13] = (int) (i6 + 5.0F * size);
        is11[14] = (int) (i5 + 8.66 * size);
        is12[14] = (int) (i6 - 5.0F * size);
        is11[15] = i5;
        is12[15] = (int) (i6 - 10.0F * size);
        is11[16] = (int) (i5 - 8.66 * size);
        is12[16] = (int) (i6 - 5.0F * size);
        is11[17] = (int) (i5 - 8.66 * size);
        is12[17] = (int) (i6 + 5.0F * size);
        is11[18] = i5;
        is12[18] = (int) (i6 + 10.0F * size);
        is11[19] = (int) (i5 - 3.3646F * f15);
        is12[19] = (int) (i6 + 12.557F * f15);
        planes[i] = new Plane(is, is12, is11, 20, is13, 0, i10, 0, i14, i5, i6, 7, 0, false, 0, false, false, false, false, 1, 0, 0, 10);
        planes[i].master = 1;
        i++;
        is[2] = (int) (i4 - depth * f);
        is11[2] = i5;
        is12[2] = i6;
        int i18 = (int) (i10 - depth / size * 4.0F);
        if (i18 < -16) {
            i18 = -16;
        }
        is11[0] = i5;
        is12[0] = (int) (i6 + 10.0F * size);
        is11[1] = (int) (i5 + 8.66 * size);
        is12[1] = (int) (i6 + 5.0F * size);
        planes[i] = new Plane(is, is12, is11, 3, rc, 0, i18, 0, i14, i5, i6, 7, 0, false, 0, false, false, false, false, 1, 0, 0, 10);
        if (depth / size < 7.0F) {
            planes[i].master = 2;
        }
        i++;
        is11[0] = (int) (i5 + 8.66 * size);
        is12[0] = (int) (i6 + 5.0F * size);
        is11[1] = (int) (i5 + 8.66 * size);
        is12[1] = (int) (i6 - 5.0F * size);
        planes[i] = new Plane(is, is12, is11, 3, rc, 0, i18, 0, i14, i5, i6, 7, 0, false, 0, false, false, false, false, 1, 0, 0, 10);
        if (depth / size < 7.0F) {
            planes[i].master = 2;
        }
        i++;
        is11[0] = (int) (i5 + 8.66 * size);
        is12[0] = (int) (i6 - 5.0F * size);
        is11[1] = i5;
        is12[1] = (int) (i6 - 10.0F * size);
        planes[i] = new Plane(is, is12, is11, 3, rc, 0, i18, 0, i14, i5, i6, 7, 0, false, 0, false, false, false, false, 1, 0, 0, 10);
        if (depth / size < 7.0F) {
            planes[i].master = 2;
        }
        i++;
        is11[0] = i5;
        is12[0] = (int) (i6 - 10.0F * size);
        is11[1] = (int) (i5 - 8.66 * size);
        is12[1] = (int) (i6 - 5.0F * size);
        planes[i] = new Plane(is, is12, is11, 3, rc, 0, i18, 0, i14, i5, i6, 7, 0, false, 0, false, false, false, false, 1, 0, 0, 10);
        if (depth / size < 7.0F) {
            planes[i].master = 2;
        }
        i++;
        is11[0] = (int) (i5 - 8.66 * size);
        is12[0] = (int) (i6 - 5.0F * size);
        is11[1] = (int) (i5 - 8.66 * size);
        is12[1] = (int) (i6 + 5.0F * size);
        planes[i] = new Plane(is, is12, is11, 3, rc, 0, i18, 0, i14, i5, i6, 7, 0, false, 0, false, false, false, false, 1, 0, 0, 10);
        if (depth / size < 7.0F) {
            planes[i].master = 2;
        }
        i++;
        is11[0] = (int) (i5 - 8.66 * size);
        is12[0] = (int) (i6 + 5.0F * size);
        is11[1] = i5;
        is12[1] = (int) (i6 + 10.0F * size);
        planes[i] = new Plane(is, is12, is11, 3, rc, 0, i18, 0, i14, i5, i6, 7, 0, false, 0, false, false, false, false, 1, 0, 0, 10);
        if (depth / size < 7.0F) {
            planes[i].master = 2;
        }
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 - 12.557F * f15);
        is12[0] = (int) (i6 + 3.3646F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 - 12.557F * f15);
        is12[1] = (int) (i6 - 3.3646F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 - 12.557F * f15);
        is12[2] = (int) (i6 - 3.3646F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 - 12.557F * f15);
        is12[3] = (int) (i6 + 3.3646F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, -1 * i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 - 9.1923F * f15);
        is12[0] = (int) (i6 - 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 - 12.557F * f15);
        is12[1] = (int) (i6 - 3.3646F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 - 12.557F * f15);
        is12[2] = (int) (i6 - 3.3646F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 - 9.1923F * f15);
        is12[3] = (int) (i6 - 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 - 9.1923F * f15);
        is12[0] = (int) (i6 - 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 - 3.3646F * f15);
        is12[1] = (int) (i6 - 12.557F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 - 3.3646F * f15);
        is12[2] = (int) (i6 - 12.557F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 - 9.1923F * f15);
        is12[3] = (int) (i6 - 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 - 3.3646F * f15);
        is12[0] = (int) (i6 - 12.557F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 + 3.3646F * f15);
        is12[1] = (int) (i6 - 12.557F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 + 3.3646F * f15);
        is12[2] = (int) (i6 - 12.557F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 - 3.3646F * f15);
        is12[3] = (int) (i6 - 12.557F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, -1 * i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 + 9.1923F * f15);
        is12[0] = (int) (i6 - 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 + 3.3646F * f15);
        is12[1] = (int) (i6 - 12.557F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 + 3.3646F * f15);
        is12[2] = (int) (i6 - 12.557F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 + 9.1923F * f15);
        is12[3] = (int) (i6 - 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 + 9.1923F * f15);
        is12[0] = (int) (i6 - 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 + 12.557F * f15);
        is12[1] = (int) (i6 - 3.3646F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 + 12.557F * f15);
        is12[2] = (int) (i6 - 3.3646F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 + 9.1923F * f15);
        is12[3] = (int) (i6 - 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 + 12.557F * f15);
        is12[0] = (int) (i6 - 3.3646F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 + 12.557F * f15);
        is12[1] = (int) (i6 + 3.3646F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 + 12.557F * f15);
        is12[2] = (int) (i6 + 3.3646F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 + 12.557F * f15);
        is12[3] = (int) (i6 - 3.3646F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, -1 * i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 + 9.1923F * f15);
        is12[0] = (int) (i6 + 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 + 12.557F * f15);
        is12[1] = (int) (i6 + 3.3646F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 + 12.557F * f15);
        is12[2] = (int) (i6 + 3.3646F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 + 9.1923F * f15);
        is12[3] = (int) (i6 + 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 + 9.1923F * f15);
        is12[0] = (int) (i6 + 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 + 3.3646F * f15);
        is12[1] = (int) (i6 + 12.557F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 + 3.3646F * f15);
        is12[2] = (int) (i6 + 12.557F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 + 9.1923F * f15);
        is12[3] = (int) (i6 + 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 + 3.3646F * f15);
        is12[0] = (int) (i6 + 12.557F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 - 3.3646F * f15);
        is12[1] = (int) (i6 + 12.557F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 - 3.3646F * f15);
        is12[2] = (int) (i6 + 12.557F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 + 3.3646F * f15);
        is12[3] = (int) (i6 + 12.557F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, -1 * i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 - 9.1923F * f15);
        is12[0] = (int) (i6 + 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 - 3.3646F * f15);
        is12[1] = (int) (i6 + 12.557F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 - 3.3646F * f15);
        is12[2] = (int) (i6 + 12.557F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 - 9.1923F * f15);
        is12[3] = (int) (i6 + 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
        is[0] = (int) (i4 - 4.0F * f);
        is11[0] = (int) (i5 - 9.1923F * f15);
        is12[0] = (int) (i6 + 9.1923F * f15);
        is[1] = (int) (i4 - 4.0F * f);
        is11[1] = (int) (i5 - 12.557F * f15);
        is12[1] = (int) (i6 + 3.3646F * f15);
        is[2] = (int) (i4 + 4.0F * f);
        is11[2] = (int) (i5 - 12.557F * f15);
        is12[2] = (int) (i6 + 3.3646F * f15);
        is[3] = (int) (i4 + 4.0F * f);
        is11[3] = (int) (i5 - 9.1923F * f15);
        is12[3] = (int) (i6 + 9.1923F * f15);
        planes[i] = new Plane(is, is12, is11, 4, is13, 0, i10, i16, i14, i5, i6, 7, 0, false, 0, true, false, false, false, 1, 0, 0, 10);
        i++;
    }

    void setrims(final int i, final int i0, final int i1, final int i2, final int i3) {
        rc[0] = i;
        rc[1] = i0;
        rc[2] = i1;
        size = i2 / 10.0F;
        if (size < 0.0F) {
            size = 0.0F;
        }
        depth = i3 / 10.0F;
        if (depth / size > 41.0F) {
            depth = size * 41.0F;
        }
        if (depth / size < -25.0F) {
            depth = -(size * 25.0F);
        }
    }
}
//package nfm.open;
/* xtGraphics - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
//importnfm.open.music.*;

//importstatic nfm.open.xtGraphics.Images.*;

//importjava.awt.AlphaComposite;
//importjava.awt.Color;
//importjava.awt.Cursor;
//importjava.awt.Font;
//importjava.awt.FontMetrics;
//importjava.awt.Graphics2D;
//importjava.awt.Image;
//importjava.awt.MediaTracker;
//importjava.awt.RenderingHints;
//importjava.awt.Toolkit;
//importjava.awt.image.BufferedImage;
//importjava.awt.image.MemoryImageSource;
//importjava.awt.image.PixelGrabber;
//importjava.io.BufferedReader;
//importjava.io.File;
//importjava.io.FileInputStream;
//importjava.io.IOException;
//importjava.io.InputStreamReader;
//importjava.io.PrintWriter;
//importjava.net.Socket;
//importjava.net.URL;
//importjava.nio.file.Files;
//importjava.util.ArrayList;
//importjava.util.Collections;
//importjava.util.Objects;
//importjava.util.concurrent.ThreadLocalRandom;
//importjava.util.zip.ZipEntry;
//importjava.util.zip.ZipInputStream;

//importjavax.imageio.ImageIO;
//importjavax.swing.JPanel;

class xtGraphics extends JPanel implements Runnable {
    private xtGraphics() { super(); }
    
    static private int[] cntwis =   new int[8];
    static private boolean[] grrd = new boolean[8];
    static private boolean[] aird = new boolean[8];
    static private int[] stopcnt =  new int[8];
    static private int[] bfcrash =  new int[8];
    static private int[] bfsc1 =    new int[8];
    static private int[] bfsc2 =    new int[8];
    static private int[] bfscrape = new int[8];
    static private int[] bfskid =   new int[8];    
    static private int[] pwait =    { 7,7,7,7,7,7,7,7 };
    static private boolean[] pwastd = new boolean[8];
    
    static class Images {
        static Image arn;
        static Image arrows;
        static Image asd;
        static Image asu;
        static final Image[] back = new Image[2];
        static final Image[] bc = new Image[2];
        static final Image[] bcl = new Image[2];
        static final Image[] bcr = new Image[2];
        static Image bggo;
        static Image bgmain;
        static Image bob;
        static Image bol;
        static Image bolp;
        static Image bolps;
        static Image bols;
        static Image bor;
        static Image borp;
        static Image borps;
        static Image bors;
        static Image bot;
        static Image br;
        static Image brt;
        static Image byrd;
        static Image cancel;
        static Image carsbg;
        static Image carsbgc;
        static Image ccar;
        static Image cgame;
        static Image change;
        static Image chil;
        static final Image[] cntdn = new Image[4];
        static Image congrd;
        static final Image[] contin = new Image[2];
        static Image crd;
        static Image disco;
        static Image dmg;
        static final Image[] dude = new Image[3];
        static Image exit;
        static Image exitgame;
        static Image fixhoop;
        static Image flaot;
        static Image fleximg;
        static Image gamefinished;
        static Image gameh;
        static Image gameov;
        static Image games;
        static Image gmc;
        static Image hello;
        static Image kenter;
        static Image km;
        static Image kn;
        static Image ks;
        static Image kv;
        static Image kx;
        static Image kz;
        static Image lanm;
        static Image lap;
        static Image loadbar;
        static Image loadingmusic;
        static Image login;
        static Image logocars;
        static Image logomadbg;
        static Image logomadnes;
        static Image logout;
        static Image mdness;
        static Image mload;
        static final Image[] next = new Image[2];
        static Image nfm;
        static Image nfmcom;
        static Image nfmcoms;
        static Image ntrg;
        static final Image[] ocntdn = new Image[4];
        static Image odisco;
        static Image odmg;
        static Image oexitgame;
        static Image oflaot;
        static Image ogamefinished;
        static Image ogameh;
        static Image olap;
        static Image oloadingmusic;
        static Image onfmm;
        static Image opback;
        static Image opos;
        static Image opti;
        static Image opwr;
        static final Image[] orank = new Image[8];
        static Image ory;
        static Image osped;
        static final Image[] ostar = new Image[2];
        static Image owas;
        static Image owgame;
        static Image oyoulost;
        static Image oyourwasted;
        static Image oyouwastedem;
        static Image oyouwon;
        static Image paused;
        static Image pgate;
        static Image play;
        static Image pln;
        static Image pls;
        static Image plus;
        static Image pos;
        static Image pwr;
        static Image racing;
        static Image radicalplay;
        static final Image[] rank = new Image[8];
        static Image redy;
        static Image register;
        static Image roomp;
        static Image rpro;
        static Image sarrow;
        static Image sdets;
        static Image select;
        static Image selectcar;
        static Image sign;
        static Image space;
        static Image sped;
        static final Image[] star = new Image[3];
        static Image statb;
        static Image statbo;
        static Image stg;
        static Image sts;
        static Image stunts;
        static final Image[] trackbg = new Image[2];
        static Image upgrade;
        static Image was;
        static Image wasting;
        static Image wgame;
        static Image yac;
        static Image ycmc;
        static Image youlost;
        static Image yourwasted;
        static Image youwastedem;
        static Image youwon;

    }
    /**
     * Serialization UID
     */
    private static final long serialVersionUID = 1254986552635023147L;
    /**
     * How many stages you have
     */
    static final int nTracks = 32;
    /**
     * How many cars you have
     */
    static final int nCars = 16;
    static int acexp = 0;

    /**
     * Stunt adjectives
     */
    private final static String[][] adj = {
            {
                    "Cool", "Alright", "Nice"
            }, {
                    "Wicked", "Amazing", "Super"
            }, {
                    "Awesome", "Ripping", "Radical"
            }, {
                    "What the...?", "You're a super star!!!!", "Who are you again...?"
            }, {
                    "surf style", "off the lip", "bounce back"
            }
    };
    /**
     * Used for text flicker effect
     */
    static private boolean aflk = false;
    static private final SoundClip[] air = new SoundClip[6];
    /**
     * The HSB values of every vehicle in a race, once for the first color and once for the second
     */
    static final float[][] allrnp = new float[8][6];
    /**
     * If {@code != -1}, locks the arrow to that car ID.
     */
    static private int alocked = -1;
    /**
     * Arrow angle
     */
    static private int ana = 0;
    /**
     * {@link GameSparker} object
     */
    static private GameSparker app;
    /**
     * The player car's HSB values, once for the first color and once for the second
     */
    static final float[] arnp = {
            0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 0.0F
    };
    /**
     * If {@code true}, the arrow is pointing at cars
     */
    static private boolean arrace = false;
    static String asay = "";
    static private int auscnt = 45;
    /**
     * Auto-login
     */
    static boolean autolog = false;
    /**
     * Temporarily stores player's username
     */
    static String backlog = "";
    /**
     * If true, disables some visual effects for Mac OS compatibility
     */
    static boolean badmac = false;
    static int beststunt = 0;
    static private float bgf = 0.0F;
    static private final int[] bgmy = {
            0, -400
    };
    static private boolean bgup = false;
    static SoundClip carfixed;
    static private int cfase = 0;
    static private SoundClip checkpoint;
    /**
     * Player's clan in multiplayer games
     */
    static String clan = "";
    static boolean clanchat = false;
    /**
     * If non-zero, the player is in a clan/war game (racing or wasting)
     */
    static int clangame = 0;
    static String clankey = "";
    /**
     * Current amount of cleared checkpoints
     */
    static private int clear = 0;
    static private final String[][] cnames = {
            {
                    "", "", "", "", "", "", "Game Chat  "
            }, {
                    "", "", "", "", "", "", "Your Clan's Chat  "
            }
    };
    static private int cntan = 0;
    static private final int[] cntchatp = {
            0, 0
    };
    static private int cntflock = 0;
    static private int cntovn = 0;
    static final int cntptrys = 5;
    static private final SoundClip[] crash = new SoundClip[3];
    static private boolean crashup = false;
    static private int crshturn = 0;
    static final int[] dcrashes = {
            0, 0, 0, 0, 0, 0, 0, 0
    };
    /**
     * The player's ping, in Dominion, Ghostrider and Avenger
     */
    static final int[] delays = {
            600, 600, 600
    };
    private final static int[] dested = {
            0, 0, 0, 0, 0, 0, 0, 0
    };
    static private BufferedReader din;
    static private int discon = 0;
    static private int dmcnt = 0;
    static private boolean dmflk = false;
    /**
     * Amount of KB downloaded (loading screen)
     */
    static int dnload = 0;
    static private PrintWriter dout;
    static private final int dropf = 0;
    static private int dskflg = 0;
    static private int dudo = 0;
    static private int duds = 0;
    static private final SoundClip[] dustskid = new SoundClip[3];
    static private final SoundClip[][] engs = new SoundClip[5][5];
    static int exitm = 0;
    /**
     * Exclamation marks for stunts
     */
    private final static String[] exlm = {
            "!", "!!", "!!!"
    };
    static int fase = 1111;
    static int fastestlap = 0;
    static private SoundClip firewasted;
    static boolean firstime = true;
    static private int flang = 0;
    static private int flatr = 0;
    static private int flatrstart = 0;
    static int[] flexpix = null;
    static int flipo = 0;
    static private boolean flk = false;
    static private int flkat = 0;
    private final static int[] floater = {
            0, 0
    };
    static private int flyr = 0;
    static private int flyrdest = 0;
    static int forstart = 0;
    static FontMetrics ftm;
    static String gaclan = "";
    static int gameport = 7001;
    static private int gatey = 300;
    static int gmode = 0;
    static private SoundClip go;
    static private int gocnt = 0;
    static boolean gotlog = false;
    static private int gxdu = 0;
    static private int gydu = 0;
    static private int holdcnt = 0;
    static boolean holdit = false;
    static int hours = 8;
    static int im = 0;
    static RadicalMusic intertrack;
    static final boolean[] isbot = new boolean[8];
    static boolean justwon1 = false;
    static private boolean justwon2 = false;
    static private int kbload = 0;
    static private int lalocked = -1;
    static boolean lan = false;
    static int laps = 0;
    static int laptime = 0;
    static private int lcarx = 0;
    static private int lcarz = 0;
    private final static String[] lcmsg = {
            "", ""
    };
    static private int lcn = 0;
    static private int lfrom = 0;
    static private int lmode = 0;
    static boolean loadedt = false;
    static String localserver = "";
    static private int lockcnt = 0;
    static boolean logged = false;
    static private String loop = "";
    static int looped = 1;
    static private final SoundClip[] lowcrash = new SoundClip[3];
    static private int lsc = -1;
    static private int lxm = -10;
    static private int lym = -10;
    /**
     * Max car select selected car (don't change)
     */
    static private int maxsl = nCars - 1;
    static private int minsl = 0;
    static private int mouson = -1;
    static private final int[] movepos = {
            0, 0
    };
    static private int movly = 0;
    private final static int[] msgflk = {
            0, 0
    };
    static boolean mtop = false;
    static private int muhi = 0;
    static int multion = 0;
    static private boolean mutem = false;
    static boolean mutes = false;
    static int ndisco = 0;
    static boolean newparts = false;
    static private int nextc = 0;
    static private int nfmtab = 0;
    static int nfreeplays = 0;
    static String nickey = "";
    static String nickname = "";
    static boolean nofull = false;
    static int nplayers = 7;
    static private int oldfase = 0;
    static private SoundClip one;
    static int onjoin = -1;
    static private boolean onlock = false;
    static private int onmsc = -1;
    static int ontyp = 0;
    static int opselect = 0;
    static int osc = 10;
    private final static int[] ovh = {
            0, 0, 0, 0
    };
    private final static int[] ovsx = {
            0, 0, 0, 0
    };
    private final static int[] ovw = {
            0, 0, 0, 0
    };
    private final static int[] ovx = {
            0, 0, 0, 0
    };
    private final static int[] ovy = {
            0, 0, 0, 0
    };
    private static int pback = 0;
    static final String[] pclan = {
            "", "", "", "", "", "", "", ""
    };
    static private int pcontin = 0;
    private final static boolean[] pengs = new boolean[5];
    private final static int[] pgady = {
            0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    private final static boolean[] pgas = {
            false, false, false, false, false, false, false, false, false
    };
    private final static int[] pgatx = {
            211, 240, 280, 332, 399, 466, 517, 558, 586
    };
    private final static int[] pgaty = {
            193, 213, 226, 237, 244, 239, 228, 214, 196
    };
    static private int pin = 60;
    static int playingame = -1;
    static final String[] plnames = {
            "", "", "", "", "", "", "", ""
    };
    static private int pnext = 0;
    private final static int[] pointc = {
            6, 6
    };
    static int posit = 0;
    static private SoundClip powerup;
    static private int pstar = 0;
    
    static private int pwcnt = 0;
    static private boolean pwflk = false;
    static private int radpx = 212;
    static private int ransay = 0;
    static private Graphics2D rd;
    static private boolean remi = false;
    static private int removeds = 0;
    static private Thread runner;
    static private int runtyp = 0;
    static private String say = "";
    static final int[] sc = {
            0, 0, 0, 0, 0, 0, 0, 0
    };
    static int scm = 0;
    static private final SoundClip[] scrape = new SoundClip[4];
    static private int sendstat = 0;
    private final static String[][] sentn = {
            {
                    "", "", "", "", "", "", ""
            }, {
                    "", "", "", "", "", "", ""
            }
    };
    static String server = "multiplayer.needformadness.com";
    static String servername = "Madness";
    static int servport = 7071;
    static private boolean shaded = false;
    static private float shload = 0.0F;
    static private boolean showtf = false;
    static private int skflg = 0;
    static private final SoundClip[] skid = new SoundClip[3];
    static private boolean skidup = false;
    private final static int[] smokey = new int[94132];
    /**
     * Stage sound size (completely cosmetic)
     */
    static final int[] sndsize = {
            39, 128, 23, 58, 106, 140, 81, 135, 38, 141, 106, 76, 56, 116, 92, 208, 70, 80, 152, 102, 27, 65, 52, 30,
            151, 129, 80, 44, 57, 123, 202, 210, 111
    };
    static private Socket socket;
    static private String spin = "";
    static int starcnt = 0;
    /**
     * Current stage soundtrack;
     */
    static RadicalMusic strack;
    static private int sturn0 = 0;
    static private int sturn1 = 0;
    static private int tcnt = 30;
    /**
     * If non-zero, the player is test driving a car or stage
     */
    static int testdrive = 0;
    /**
     * Text flicker effect
     */
    static private boolean tflk = false;
    static private SoundClip three;
    static private SoundClip tires;
    static private int trkl = 0;
    static private int trklim = (int) (ThreadLocalRandom.current().nextDouble() * 40.0);
    /**
     * X positions of the stage select backgrounds (there are two)
     */
    private final static int[] trkx = {
            65, 735
    };
    static private SoundClip two;
    /**
     * Currentl last unlocked stage
     */
    static int unlocked = 1;
    private final static int[] updatec = {
            -1, -1
    };
    static private int waitlink = 0;
    static int warning = 0;
    static private boolean wasay = false;
    static private SoundClip wastd;
    static boolean winner = true;
    
    private static xtGraphics xt;
    /**
     * The X-coordinate of the start positions in a race
     */
    static final int[] xstart = {
            0, -350, 350, 0, -350, 350, 0, 0
    };
    /**
     * The Z-coordinate of the start positions in a race
     */
    static final int[] zstart = {
            -760, -380, -380, 0, 380, 380, 760, 0
    };


    static xtGraphics create(final Graphics2D graphics2d, final GameSparker gamesparker) {
        xt = new xtGraphics();
        app = gamesparker;
        rd = graphics2d;
        try {
            hello = getImage("data/baseimages/hello.gif");
            sign = getImage("data/baseimages/sign.gif");
            loadbar = getImage("data/baseimages/loadbar.gif");
        } catch (IOException e) {
            e.printStackTrace();
        }
        for (int i = 0; i < 5; i++) {
            pengs[i] = false;
        }
        nofull = false;
        final SecurityManager securitymanager = System.getSecurityManager();
        if (securitymanager != null) {
            try {
                securitymanager.checkConnect("needformadness.com", -1);
            } catch (final Exception exception) {
                final String string = "" + exception;
                if (string.contains("access denied")) {
                    nofull = true;
                }
            }
        }
        badmac = false;
        return xt;
    }

    static private void arrow(final int i, final int i216, final boolean bool) {
        final int[] is = new int[7];
        final int[] is217 = new int[7];
        final int[] is218 = new int[7];
        final int i219 = 400;
        final int i220 = -90;
        final int i221 = 700;
        for (int i222 = 0; i222 < 7; i222++) {
            is217[i222] = i220;
        }
        is[0] = i219;
        is218[0] = i221 + 110;
        is[1] = i219 - 35;
        is218[1] = i221 + 50;
        is[2] = i219 - 15;
        is218[2] = i221 + 50;
        is[3] = i219 - 15;
        is218[3] = i221 - 50;
        is[4] = i219 + 15;
        is218[4] = i221 - 50;
        is[5] = i219 + 15;
        is218[5] = i221 + 50;
        is[6] = i219 + 35;
        is218[6] = i221 + 50;
        int i224;
        if (!bool) {
            int i225 = 0;
            if (CheckPoints.x[i] - CheckPoints.opx[im] >= 0) {
                i225 = 180;
            }
            i224 = (int) (90 + i225 + Math.atan((double) (CheckPoints.z[i] - CheckPoints.opz[im]) / (double) (CheckPoints.x[i] - CheckPoints.opx[im])) / 0.017453292519943295);
        } else {
            int i226 = 0;
            if (multion == 0 || alocked == -1) {
                int i227 = -1;
                boolean bool228 = false;
                for (int i229 = 0; i229 < nplayers; i229++)
                    if (i229 != im && (py(CheckPoints.opx[im] / 100, CheckPoints.opx[i229] / 100, CheckPoints.opz[im] / 100, CheckPoints.opz[i229] / 100) < i227 || i227 == -1) && (!bool228 || CheckPoints.onscreen[i229] != 0) && CheckPoints.dested[i229] == 0) {
                        i226 = i229;
                        i227 = py(CheckPoints.opx[im] / 100, CheckPoints.opx[i229] / 100, CheckPoints.opz[im] / 100, CheckPoints.opz[i229] / 100);
                        if (CheckPoints.onscreen[i229] != 0) {
                            bool228 = true;
                        }
                    }
            } else {
                i226 = alocked;
            }
            int i230 = 0;
            if (CheckPoints.opx[i226] - CheckPoints.opx[im] >= 0) {
                i230 = 180;
            }
            i224 = (int) (90 + i230 + Math.atan((double) (CheckPoints.opz[i226] - CheckPoints.opz[im]) / (double) (CheckPoints.opx[i226] - CheckPoints.opx[im])) / 0.017453292519943295);
            if (multion == 0) {
                drawcs(13, "[                                ]", 76, 67, 240, 0);
                drawcs(13, CarDefine.names[sc[i226]], 0, 0, 0, 0);
            } else {
                rd.setFont(new Font("Arial", 1, 12));
                ftm = rd.getFontMetrics();
                drawcs(17, "[                                ]", 76, 67, 240, 0);
                drawcs(12, plnames[i226], 0, 0, 0, 0);
                rd.setFont(new Font("Arial", 0, 10));
                ftm = rd.getFontMetrics();
                drawcs(24, CarDefine.names[sc[i226]], 0, 0, 0, 0);
                rd.setFont(new Font("Arial", 1, 11));
                ftm = rd.getFontMetrics();
            }
        }
        for (i224 += Medium.xz; i224 < 0; i224 += 360) {

        }
        for (; i224 > 180; i224 -= 360) {

        }
        if (!bool) {
            if (i224 > 130) {
                i224 = 130;
            }
            if (i224 < -130) {
                i224 = -130;
            }
        } else {
            if (i224 > 100) {
                i224 = 100;
            }
            if (i224 < -100) {
                i224 = -100;
            }
        }
        if (Math.abs(ana - i224) < 180) {
            if (Math.abs(ana - i224) < 10) {
                ana = i224;
            } else if (ana < i224) {
                ana += 10;
            } else {
                ana -= 10;
            }
        } else {
            if (i224 < 0) {
                ana += 15;
                if (ana > 180) {
                    ana -= 360;
                }
            }
            if (i224 > 0) {
                ana -= 15;
                if (ana < -180) {
                    ana += 360;
                }
            }
        }
        rot(is, is218, i219, i221, ana, 7);
        i224 = Math.abs(ana);
        rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        if (!bool) {
            if (i224 > 7 || i216 > 0 || i216 == -2 || cntan != 0) {
                for (int i231 = 0; i231 < 7; i231++) {
                    is[i231] = xs(is[i231], is218[i231]);
                    is217[i231] = ys(is217[i231], is218[i231]);
                }
                int i232 = (int) (190.0F + 190.0F * (Medium.snap[0] / 100.0F));
                if (i232 > 255) {
                    i232 = 255;
                }
                if (i232 < 0) {
                    i232 = 0;
                }
                int i233 = (int) (255.0F + 255.0F * (Medium.snap[1] / 100.0F));
                if (i233 > 255) {
                    i233 = 255;
                }
                if (i233 < 0) {
                    i233 = 0;
                }
                int i234 = 0;
                if (i216 <= 0) {
                    if (i224 <= 45 && i216 != -2 && cntan == 0) {
                        i232 = (i232 * i224 + Medium.csky[0] * (45 - i224)) / 45;
                        i233 = (i233 * i224 + Medium.csky[1] * (45 - i224)) / 45;
                        i234 = (i234 * i224 + Medium.csky[2] * (45 - i224)) / 45;
                    }
                    if (i224 >= 90) {
                        int i235 = (int) (255.0F + 255.0F * (Medium.snap[0] / 100.0F));
                        if (i235 > 255) {
                            i235 = 255;
                        }
                        if (i235 < 0) {
                            i235 = 0;
                        }
                        i232 = (i232 * (140 - i224) + i235 * (i224 - 90)) / 50;
                        if (i232 > 255) {
                            i232 = 255;
                        }
                    }
                } else if (flk) {
                    i232 = (int) (255.0F + 255.0F * (Medium.snap[0] / 100.0F));
                    if (i232 > 255) {
                        i232 = 255;
                    }
                    if (i232 < 0) {
                        i232 = 0;
                    }
                    flk = false;
                } else {
                    i232 = (int) (255.0F + 255.0F * (Medium.snap[0] / 100.0F));
                    if (i232 > 255) {
                        i232 = 255;
                    }
                    if (i232 < 0) {
                        i232 = 0;
                    }
                    i233 = (int) (220.0F + 220.0F * (Medium.snap[1] / 100.0F));
                    if (i233 > 255) {
                        i233 = 255;
                    }
                    if (i233 < 0) {
                        i233 = 0;
                    }
                    flk = true;
                }
                rd.setColor(new Color(i232, i233, i234));
                rd.fillPolygon(is, is217, 7);
                i232 = (int) (115.0F + 115.0F * (Medium.snap[0] / 100.0F));
                if (i232 > 255) {
                    i232 = 255;
                }
                if (i232 < 0) {
                    i232 = 0;
                }
                i233 = (int) (170.0F + 170.0F * (Medium.snap[1] / 100.0F));
                if (i233 > 255) {
                    i233 = 255;
                }
                if (i233 < 0) {
                    i233 = 0;
                }
                i234 = 0;
                if (i216 <= 0) {
                    if (i224 <= 45 && i216 != -2 && cntan == 0) {
                        i232 = (i232 * i224 + Medium.csky[0] * (45 - i224)) / 45;
                        i233 = (i233 * i224 + Medium.csky[1] * (45 - i224)) / 45;
                        i234 = (i234 * i224 + Medium.csky[2] * (45 - i224)) / 45;
                    }
                } else if (flk) {
                    i232 = (int) (255.0F + 255.0F * (Medium.snap[0] / 100.0F));
                    if (i232 > 255) {
                        i232 = 255;
                    }
                    if (i232 < 0) {
                        i232 = 0;
                    }
                    i233 = 0;
                }
                rd.setColor(new Color(i232, i233, i234));
                rd.drawPolygon(is, is217, 7);
            }
        } else {
            int i236 = 0;
            if (multion != 0) {
                i236 = 8;
            }
            for (int i237 = 0; i237 < 7; i237++) {
                is[i237] = xs(is[i237], is218[i237]);
                is217[i237] = ys(is217[i237], is218[i237]) + i236;
            }
            int i238 = (int) (159.0F + 159.0F * (Medium.snap[0] / 100.0F));
            if (i238 > 255) {
                i238 = 255;
            }
            if (i238 < 0) {
                i238 = 0;
            }
            int i239 = (int) (207.0F + 207.0F * (Medium.snap[1] / 100.0F));
            if (i239 > 255) {
                i239 = 255;
            }
            if (i239 < 0) {
                i239 = 0;
            }
            int i240 = (int) (255.0F + 255.0F * (Medium.snap[2] / 100.0F));
            if (i240 > 255) {
                i240 = 255;
            }
            if (i240 < 0) {
                i240 = 0;
            }
            rd.setColor(new Color(i238, i239, i240));
            rd.fillPolygon(is, is217, 7);
            i238 = (int) (120.0F + 120.0F * (Medium.snap[0] / 100.0F));
            if (i238 > 255) {
                i238 = 255;
            }
            if (i238 < 0) {
                i238 = 0;
            }
            i239 = (int) (114.0F + 114.0F * (Medium.snap[1] / 100.0F));
            if (i239 > 255) {
                i239 = 255;
            }
            if (i239 < 0) {
                i239 = 0;
            }
            i240 = (int) (255.0F + 255.0F * (Medium.snap[2] / 100.0F));
            if (i240 > 255) {
                i240 = 255;
            }
            if (i240 < 0) {
                i240 = 0;
            }
            rd.setColor(new Color(i238, i239, i240));
            rd.drawPolygon(is, is217, 7);
        }
        rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
    }

    static private Image bressed(final Image image) {
        final int i = image.getHeight(null);
        final int i340 = image.getWidth(null);
        final int[] is = new int[i340 * i];
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, i340, i, is, 0, i340);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        final Color color = new Color(247, 255, 165);
        for (int i341 = 0; i341 < i340 * i; i341++)
            if (is[i341] != is[i340 * i - 1]) {
                is[i341] = color.getRGB();
            }
        return xt.createImage(new MemoryImageSource(i340, i, is, 0, i340));
    }

    static void cantgo(final Control control) {
        pnext = 0;
        trackbg(false);
        rd.drawImage(br, 65, 25, null);
        rd.drawImage(select, 338, 35, null);
        rd.setFont(new Font("Arial", 1, 13));
        ftm = rd.getFontMetrics();
        drawcs(130, "This stage will be unlocked when stage " + unlocked + " is complete!", 177, 177, 177, 3);
        for (int i = 0; i < 9; i++) {
            rd.drawImage(pgate, 277 + i * 30, 215, null);
        }
        rd.setFont(new Font("Arial", 1, 12));
        ftm = rd.getFontMetrics();
        if (aflk) {
            drawcs(185, "[ Stage " + (unlocked + 1) + " Locked ]", 255, 128, 0, 3);
            aflk = false;
        } else {
            drawcs(185, "[ Stage " + (unlocked + 1) + " Locked ]", 255, 0, 0, 3);
            aflk = true;
        }
        rd.drawImage(back[pback], 370, 345, null);
        lockcnt--;
        if (lockcnt == 0 || control.enter || control.handb || control.left) {
            control.left = false;
            control.handb = false;
            control.enter = false;
            fase = 1;
        }
    }

    static void cantreply() {
        rd.setColor(new Color(64, 143, 223));
        rd.fillRoundRect(200, 73, 400, 23, 7, 20);
        rd.setColor(new Color(0, 89, 223));
        rd.drawRoundRect(200, 73, 400, 23, 7, 20);
        drawcs(89, "Sorry not enough replay data to play available, please try again later.", 255, 255, 255, 1);
    }

    static private void carsbginflex() {
        if (!badmac) {
            flatr = 0;
            flyr = (int) (Medium.random() * 160.0F - 80.0F);
            flyrdest = (int) (flyr + Medium.random() * 160.0F - 80.0F);
            flang = 1;
            flexpix = new int[268000];
            final PixelGrabber pixelgrabber = new PixelGrabber(carsbg, 0, 0, 670, 400, flexpix, 0, 670);
            try {
                pixelgrabber.grabPixels();
            } catch (final InterruptedException ignored) {

            }
        }
    }

    static void carselect(final Control control, final ContO[] cars, final int i, final int i104, final boolean bool) {
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(0, 0, 65, 450);
        rd.fillRect(735, 0, 65, 450);
        rd.fillRect(65, 0, 670, 25);
        rd.fillRect(65, 425, 670, 25);
        if (flatrstart == 6) {
            //if (multion != 0 || testdrive == 1 || testdrive == 2)
            rd.drawImage(carsbgc, 65, 25, null);
        } else if (flatrstart <= 1) {
            drawSmokeCarsbg();
        } else {
            rd.setColor(new Color(255, 255, 255));
            rd.fillRect(65, 25, 670, 400);
            carsbginflex();
            flatrstart = 6;
        }
        rd.drawImage(selectcar, 321, 37, null);
        if (cfase == 3 || cfase == 7 || remi) {
            if (CarDefine.lastload == 1) {
                rd.drawImage(ycmc, 337, 58, null);
            }
            if (CarDefine.lastload == 2) {
                rd.drawImage(yac, 323, 58, null);
            }
        }
        /*if (cfase == 11) {
        	rd.setFont(new Font("Arial", 1, 13));
        	ftm = rd.getFontMetrics();
        	String string = "Top 20 Cars";
        	int i105 = stat.loadlist;
        	String string106 = "Weekly";
        	while (i105 > 6) {
        		i105 -= 6;
        		if (string106.equals("Semi-Annual"))
        			string106 = "Annual";
        		if (string106.equals("Monthly"))
        			string106 = "Semi-Annual";
        		if (string106.equals("Weekly"))
        			string106 = "Monthly";
        	}
        	if (i105 == 1)
        		string = "" + ("") + (string106) + (" Top 20 Cars");
        	if (i105 == 2)
        		string = "" + ("") + (string106) + (" Top 20 Class A Cars");
        	if (i105 == 3)
        		string = "" + ("") + (string106) + (" Top 20 Class A & B Cars")
        				;
        	if (i105 == 4)
        		string = "" + ("") + (string106) + (" Top 20 Class B Cars");
        	if (i105 == 5)
        		string = "" + ("") + (string106) + (" Top 20 Class B & C Cars")
        				;
        	if (i105 == 6)
        		string = "" + ("") + (string106) + (" Top 20 Class C Cars");
        	drawcs(69, string, 120, 176, 255, 3);
        }*/
        /*if (cfase == 101) {
        	rd.setFont(new Font("Arial", 1, 13));
        	ftm = rd.getFontMetrics();
        	drawcs(69, "" + ("") + (stat.viewname) + ("'s account cars!"), 220,
        			112, 33, 3);
        }*/
        if (!remi) {
            rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
            cars[sc[0]].d(rd);
            rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        }
        /*if (cfase == 8) {
        	drawprom(150, 85);
        	rd.setFont(new Font("Arial", 1, 13));
        	ftm = rd.getFontMetrics();
        	drawcs(195, "Removing Car...", 0, 0, 0, 3);
        	if (stat.action != 10)
        		if (stat.action != -10) {
        			cfase = 5;
        			showtf = false;
        		} else
        			cfase = 9;
        }*/
        if (/*(multion != 0 || testdrive == 1 || testdrive == 2) && */lsc != sc[0]) {
            if (cars[sc[0]].xy != 0) {
                cars[sc[0]].xy = 0;
            }
            boolean bool107 = false;
            for (int i108 = 0; i108 < cars[sc[0]].npl && !bool107; i108++)
                if (cars[sc[0]].p[i108].colnum == 1) {
                    final float[] fs = new float[3];
                    Color.RGBtoHSB(cars[sc[0]].p[i108].c[0], cars[sc[0]].p[i108].c[1], cars[sc[0]].p[i108].c[2], fs);
                    arnp[0] = fs[0];
                    arnp[1] = fs[1];
                    arnp[2] = 1.0F - fs[2];
                    bool107 = true;
                }
            bool107 = false;
            for (int i109 = 0; i109 < cars[sc[0]].npl && !bool107; i109++)
                if (cars[sc[0]].p[i109].colnum == 2) {
                    final float[] fs = new float[3];
                    Color.RGBtoHSB(cars[sc[0]].p[i109].c[0], cars[sc[0]].p[i109].c[1], cars[sc[0]].p[i109].c[2], fs);
                    arnp[3] = fs[0];
                    arnp[4] = fs[1];
                    arnp[5] = 1.0F - fs[2];
                    bool107 = true;
                }
            final Color color = Color.getHSBColor(arnp[0], arnp[1], 1.0F - arnp[2]);
            final Color color110 = Color.getHSBColor(arnp[3], arnp[4], 1.0F - arnp[5]);
            for (int i111 = 0; i111 < cars[sc[0]].npl; i111++) {
                if (cars[sc[0]].p[i111].colnum == 1) {
                    cars[sc[0]].p[i111].hsb[0] = arnp[0];
                    cars[sc[0]].p[i111].hsb[1] = arnp[1];
                    cars[sc[0]].p[i111].hsb[2] = 1.0F - arnp[2];
                    cars[sc[0]].p[i111].c[0] = color.getRed();
                    cars[sc[0]].p[i111].c[1] = color.getGreen();
                    cars[sc[0]].p[i111].c[2] = color.getBlue();
                    cars[sc[0]].p[i111].oc[0] = color.getRed();
                    cars[sc[0]].p[i111].oc[1] = color.getGreen();
                    cars[sc[0]].p[i111].oc[2] = color.getBlue();
                }
                if (cars[sc[0]].p[i111].colnum == 2) {
                    cars[sc[0]].p[i111].hsb[0] = arnp[3];
                    cars[sc[0]].p[i111].hsb[1] = arnp[4];
                    cars[sc[0]].p[i111].hsb[2] = 1.0F - arnp[5];
                    cars[sc[0]].p[i111].c[0] = color110.getRed();
                    cars[sc[0]].p[i111].c[1] = color110.getGreen();
                    cars[sc[0]].p[i111].c[2] = color110.getBlue();
                    cars[sc[0]].p[i111].oc[0] = color110.getRed();
                    cars[sc[0]].p[i111].oc[1] = color110.getGreen();
                    cars[sc[0]].p[i111].oc[2] = color110.getBlue();
                }
            }
            lsc = sc[0];
        }
        int i112 = -1;
        int i113 = 0;
        final boolean bool114 = false;
        if (flipo == 0) {
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            int i115 = 0;
            if (flatrstart < 6) {
                i115 = 2;
            }
            if (!remi && (cfase != 10 || CarDefine.action != 0 && CarDefine.action < 14)) {
                if (cfase == 3 && CarDefine.lastload == 2) {
                    GameSparker.mcars.move(400 - GameSparker.mcars.w / 2, 78);
                    GameSparker.mcars.show = true;
                    if (!GameSparker.mcars.getSelectedItem().equals(CarDefine.names[sc[0]])) {
                        for (int i116 = 16; i116 < CarDefine.nlocars; i116++)
                            if (CarDefine.names[i116].equals(GameSparker.mcars.getSelectedItem())) {
                                i112 = i116;
                            }
                        if (i112 == -1) {
                            cfase = 5;
                            CarDefine.action = 4;
                            CarDefine.sparkactionloader();
                        }
                    }
                } else {
                    GameSparker.mcars.show = false;
                    String string = "";
                    if (cfase == 11) {
                        string = "N#" + (sc[0] - 35) + "  ";
                    }
                    if (aflk) {
                        drawcs(95 + i115, "" + string + CarDefine.names[sc[0]], 240, 240, 240, 3);
                        aflk = false;
                    } else {
                        drawcs(95, "" + string + CarDefine.names[sc[0]], 176, 176, 176, 3);
                        aflk = true;
                    }
                }
            } else {
                GameSparker.mcars.show = false;
            }
            cars[sc[0]].z = 950;
            if (sc[0] == 13) {
                cars[sc[0]].z = 1000;
            }
            cars[sc[0]].y = -34 - cars[sc[0]].grat;
            cars[sc[0]].x = 0;
            if (mouson >= 0 && mouson <= 3) {
                cars[sc[0]].xz += 2;
            } else {
                cars[sc[0]].xz += 5;
            }
            if (cars[sc[0]].xz > 360) {
                cars[sc[0]].xz -= 360;
            }
            cars[sc[0]].zy = 0;
            cars[sc[0]].wzy -= 10;
            if (cars[sc[0]].wzy < -30) {
                cars[sc[0]].wzy += 30;
            }
            if (!remi) {
                if (sc[0] != minsl) {
                    rd.drawImage(back[pback], 95, 275, null);
                }
                if (sc[0] != maxsl) {
                    rd.drawImage(next[pnext], 645, 275, null);
                }
            }
            /*if (gmode == 1) {
            	if (sc[0] == 5 && unlocked[0] <= 2)
            		i113 = 2;
            	if (sc[0] == 6 && unlocked[0] <= 4)
            		i113 = 4;
            	if (sc[0] == 11 && unlocked[0] <= 6)
            		i113 = 6;
            	if (sc[0] == 14 && unlocked[0] <= 8)
            		i113 = 8;
            	if (sc[0] == 15 && unlocked[0] <= 10)
            		i113 = 10;
            }*/
            if (gmode == 2 && sc[0] >= 8 && unlocked <= (sc[0] - 7) * 2) {
                i113 = (sc[0] - 7) * 2;
            }
            if (i113 != 0) {
                if (gatey == 300) {
                    for (int i117 = 0; i117 < 9; i117++) {
                        pgas[i117] = false;
                        pgady[i117] = 0;
                    }
                    pgas[0] = true;
                }
                for (int i118 = 0; i118 < 9; i118++) {
                    rd.drawImage(pgate, pgatx[i118], pgaty[i118] + pgady[i118] - gatey, null);
                    if (flatrstart == 6)
                        if (pgas[i118]) {
                            pgady[i118] -= (80 + 100 / (i118 + 1) - Math.abs(pgady[i118])) / 3;
                            if (pgady[i118] < -(70 + 100 / (i118 + 1))) {
                                pgas[i118] = false;
                                if (i118 != 8) {
                                    pgas[i118 + 1] = true;
                                }
                            }
                        } else {
                            pgady[i118] += (80 + 100 / (i118 + 1) - Math.abs(pgady[i118])) / 3;
                            if (pgady[i118] > 0) {
                                pgady[i118] = 0;
                            }
                        }
                }
                if (gatey != 0) {
                    gatey -= 100;
                }
                if (flatrstart == 6) {
                    drawcs(355, "[ Car Locked ]", 210, 210, 210, 3);
                    drawcs(375, "This car unlocks when stage " + i113 + " is completed...", 255, 96, 0, 3);
                }
            } else {
                if (flatrstart == 6) {
                    /*if (cfase == 10) {
                    	/*if (stat.action == 13) {
                    		minsl = nCars + 20;
                    		maxsl = stat.xnlocars - 1;
                    		i112 = nCars + 20;
                    		stat.action = 0;
                    		cfase = 11;
                    	}*/
                    /*if (stat.action == 12) {
                    	int i119 = stat.loadlist;
                    	String string = "Top 20 Cars";
                    	String string120 = "Weekly";
                    	while (i119 > 6) {
                    		i119 -= 6;
                    		if (string120.equals("Semi-Annual"))
                    			string120 = "Annual";
                    		if (string120.equals("Monthly"))
                    			string120 = "Semi-Annual";
                    		if (string120.equals("Weekly"))
                    			string120 = "Monthly";
                    	}
                    	if (i119 == 1)
                    		string = "" + ("") + (string120) + (" Top 20 Cars")
                    				;
                    	if (i119 == 2)
                    		string = "" + ("") + (string120)
                    				 + (" Top 20 Class A Cars");
                    	if (i119 == 3)
                    		string = "" + ("") + (string120)
                    				 + (" Top 20 Class A & B Cars");
                    	if (i119 == 4)
                    		string = "" + ("") + (string120)
                    				 + (" Top 20 Class B Cars");
                    	if (i119 == 5)
                    		string = "" + ("") + (string120)
                    				 + (" Top 20 Class B & C Cars");
                    	if (i119 == 6)
                    		string = "" + ("") + (string120)
                    				 + (" Top 20 Class C Cars");
                    	drawprom(145, 170);
                    	drawcs(195,
                    			"" + ("[  Loading ") + (string) + ("  ]"),
                    			0, 0, 0, 3);
                    	if (stat.nl > 0 && stat.nl <= 20)
                    		drawcs(235, "" + ("Loading :  ") + (stat.loadnames[stat.nl - 1])
                    				 + (""), 0, 0, 0, 3);
                    }*/
                    /*if (stat.action == 11) {
                    	drawprom(145, 170);
                    	drawcs(195, "Loading List, Please Wait...", 0, 0, 0, 3);
                    }*/
                    /*if (stat.action == -1) {
                    	drawprom(145, 170);
                    	drawcs(195, "Failed to Load List.", 0, 0, 0, 3);
                    	drawcs(225, "Unknown Error.  Please try again later.", 0, 0, 0, 3);
                    	if (drawcarb(true, null, "   OK   ", 371, 255, i, i104, bool)) {
                    		stat.action = 0;
                    		cfase = basefase;
                    	}
                    }*/
                    /*if (stat.action == 0 || stat.action == 14 || stat.action == 15 || stat.action == 16
                    		|| stat.action == 17) {
                    	drawprom(65, 250);
                    	if (drawcarb(true, null, " X ", 557, 70, i, i104, bool)) {
                    		stat.action = 0;
                    		cfase = basefase;
                    	}
                    	drawcs(305, "The lists get updated every 24 hours!", 0, 0, 0, 3);
                    	if (stat.action == 14 || stat.action == 15 || stat.action == 16 || stat.action == 17) {
                    		if (!bool && cntflock == 20)
                    			cntflock = 0;
                    		if (stat.action == 14)
                    			drawcs(91, "Weekly Top 20 Cars", 0, 0, 0, 3);
                    		if (stat.action == 15)
                    			drawcs(91, "Monthly Top 20 Cars", 0, 0, 0, 3);
                    		if (stat.action == 16)
                    			drawcs(91, "Semi-Annual Top 20 Cars", 0, 0, 0, 3);
                    		if (stat.action == 17)
                    			drawcs(91, "Annual Top 20 Cars", 0, 0, 0, 3);
                    		if (drawcarb(true, null, "   All Cars, All Classes   ", 318, 105, i, i104, bool)
                    				&& cntflock == 0) {
                    			stat.loadlist = 1 + (stat.action - 14) * 6;
                    			stat.action = 11;
                    			stat.sparkactionloader();
                    		}
                    		if (drawcarb(true, null, "Class A Cars", 337, 135, i, i104, bool) && cntflock == 0) {
                    			stat.loadlist = 2 + (stat.action - 14) * 6;
                    			stat.action = 11;
                    			stat.sparkactionloader();
                    		}
                    		if (drawcarb(true, null, "Class A & B Cars", 337, 165, i, i104, bool)
                    				&& cntflock == 0) {
                    			stat.loadlist = 3 + (stat.action - 14) * 6;
                    			stat.action = 11;
                    			stat.sparkactionloader();
                    		}
                    		if (drawcarb(true, null, "Class B Cars", 337, 195, i, i104, bool) && cntflock == 0) {
                    			stat.loadlist = 4 + (stat.action - 14) * 6;
                    			stat.action = 11;
                    			stat.sparkactionloader();
                    		}
                    		if (drawcarb(true, null, "Class B & C Cars", 337, 225, i, i104, bool)
                    				&& cntflock == 0) {
                    			stat.loadlist = 5 + (stat.action - 14) * 6;
                    			stat.action = 11;
                    			stat.sparkactionloader();
                    		}
                    		if (drawcarb(true, null, "Class C Cars", 337, 255, i, i104, bool) && cntflock == 0) {
                    			stat.loadlist = 6 + (stat.action - 14) * 6;
                    			stat.action = 11;
                    			stat.sparkactionloader();
                    		}
                    	}
                    	if (stat.action == 0) {
                    		drawcs(91, "Top 20 Most Added Public Custom Cars", 0, 0, 0, 3);
                    		if (drawcarb(true, null, "  Weekly Top 20  ", 338, 125, i, i104, bool))
                    			stat.action = 14;
                    		if (drawcarb(true, null, "  Monthly Top 20  ", 337, 165, i, i104, bool))
                    			stat.action = 15;
                    		if (drawcarb(true, null, "  Semi-Annual Top 20  ", 321, 205, i, i104, bool))
                    			stat.action = 16;
                    		if (drawcarb(true, null, "  Annual Top 20  ", 339, 245, i, i104, bool))
                    			stat.action = 17;
                    		if (cntflock != 20)
                    			cntflock = 20;
                    	}
                    }*/
                    //}
                    /*if (cfase == 100) {
                    	if (stat.action == -1) {
                    		drawprom(145, 170);
                    		drawcs(195, "Failed to Load List.", 0, 0, 0, 3);
                    		drawcs(225, "Unknown Error.  Please try again later.", 0, 0, 0, 3);
                    		if (drawcarb(true, null, "   OK   ", 371, 255, i, i104, bool))
                    			if (sc[0] >= 16 && stat.lastload == 2 && sc[0] < 36)
                    				cfase = 3;
                    			else
                    				cfase = 0;
                    	}
                    	if (stat.action == -2) {
                    		drawprom(145, 170);
                    		drawcs(195, "No account cars found.", 0, 0, 0, 3);
                    		drawcs(225,
                    				"" + ("") + (stat.viewname)
                    						 + (" does not have any published or added cars."),
                    				0, 0, 0, 3);
                    		if (drawcarb(true, null, "   OK   ", 371, 255, i, i104, bool))
                    			if (sc[0] >= 16 && stat.lastload == 2 && sc[0] < 36)
                    				cfase = 3;
                    			else
                    				cfase = 0;
                    	}
                    	if (stat.action == 100) {
                    		stat.action = 101;
                    		stat.sparkactionloader();
                    	}
                    	if (stat.action == 101) {
                    		drawprom(145, 170);
                    		drawcs(195, "" + ("Loading ") + (stat.viewname)
                    				 + ("'s account cars, please wait..."), 0, 0, 0, 3);
                    	}
                    	if (stat.action == 102) {
                    		drawprom(145, 170);
                    		drawcs(195, "" + ("Loading ") + (stat.viewname)
                    				 + ("'s account cars, please wait..."), 0, 0, 0, 3);
                    		if (stat.nl > 0 && stat.nl <= 20)
                    			drawcs(235, "" + ("Loading :  ") + (stat.loadnames[stat.nl - 1])
                    					 + (""), 0, 0, 0, 3);
                    	}
                    	if (stat.action == 103) {
                    		minsl = nCars + 20;
                    		maxsl = stat.xnlocars - 1;
                    		i112 = nCars + 20;
                    		stat.action = 0;
                    		cfase = 101;
                    	}
                    }*/
                    /*if (cfase == 0 && testdrive != 1 && testdrive != 2 && gmode == 0) {
                    	int i121 = 95;
                    	int i122 = 5;
                    	if (multion != 0) {
                    		i121 = 185;
                    		i122 = 0;
                    	}
                    	if (multion == 0 && drawcarb(false, cmc, "", 95, 70, i, i104, bool))
                    		if (stat.lastload != 1)
                    			cfase = 1;
                    		else {
                    			minsl = nCars;
                    			maxsl = stat.nlcars - 1;
                    			i112 = nCars;
                    			cfase = 3;
                    		}
                    	if (drawcarb(false, myc, "", i121, 105 + i122, i, i104, bool))
                    		if (stat.lastload != 2) {
                    			cfase = 5;
                    			showtf = false;
                    			if (!logged) {
                    				stat.action = 0;
                    				stat.reco = -2;
                    				tcnt = 5;
                    				cntflock = 0;
                    			} else {
                    				stat.action = 3;
                    				stat.sparkactionloader();
                    			}
                    		} else {
                    			minsl = nCars;
                    			maxsl = stat.nlocars - 1;
                    			if (onmsc >= minsl && onmsc <= maxsl)
                    				i112 = onmsc;
                    			else
                    				i112 = nCars;
                    			cfase = 3;
                    		}
                    	if ((multion == 0 || onjoin == -1) && drawcarb(false, top20s, "", i121,
                    			(i121 - 95) / 7 + 25 + i122, i, i104, bool)) {
                    		stat.action = 0;
                    		cfase = 10;
                    	}
                    	if (remi)
                    		remi = false;
                    }
                    if (cfase == -1)
                    	if (autolog) {
                    		autolog = false;
                    		cfase = 5;
                    		stat.action = 1;
                    		stat.sparkactionloader();
                    	} else if (stat.lastload != 2) {
                    		cfase = 5;
                    		showtf = false;
                    		if (!logged) {
                    			stat.action = 0;
                    			stat.reco = -2;
                    			tcnt = 5;
                    			cntflock = 0;
                    		} else {
                    			stat.action = 3;
                    			stat.sparkactionloader();
                    		}
                    	} else {
                    		minsl = nCars;
                    		maxsl = stat.nlocars - 1;
                    		if (onmsc >= minsl && onmsc <= maxsl)
                    			i112 = onmsc;
                    		else
                    			i112 = nCars;
                    		cfase = 3;
                    	}
                    if (cfase == 9) {
                    	drawprom(145, 95);
                    	drawcs(175, "Failed to remove car.  Unkown Error.  Try again laster.", 0, 0, 0, 3);
                    	if (drawcarb(true, null, "   OK   ", 371, 195, i, i104, bool)) {
                    		minsl = nCars;
                    		maxsl = stat.nlocars - 1;
                    		if (onmsc >= minsl && onmsc <= maxsl)
                    			i112 = onmsc;
                    		else
                    			i112 = nCars;
                    		cfase = 3;
                    	}
                    }
                    if (cfase == 7) {
                    	if (app.mycar.isShowing())
                    		app.mycar.setVisible(false);
                    	drawprom(145, 95);
                    	drawcs(175, "Remove this car from your account?", 0, 0, 0, 3);
                    	if (drawcarb(true, null, " Yes ", 354, 195, i, i104, bool)) {
                    		remi = true;
                    		minsl = 0;
                    		maxsl = nCars - 1;
                    		i112 = nCars - 1;
                    		cfase = 8;
                    		onmsc = sc[0];
                    		stat.ac = sc[0];
                    		stat.action = 10;
                    		stat.sparkactionloader();
                    	}
                    	if (drawcarb(true, null, " No ", 408, 195, i, i104, bool))
                    		cfase = 3;
                    }*/
                    /*if (cfase == 3 && i112 == -1) {
                    	int i123 = 95;
                    	int i124 = 5;
                    	if (multion != 0) {
                    		i123 = 185;
                    		i124 = 0;
                    	}
                    	if (drawcarb(false, gac, "", i123, 105 + i124, i, i104, bool)) {
                    		minsl = 0;
                    		maxsl = nCars - 1;
                    		if (onmsc >= minsl && onmsc <= maxsl)
                    			i112 = onmsc;
                    		else
                    			i112 = nCars - 1;
                    		cfase = 0;
                    	}
                    	if (multion == 0) {
                    		if (!app.openm) {
                    			if (!app.mycar.isShowing()) {
                    				app.mycar.setVisible(true);
                    				app.mycar.setState(stat.include[sc[0] - 16]);
                    			}
                    		} else
                    			app.mycar.setVisible(false);
                    		rd.setColor(new Color(198, 179, 129));
                    		rd.fillRoundRect(305, 302, 190, 24, 7, 20);
                    		rd.setColor(new Color(0, 0, 0));
                    		rd.drawRoundRect(305, 302, 190, 24, 7, 20);
                    		app.movefield(app.mycar, 334, 306, 150, 17);
                    		if (app.mycar.getState() != stat.include[sc[0] - 16]) {
                    			stat.include[sc[0] - 16] = app.mycar.getState();
                    			app.requestFocus();
                    		}
                    	}
                    	if ((multion == 0 || onjoin == -1) && drawcarb(false, top20s, "", i123,
                    			(i123 - 95) / 7 + 25 + i124, i, i104, bool)) {
                    		stat.action = 0;
                    		cfase = 10;
                    		if (app.mycar.isShowing())
                    			app.mycar.setVisible(false);
                    	}
                    	if (stat.lastload == 2) {
                    		if (drawcarb(true, null, "X", 567, 135, i, i104, bool))
                    			cfase = 7;
                    		rd.setFont(new Font("Arial", 1, 12));
                    		ftm = rd.getFontMetrics();
                    		rd.setColor(new Color(0, 0, 0));
                    		if (!stat.createdby[sc[0] - 16].equals(nickname))
                    			bool114 = clink(stat.createdby[sc[0] - 16], i, i104, bool);
                    		else
                    			rd.drawString("Created by You", 241, 160);
                    	}
                    	if (remi)
                    		remi = false;
                    	if (noclass) {
                    		drawprom(200, 95);
                    		rd.setFont(new Font("Arial", 1, 13));
                    		ftm = rd.getFontMetrics();
                    		String string = "Class C";
                    		if (ontyp == 2)
                    			string = "Class B or C";
                    		if (ontyp == 3)
                    			string = "Class B";
                    		if (ontyp == 4)
                    			string = "Class A or B";
                    		if (ontyp == 5)
                    			string = "Class A";
                    		drawcs(230, "" + ("You do not have a ") + (string)
                    				 + (" car in your account cars."), 0, 0, 0, 3);
                    		if (drawcarb(true, null, "   OK   ", 371, 250, i, i104, bool))
                    			noclass = false;
                    	}
                    }*/
                    /*if ((cfase == 11 || cfase == 101) && i112 == -1) {
                    	if (stat.action == -9) {
                    		drawprom(145, 95);
                    		drawcs(175, "Unknown error!  Failed to add car.  Try again later.", 0, 0, 0, 3);
                    		if (drawcarb(true, null, " OK ", 379, 195, i, i104, bool))
                    			stat.action = 0;
                    	}
                    	if (stat.action == -8) {
                    		drawprom(145, 95);
                    		drawcs(175, "Failed.  You already have 20 cars in your account!", 0, 0, 0, 3);
                    		if (drawcarb(true, null, " OK ", 379, 195, i, i104, bool))
                    			stat.action = 0;
                    	}
                    	if (stat.action == -7) {
                    		drawprom(145, 95);
                    		drawcs(175, "You already have this car!", 0, 0, 0, 3);
                    		if (drawcarb(true, null, " OK ", 379, 195, i, i104, bool))
                    			stat.action = 0;
                    	}
                    	if (stat.action == 7) {
                    		drawprom(145, 95);
                    		drawcs(175,
                    				"" + ("") + (stat.names[stat.ac])
                    						 + (" has been successfully added to your cars!"),
                    				0, 0, 0, 3);
                    		if (drawcarb(true, null, " OK ", 379, 195, i, i104, bool))
                    			stat.action = 0;
                    	}
                    	if (stat.action == 6) {
                    		drawprom(145, 95);
                    		drawcs(195, "" + ("Adding ") + (stat.names[stat.ac])
                    				 + (" to your cars..."), 0, 0, 0, 3);
                    	}
                    	int i125 = 95;
                    	int i126 = 5;
                    	if (multion != 0) {
                    		i125 = 185;
                    		i126 = 0;
                    	}
                    	if (onmsc >= 16 && (stat.lastload == 2 || stat.lastload == -2)) {
                    		if (drawcarb(false, myc, "", i125, 105 + i126, i, i104, bool)) {
                    			if (stat.lastload != 2) {
                    				cfase = 5;
                    				showtf = false;
                    				if (!logged) {
                    					stat.action = 0;
                    					stat.reco = -2;
                    					tcnt = 5;
                    					cntflock = 0;
                    				} else {
                    					stat.action = 3;
                    					stat.sparkactionloader();
                    				}
                    			} else {
                    				stat.action = 0;
                    				minsl = 16;
                    				maxsl = stat.nlocars - 1;
                    				if (onmsc >= minsl && onmsc <= maxsl)
                    					i112 = onmsc;
                    				else
                    					i112 = nCars;
                    				cfase = 3;
                    			}
                    			app.moused = false;
                    		}
                    	} else if (drawcarb(false, gac, "", i125, 105 + i126, i, i104, bool)) {
                    		stat.action = 0;
                    		minsl = 0;
                    		maxsl = nCars - 1;
                    		if (onmsc >= minsl && onmsc <= maxsl)
                    			i112 = onmsc;
                    		else
                    			i112 = nCars - 1;
                    		cfase = 0;
                    		app.moused = false;
                    	}
                    	if (drawcarb(false, top20s, "", i125, (i125 - 95) / 7 + 25 + i126, i, i104, bool)) {
                    		stat.action = 0;
                    		cfase = 10;
                    	}
                    	if (stat.action == 0) {
                    		rd.setFont(new Font("Arial", 1, 12));
                    		ftm = rd.getFontMetrics();
                    		rd.setColor(new Color(0, 0, 0));
                    		if (!stat.createdby[sc[0] - 16].equals(nickname))
                    			bool114 = clink(stat.createdby[sc[0] - 16], i, i104, bool);
                    		else
                    			rd.drawString("Created by You", 241, 160);
                    		if (cfase != 101) {
                    			rd.setFont(new Font("Arial", 1, 11));
                    			rd.drawString("" + ("Added by :  ") + (stat.adds[sc[0] - 36])
                    					 + (" Players"), 241, 180);
                    		}
                    	}
                    }*/
                    /*if (cfase == 5) {
                    	drawprom(145, 170);
                    	if (stat.action == 5) {
                    		minsl = 16;
                    		maxsl = stat.nlocars - 1;
                    		if (stat.inslot != -1) {
                    			onmsc = stat.inslot;
                    			stat.inslot = -1;
                    		}
                    		if (onmsc >= minsl && onmsc <= maxsl)
                    			i112 = onmsc;
                    		else
                    			i112 = nCars;
                    		cfase = 3;
                    	}
                    	if (stat.action == 4) {
                    		drawcs(195, "[  Loading Car  ]", 0, 0, 0, 3);
                    		drawcs(235, "" + ("Loading :  ") + (app.mcars.getSelectedItem())
                    				 + (""), 0, 0, 0, 3);
                    	}
                    	if (stat.action == -2) {
                    		drawcs(195, "Unknown Connection Error", 0, 0, 0, 3);
                    		drawcs(225, "Failed to connect to server, try again later!", 0, 0, 0, 3);
                    		if (drawcarb(true, null, "   OK   ", 371, 255, i, i104, bool))
                    			cfase = 0;
                    	}
                    	if (stat.action == -1) {
                    		drawcs(195, "No published cars found...", 0, 0, 0, 3);
                    		drawcs(225, "You have no added cars to your account yet!", 0, 0, 0, 3);
                    		if (drawcarb(true, null, "   OK   ", 371, 255, i, i104, bool))
                    			cfase = 0;
                    	}
                    	if (stat.action == 2 || stat.action == 3) {
                    		drawcs(195, "Loading your Account Cars list...", 0, 0, 0, 3);
                    		if (stat.action == 2) {
                    			nickname = app.tnick.getText();
                    			backlog = nickname;
                    			nickey = stat.tnickey;
                    			clan = stat.tclan;
                    			clankey = stat.tclankey;
                    			app.setloggedcookie();
                    			logged = true;
                    			gotlog = true;
                    			if (stat.reco == 0)
                    				acexp = 0;
                    			if (stat.reco > 10)
                    				acexp = stat.reco - 10;
                    			if (stat.reco == 3)
                    				acexp = -1;
                    			if (stat.reco == 111)
                    				if (!backlog.equalsIgnoreCase(nickname))
                    					acexp = -3;
                    				else
                    					acexp = 0;
                    			if (basefase == 0)
                    				stat.action = 3;
                    			if (basefase == 11) {
                    				stat.action = 6;
                    				cfase = 11;
                    			}
                    			if (basefase == 101) {
                    				stat.action = 6;
                    				cfase = 101;
                    			}
                    		}
                    	}
                    	if (stat.action == 1)
                    		drawcs(195, "Logging in to your account...", 0, 0, 0, 3);
                    	if (stat.action == 0) {
                    		if (stat.reco == -5)
                    			drawcs(171, "Login to Add this Car to your Account", 0, 0, 0, 3);
                    		if (stat.reco == -2)
                    			drawcs(171, "Login to Retrieve your Account Cars", 0, 0, 0, 3);
                    		if (stat.reco == -1)
                    			drawcs(171, "Unable to connect to server, try again later!", 0, 8, 0, 3);
                    		if (stat.reco == 1)
                    			drawcs(171, "Sorry.  The Nickname you have entered is incorrect.", 0, 0, 0, 3);
                    		if (stat.reco == 2)
                    			drawcs(171, "Sorry.  The Password you have entered is incorrect.", 0, 0, 0, 3);
                    		if (stat.reco == -167 || stat.reco == -177) {
                    			if (stat.reco == -167) {
                    				nickname = app.tnick.getText();
                    				backlog = nickname;
                    				stat.reco = -177;
                    			}
                    			drawcs(171, "You are currently using a trial account.", 0, 0, 0, 3);
                    		}
                    		if (stat.reco == -3 && (tcnt % 3 != 0 || tcnt > 20))
                    			drawcs(171, "Please enter your Nickname!", 0, 0, 0, 3);
                    		if (stat.reco == -4 && (tcnt % 3 != 0 || tcnt > 20))
                    			drawcs(171, "Please enter your Password!", 0, 0, 0, 3);
                    		if (!showtf) {
                    			app.tnick.setVisible(true);
                    			app.tnick.setBackground(new Color(206, 237, 255));
                    			if (stat.reco != 1) {
                    				if (stat.reco != 2)
                    					app.tnick.setText(nickname);
                    				app.tnick.setForeground(new Color(0, 0, 0));
                    			} else
                    				app.tnick.setForeground(new Color(255, 0, 0));
                    			app.tnick.requestFocus();
                    			app.tpass.setVisible(true);
                    			app.tpass.setBackground(new Color(206, 237, 255));
                    			if (stat.reco != 2) {
                    				if (!autolog)
                    					app.tpass.setText("");
                    				app.tpass.setForeground(new Color(0, 0, 0));
                    			} else
                    				app.tpass.setForeground(new Color(255, 0, 0));
                    			if (!app.tnick.getText().equals("") && stat.reco != 1)
                    				app.tpass.requestFocus();
                    			showtf = true;
                    		}
                    		rd.drawString("Nickname:", 376 - ftm.stringWidth("Nickname:") - 14, 201);
                    		rd.drawString("Password:", 376 - ftm.stringWidth("Password:") - 14, 231);
                    		app.movefieldd(app.tnick, 376, 185, 129, 23, true);
                    		app.movefieldd(app.tpass, 376, 215, 129, 23, true);
                    		if (tcnt < 30) {
                    			tcnt++;
                    			if (tcnt == 30) {
                    				if (stat.reco == 2)
                    					app.tpass.setText("");
                    				app.tnick.setForeground(new Color(0, 0, 0));
                    				app.tpass.setForeground(new Color(0, 0, 0));
                    			}
                    		}
                    		if (stat.reco != -177) {
                    			if (drawcarb(true, null, "       Login       ", 347, 247, i, i104, bool)
                    					&& tcnt > 5) {
                    				tcnt = 0;
                    				if (!app.tnick.getText().equals("") && !app.tpass.getText().equals("")) {
                    					autolog = false;
                    					app.tnick.setVisible(false);
                    					app.tpass.setVisible(false);
                    					app.requestFocus();
                    					stat.action = 1;
                    					stat.sparkactionloader();
                    				} else {
                    					if (app.tpass.getText().equals(""))
                    						stat.reco = -4;
                    					if (app.tnick.getText().equals(""))
                    						stat.reco = -3;
                    				}
                    			}
                    		} else if (drawcarb(true, null, "  Upgrade to have your own cars!  ", 284, 247, i, i104,
                    				bool) && cntflock == 0) {
                    			app.editlink(this.nickname, true);
                    			cntflock = 100;
                    		}
                    		if (drawcarb(true, null, "  Cancel  ", 409, 282, i, i104, bool)) {
                    			app.tnick.setVisible(false);
                    			app.tpass.setVisible(false);
                    			app.requestFocus();
                    			cfase = basefase;
                    		}
                    		if (drawcarb(true, null, "  Register!  ", 316, 282, i, i104, bool)) {
                    			if (cntflock == 0) {
                    				app.reglink();
                    				cntflock = 100;
                    			}
                    		} else if (cntflock != 0)
                    			cntflock--;
                    	}
                    }*/

                    //
                    // WE HAD TO REMOVE THIS
                    // SORRY LADS
                    //

                    /*if (cfase == 4) {
                    	drawprom(145, 150);
                    	rd.setColor(new Color(0, 0, 0));
                    	rd.drawString("Failed to find any ready car in your \u2018mycars\u2019 folder!", 215, 175);
                    	rd.drawString("Please \u2018Test Drive\u2019 your cars in the Car Maker to make", 215, 215);
                    	rd.drawString("sure they are ready.", 215, 235);
                    	if (drawcarb(true, null, "   OK   ", 371, 255, i, i104, bool))
                    		cfase = 0;
                    }
                    if (cfase == 2) {
                    	drawprom(165, 70);
                    	drawcs(205, "Loading Car Maker Cars...", 0, 0, 0, 3);
                    	//app.repaint();
                    	stat.loadcarmaker();
                    	if (stat.nlcars > nCars) {
                    		minsl = nCars;
                    		maxsl = stat.nlcars - 1;
                    		i112 = nCars;
                    		cfase = 3;
                    	} else
                    		cfase = 4;
                    }
                    if (cfase == 1) {
                    	drawprom(145, 170);
                    	rd.setColor(new Color(0, 0, 0));
                    	rd.drawString("The game will now load all the cars that can be loaded", 215, 170);
                    	rd.drawString("from your \u2018mycars\u2019 folder.", 215, 190);
                    	rd.drawString("If a car is not loaded, then it is not ready (not finished).", 215, 210);
                    	rd.drawString("Perform a \u2018Test Drive\u2019 on any car to see if it is ready or not.", 215,
                    			230);
                    	rd.drawString("The maximum number of cars that can be loaded is  40 !", 215, 260);
                    	if (drawcarb(true, null, "   OK   ", 371, 275, i, i104, bool))
                    		cfase = 2;
                    }*/
                    rd.setFont(new Font("Arial", 1, 11));
                    ftm = rd.getFontMetrics();
                    rd.setColor(new Color(181, 120, 40));
                    rd.drawString("Top Speed:", 98, 343);
                    rd.drawImage(statb, 162, 337, null);
                    rd.drawString("Acceleration:", 88, 358);
                    rd.drawImage(statb, 162, 352, null);
                    rd.drawString("Handling:", 110, 373);
                    rd.drawImage(statb, 162, 367, null);
                    rd.drawString("Stunts:", 495, 343);
                    rd.drawImage(statb, 536, 337, null);
                    rd.drawString("Strength:", 483, 358);
                    rd.drawImage(statb, 536, 352, null);
                    rd.drawString("Endurance:", 473, 373);
                    rd.drawImage(statb, 536, 367, null);
                    rd.setColor(new Color(0, 0, 0));
                    float f = (CarDefine.swits[sc[0]][2] - 220) / 90.0F;
                    if (f < 0.2) {
                        f = 0.2F;
                    }
                    rd.fillRect((int) (162.0F + 156.0F * f), 337, (int) (156.0F * (1.0F - f) + 1.0F), 7);
                    f = CarDefine.acelf[sc[0]][1] * CarDefine.acelf[sc[0]][0] * CarDefine.acelf[sc[0]][2] * CarDefine.grip[sc[0]] / 7700.0F;
                    if (f > 1.0F) {
                        f = 1.0F;
                    }
                    rd.fillRect((int) (162.0F + 156.0F * f), 352, (int) (156.0F * (1.0F - f) + 1.0F), 7);
                    f = CarDefine.dishandle[sc[0]];
                    rd.fillRect((int) (162.0F + 156.0F * f), 367, (int) (156.0F * (1.0F - f) + 1.0F), 7);
                    f = (CarDefine.airc[sc[0]] * CarDefine.airs[sc[0]] * CarDefine.bounce[sc[0]] + 28.0F) / 139.0F;
                    if (f > 1.0F) {
                        f = 1.0F;
                    }
                    rd.fillRect((int) (536.0F + 156.0F * f), 337, (int) (156.0F * (1.0F - f) + 1.0F), 7);
                    final float f127 = 0.5F;
                    f = (CarDefine.moment[sc[0]] + f127) / 2.6F;
                    if (f > 1.0F) {
                        f = 1.0F;
                    }
                    rd.fillRect((int) (536.0F + 156.0F * f), 352, (int) (156.0F * (1.0F - f) + 1.0F), 7);
                    f = CarDefine.outdam[sc[0]];
                    rd.fillRect((int) (536.0F + 156.0F * f), 367, (int) (156.0F * (1.0F - f) + 1.0F), 7);
                    rd.drawImage(statbo, 162, 337, null);
                    rd.drawImage(statbo, 162, 352, null);
                    rd.drawImage(statbo, 162, 367, null);
                    rd.drawImage(statbo, 536, 337, null);
                    rd.drawImage(statbo, 536, 352, null);
                    rd.drawImage(statbo, 536, 367, null);
                    {
                        rd.setFont(new Font("Arial", 1, 13));
                        ftm = rd.getFontMetrics();
                        String string = "Class C";
                        if (CarDefine.cclass[sc[0]] == 1) {
                            string = "Class B & C";
                        }
                        if (CarDefine.cclass[sc[0]] == 2) {
                            string = "Class B";
                        }
                        if (CarDefine.cclass[sc[0]] == 3) {
                            string = "Class A & B";
                        }
                        if (CarDefine.cclass[sc[0]] == 4) {
                            string = "Class A";
                        }
                        if (kbload < 7) {
                            rd.setColor(new Color(0, 0, 0));
                            kbload++;
                        } else {
                            rd.setColor(new Color(176, 41, 0));
                            kbload = 0;
                        }
                        if (cfase != 10 || CarDefine.action != 0 && CarDefine.action < 14) {
                            rd.drawString(string, 549 - ftm.stringWidth(string) / 2, 95);
                        }
                        rd.setFont(new Font("Arial", 1, 12));
                        ftm = rd.getFontMetrics();
                        rd.setColor(new Color(0, 0, 0));
                        rd.drawString("1st Color", 100, 55);
                        rd.drawString("2nd Color", 649, 55);
                        rd.setFont(new Font("Arial", 1, 10));
                        ftm = rd.getFontMetrics();
                        rd.drawString("Hue  | ", 97, 70);
                        rd.drawImage(brt, 137, 63, null);
                        rd.drawString("Hue  | ", 647, 70);
                        rd.drawImage(brt, 687, 63, null);
                        rd.drawString("Intensity", 121, 219);
                        rd.drawString("Intensity", 671, 219);
                        rd.drawString("Reset", 110, 257);
                        rd.drawString("Reset", 660, 257);
                        for (int i128 = 0; i128 < 161; i128++) {
                            rd.setColor(Color.getHSBColor((float) (i128 * 0.00625), 1.0F, 1.0F));
                            rd.drawLine(102, 75 + i128, 110, 75 + i128);
                            if (i128 <= 128) {
                                rd.setColor(Color.getHSBColor(1.0F, 0.0F, (float) (1.0 - i128 * 0.00625)));
                                rd.drawLine(137, 75 + i128, 145, 75 + i128);
                            }
                            rd.setColor(Color.getHSBColor((float) (i128 * 0.00625), 1.0F, 1.0F));
                            rd.drawLine(652, 75 + i128, 660, 75 + i128);
                            if (i128 <= 128) {
                                rd.setColor(Color.getHSBColor(1.0F, 0.0F, (float) (1.0 - i128 * 0.00625)));
                                rd.drawLine(687, 75 + i128, 695, 75 + i128);
                            }
                        }
                        for (int i129 = 0; i129 < 40; i129++) {
                            rd.setColor(Color.getHSBColor(arnp[0], (float) (i129 * 0.025), 1.0F - arnp[2]));
                            rd.drawLine(121 + i129, 224, 121 + i129, 230);
                            rd.setColor(Color.getHSBColor(arnp[3], (float) (i129 * 0.025), 1.0F - arnp[5]));
                            rd.drawLine(671 + i129, 224, 671 + i129, 230);
                        }
                        rd.drawImage(arn, 110, 71 + (int) (arnp[0] * 160.0F), null);
                        rd.drawImage(arn, 145, 71 + (int) (arnp[2] * 160.0F), null);
                        rd.drawImage(arn, 660, 71 + (int) (arnp[3] * 160.0F), null);
                        rd.drawImage(arn, 695, 71 + (int) (arnp[5] * 160.0F), null);
                        rd.setColor(new Color(0, 0, 0));
                        rd.fillRect(120 + (int) (arnp[1] * 40.0F), 222, 3, 3);
                        rd.drawLine(121 + (int) (arnp[1] * 40.0F), 224, 121 + (int) (arnp[1] * 40.0F), 230);
                        rd.fillRect(120 + (int) (arnp[1] * 40.0F), 230, 3, 3);
                        rd.fillRect(670 + (int) (arnp[4] * 40.0F), 222, 3, 3);
                        rd.drawLine(671 + (int) (arnp[4] * 40.0F), 224, 671 + (int) (arnp[4] * 40.0F), 230);
                        rd.fillRect(670 + (int) (arnp[4] * 40.0F), 230, 3, 3);
                        if (bool) {
                            if (mouson == -1) {
                                if (i > 96 && i < 152 && i104 > 248 && i104 < 258) {
                                    final float[] fs = new float[3];
                                    Color.RGBtoHSB(cars[sc[0]].fcol[0], cars[sc[0]].fcol[1], cars[sc[0]].fcol[2], fs);
                                    arnp[0] = fs[0];
                                    arnp[1] = fs[1];
                                    arnp[2] = 1.0F - fs[2];
                                }
                                if (i > 646 && i < 702 && i104 > 248 && i104 < 258) {
                                    final float[] fs = new float[3];
                                    Color.RGBtoHSB(cars[sc[0]].scol[0], cars[sc[0]].scol[1], cars[sc[0]].scol[2], fs);
                                    arnp[3] = fs[0];
                                    arnp[4] = fs[1];
                                    arnp[5] = 1.0F - fs[2];
                                }
                                mouson = -2;
                                if (i > 119 && i < 163 && i104 > 222 && i104 < 232) {
                                    mouson = 1;
                                }
                                if (i > 669 && i < 713 && i104 > 222 && i104 < 232) {
                                    mouson = 4;
                                }
                                if (i > 98 && i < 122 && i104 > 69 && i104 < 241 && mouson == -2) {
                                    mouson = 0;
                                }
                                if (i > 133 && i < 157 && i104 > 69 && i104 < 209 && mouson == -2) {
                                    mouson = 2;
                                }
                                if (i > 648 && i < 672 && i104 > 69 && i104 < 241 && mouson == -2) {
                                    mouson = 3;
                                }
                                if (i > 683 && i < 707 && i104 > 69 && i104 < 209 && mouson == -2) {
                                    mouson = 5;
                                }
                            }
                        } else if (mouson != -1) {
                            mouson = -1;
                        }
                        if (mouson == 0 || mouson == 2 || mouson == 3 || mouson == 5) {
                            arnp[mouson] = (float) ((i104 - 75.0F) * 0.00625);
                            if (mouson == 2 || mouson == 5) {
                                if (arnp[mouson] > 0.8) {
                                    arnp[mouson] = 0.8F;
                                }
                            } else if (arnp[mouson] > 1.0F) {
                                arnp[mouson] = 1.0F;
                            }
                            if (arnp[mouson] < 0.0F) {
                                arnp[mouson] = 0.0F;
                            }
                        }
                        if (mouson == 1) {
                            arnp[mouson] = (float) ((i - 121.0F) * 0.025);
                            if (arnp[mouson] > 1.0F) {
                                arnp[mouson] = 1.0F;
                            }
                            if (arnp[mouson] < 0.0F) {
                                arnp[mouson] = 0.0F;
                            }
                        }
                        if (mouson == 4) {
                            arnp[mouson] = (float) ((i - 671.0F) * 0.025);
                            if (arnp[mouson] > 1.0F) {
                                arnp[mouson] = 1.0F;
                            }
                            if (arnp[mouson] < 0.0F) {
                                arnp[mouson] = 0.0F;
                            }
                        }
                        if (cfase != 10 && cfase != 5 && i112 == -1) {
                            final Color color = Color.getHSBColor(arnp[0], arnp[1], 1.0F - arnp[2]);
                            final Color color130 = Color.getHSBColor(arnp[3], arnp[4], 1.0F - arnp[5]);
                            for (int i131 = 0; i131 < cars[sc[0]].npl; i131++) {
                                if (cars[sc[0]].p[i131].colnum == 1) {
                                    cars[sc[0]].p[i131].hsb[0] = arnp[0];
                                    cars[sc[0]].p[i131].hsb[1] = arnp[1];
                                    cars[sc[0]].p[i131].hsb[2] = 1.0F - arnp[2];
                                    cars[sc[0]].p[i131].c[0] = color.getRed();
                                    cars[sc[0]].p[i131].c[1] = color.getGreen();
                                    cars[sc[0]].p[i131].c[2] = color.getBlue();
                                    cars[sc[0]].p[i131].oc[0] = color.getRed();
                                    cars[sc[0]].p[i131].oc[1] = color.getGreen();
                                    cars[sc[0]].p[i131].oc[2] = color.getBlue();
                                }
                                if (cars[sc[0]].p[i131].colnum == 2) {
                                    cars[sc[0]].p[i131].hsb[0] = arnp[3];
                                    cars[sc[0]].p[i131].hsb[1] = arnp[4];
                                    cars[sc[0]].p[i131].hsb[2] = 1.0F - arnp[5];
                                    cars[sc[0]].p[i131].c[0] = color130.getRed();
                                    cars[sc[0]].p[i131].c[1] = color130.getGreen();
                                    cars[sc[0]].p[i131].c[2] = color130.getBlue();
                                    cars[sc[0]].p[i131].oc[0] = color130.getRed();
                                    cars[sc[0]].p[i131].oc[1] = color130.getGreen();
                                    cars[sc[0]].p[i131].oc[2] = color130.getBlue();
                                }
                            }
                        }
                    }
                }
                if (!remi/* && cfase != 10 && cfase != 11 && cfase != 100 && cfase != 101*/) {
                    rd.drawImage(contin[pcontin], 355, 385, null);
                    /*else {
                    	if (cfase == 11 && drawcarb(true, null, "Add to My Cars", 345, 385, i, i104, bool)
                    			&& stat.action == 0) {
                    		stat.ac = sc[0];
                    		if (logged) {
                    			stat.action = 6;
                    			stat.sparkactionloader();
                    		} else {
                    			stat.reco = -5;
                    			cfase = 5;
                    			showtf = false;
                    		}
                    	}
                    	if (cfase == 101 && i112 == -1)
                    		if (stat.publish[sc[0] - 16] == 1 || stat.publish[sc[0] - 16] == 2) {
                    			if (drawcarb(true, null, "Add to My Cars", 345, 385, i, i104, bool) && stat.action == 0) {
                    				stat.ac = sc[0];
                    				if (logged) {
                    					stat.action = 6;
                    					stat.sparkactionloader();
                    				} else {
                    					stat.reco = -5;
                    					cfase = 5;
                    					showtf = false;
                    				}
                    			}
                    		} else {
                    			rd.setFont(new Font("Arial", 1, 12));
                    			ftm = rd.getFontMetrics();
                    			drawcs(405, "Private Car", 193, 106, 0, 3);
                    		}
                    }*/
                }
            }
        } else {
            if (cfase == 11 || cfase == 101) {
                CarDefine.action = 0;
            }
            if (GameSparker.mycar.isShowing()) {
                GameSparker.mycar.setVisible(false);
            }
            pback = 0;
            pnext = 0;
            gatey = 300;
            if (flipo > 10) {
                cars[sc[0]].y -= 100;
                if (nextc == 1) {
                    cars[sc[0]].zy += 20;
                }
                if (nextc == -1) {
                    cars[sc[0]].zy -= 20;
                }
            } else {
                if (flipo == 10) {
                    if (nextc >= 20) {
                        sc[0] = nextc - 20;
                        lsc = -1;
                    }
                    if (nextc == 1) {
                        sc[0]++;
                        /*if (gmode == 1) {
                        	if (sc[0] == 7)
                        		sc[0] = 11;
                        	if (sc[0] == 12)
                        		sc[0] = 14;
                        }*/
                        if (multion != 0 && onjoin != -1 && ontyp > 0 && ontyp <= 5) {
                            for (; sc[0] < maxsl && Math.abs(CarDefine.cclass[sc[0]] - (ontyp - 1)) > 1; sc[0]++) {

                            }
                        }
                    }
                    if (nextc == -1) {
                        sc[0]--;
                        /*if (gmode == 1) {
                        	if (sc[0] == 13)
                        		sc[0] = 11;
                        	if (sc[0] == 10)
                        		sc[0] = 6;
                        }*/
                        if (multion != 0 && onjoin != -1 && ontyp > 0 && ontyp <= 5) {
                            for (; sc[0] > minsl && Math.abs(CarDefine.cclass[sc[0]] - (ontyp - 1)) > 1; sc[0]--) {

                            }
                        }
                    }
                    if (cfase == 3 && CarDefine.lastload == 2) {
                        GameSparker.mcars.select(CarDefine.names[sc[0]]);
                    }
                    cars[sc[0]].z = 950;
                    cars[sc[0]].y = -34 - cars[sc[0]].grat - 1100;
                    cars[sc[0]].x = 0;
                    cars[sc[0]].zy = 0;
                }
                cars[sc[0]].y += 100;
            }
            flipo--;
        }
        if (cfase == 0 || cfase == 3 || cfase == 11 || cfase == 101) {
            if (i112 != -1) {
                if (flatrstart > 1) {
                    flatrstart = 0;
                }
                nextc = i112 + 20;
                flipo = 20;
            }
            if (control.right) {
                control.right = false;
                if (sc[0] != maxsl && flipo == 0) {
                    if (flatrstart > 1) {
                        flatrstart = 0;
                    }
                    nextc = 1;
                    flipo = 20;
                }
            }
            if (control.left) {
                control.left = false;
                if (sc[0] != minsl && flipo == 0) {
                    if (flatrstart > 1) {
                        flatrstart = 0;
                    }
                    nextc = -1;
                    flipo = 20;
                }
            }
            if (cfase != 11 && cfase != 101 && i113 == 0 && flipo < 10 && (control.handb || control.enter)) {
                Medium.crs = false;
                GameSparker.mcars.show = false;
                if (multion != 0) {
                    fase = 1177;
                    intertrack.setPaused(true);
                } else if (testdrive != 3 && testdrive != 4) {
                    fase = 3;
                } else {
                    fase = -22;
                }
                if (sc[0] < 16 || CarDefine.lastload == 2) {
                    GameSparker.setcarcookie(sc[0], CarDefine.names[sc[0]], arnp, gmode, unlocked);
                }
                if (CarDefine.haltload != 0) {
                    if (CarDefine.haltload == 2) {
                        CarDefine.lcardate[1] = 0;
                    }
                    CarDefine.lcardate[0] = 0;
                    CarDefine.haltload = 0;
                }
                if (gmode == 0) {
                    osc = sc[0];
                }
                //if (gmode == 1)
                //	scm[0] = sc[0];
                if (gmode == 2) {
                    scm = sc[0];
                }
                if (GameSparker.mycar.isShowing()) {
                    GameSparker.mycar.setVisible(false);
                }
                flexpix = null;
                control.handb = false;
                control.enter = false;
            }
        } else {
            pback = 0;
            pnext = 0;
            pcontin = 0;
            if (cfase == 8 && i112 != -1) {
                if (flatrstart > 1) {
                    flatrstart = 0;
                }
                nextc = i112 + 20;
                flipo = 20;
            }
            if (cfase == 5 && CarDefine.action == 0 && control.enter) {
                tcnt = 0;
                if (!GameSparker.tnick.getText().equals("") && !GameSparker.tpass.getText().equals("")) {
                    GameSparker.tnick.setVisible(false);
                    GameSparker.tpass.setVisible(false);
                    app.requestFocus();
                    CarDefine.action = 1;
                    CarDefine.sparkactionloader();
                } else {
                    if (GameSparker.tpass.getText().equals("")) {
                        CarDefine.reco = -4;
                    }
                    if (GameSparker.tnick.getText().equals("")) {
                        CarDefine.reco = -3;
                    }
                }
                control.enter = false;
            }
        }
        if (control.handb || control.enter) {
            control.handb = false;
            control.enter = false;
        }
        if (bool114) {
            GameSparker.mouses = 0;
            CarDefine.viewname = CarDefine.createdby[sc[0] - 16];
            Medium.crs = false;
            fase = 1177;
            intertrack.setPaused(true);
            sc[0] = onmsc;
            if (sc[0] >= 16 && CarDefine.lastload != 2 || sc[0] >= 36) {
                sc[0] = 15;
            }
            osc = sc[0];
            multion = 1;
            gmode = 0;
            if (GameSparker.mycar.isShowing()) {
                GameSparker.mycar.setVisible(false);
            }
            flexpix = null;
            control.handb = false;
            control.enter = false;
        }
    }

    static void clicknow() {
        rd.setColor(new Color(198, 214, 255));
        rd.fillRoundRect(250, 340, 300, 80, 30, 70);
        rd.setColor(new Color(128, 167, 255));
        rd.drawRoundRect(250, 340, 300, 80, 30, 70);
        if (aflk) {
            drawcs(380, "Click here to Start", 0, 0, 0, 3);
            aflk = false;
        } else {
            drawcs(380, "Click here to Start", 0, 67, 200, 3);
            aflk = true;
        }
    }

    static public boolean clink(final String string, final int i, final int i134, final boolean bool) {
        boolean bool135 = false;
        rd.drawString("Created by :  " + string + "", 241, 160);
        final int i136 = ftm.stringWidth(string);
        final int i137 = 241 + ftm.stringWidth("Created by :  " + string + "") - i136;
        rd.drawLine(i137, 162, i137 + i136 - 2, 162);
        if (i > i137 - 2 && i < i137 + i136 && i134 > 147 && i134 < 164) {
            if (bool) {
                bool135 = true;
            }
            if (waitlink != 1) {
                app.setCursor(new Cursor(12));
                waitlink = 1;
            }
        } else if (waitlink != 0) {
            app.setCursor(new Cursor(0));
            waitlink = 0;
        }
        return bool135;
    }

    static private void closesounds() {
        for (int i = 0; i < 5; i++) {
            for (int i271 = 0; i271 < 5; i271++) {
                engs[i][i271].checkopen();
            }
        }
        for (int i = 0; i < 6; i++) {
            air[i].checkopen();
        }
        tires.checkopen();
        checkpoint.checkopen();
        carfixed.checkopen();
        powerup.checkopen();
        three.checkopen();
        two.checkopen();
        one.checkopen();
        go.checkopen();
        wastd.checkopen();
        firewasted.checkopen();
        for (int i = 0; i < 3; i++) {
            skid[i].checkopen();
            dustskid[i].checkopen();
            crash[i].checkopen();
            lowcrash[i].checkopen();
            scrape[i].checkopen();
        }
    }

    static void colorCar(final ContO conto, final int i) {
        if (!plnames[i].contains("MadBot")) {
            for (int i132 = 0; i132 < conto.npl; i132++) {
                if (conto.p[i132].colnum == 1) {
                    final Color color = Color.getHSBColor(allrnp[i][0], allrnp[i][1], 1.0F - allrnp[i][2]);
                    conto.p[i132].oc[0] = color.getRed();
                    conto.p[i132].oc[1] = color.getGreen();
                    conto.p[i132].oc[2] = color.getBlue();
                }
                if (conto.p[i132].colnum == 2) {
                    final Color color = Color.getHSBColor(allrnp[i][3], allrnp[i][4], 1.0F - allrnp[i][5]);
                    conto.p[i132].oc[0] = color.getRed();
                    conto.p[i132].oc[1] = color.getGreen();
                    conto.p[i132].oc[2] = color.getBlue();
                }
            }
        } else {
            for (int i133 = 0; i133 < conto.npl; i133++) {
                if (conto.p[i133].colnum == 1) {
                    conto.p[i133].oc[0] = conto.fcol[0];
                    conto.p[i133].oc[1] = conto.fcol[1];
                    conto.p[i133].oc[2] = conto.fcol[2];
                }
                if (conto.p[i133].colnum == 2) {
                    conto.p[i133].oc[0] = conto.scol[0];
                    conto.p[i133].oc[1] = conto.scol[1];
                    conto.p[i133].oc[2] = conto.scol[2];
                }
            }
        }
    }

    static protected Color colorSnap(final int r, final int g, final int b) {
        return colorSnap(r, g, b, 255);
    }

    static private Color colorSnap(final int r, final int g, final int b, int a) {
        int nr = r;
        int ng = g;
        int nb = b;
        nr = (int) (nr + nr * (Medium.snap[0] / 100F));
        if (nr > 255) {
            nr = 255;
        }
        if (nr < 0) {
            nr = 0;
        }
        ng = (int) (ng + ng * (Medium.snap[1] / 100F));
        if (ng > 255) {
            ng = 255;
        }
        if (ng < 0) {
            ng = 0;
        }
        nb = (int) (nb + nb * (Medium.snap[2] / 100F));
        if (nb > 255) {
            nb = 255;
        }
        if (nb < 0) {
            nb = 0;
        }
        if (a > 255) {
            a = 255;
        }
        if (a < 0) {
            a = 0;
        }
        final Color c = new Color(nr, ng, nb, a);
        rd.setColor(c);
        return c;
    }

    static void crash(int im, final float f, final int i) {
        if (bfcrash[im] == 0) {
            if (i == 0) {
                if (Math.abs(f) > 25.0F && Math.abs(f) < 170.0F) {
                    if (!mutes) {
                        lowcrash[crshturn].play();
                    }
                    bfcrash[im] = 2;
                }
                if (Math.abs(f) >= 170.0F) {
                    if (!mutes) {
                        crash[crshturn].play();
                    }
                    bfcrash[im] = 2;
                }
                if (Math.abs(f) > 25.0F) {
                    if (crashup) {
                        crshturn--;
                    } else {
                        crshturn++;
                    }
                    if (crshturn == -1) {
                        crshturn = 2;
                    }
                    if (crshturn == 3) {
                        crshturn = 0;
                    }
                }
            }
            if (i == -1) {
                if (Math.abs(f) > 25.0F && Math.abs(f) < 170.0F) {
                    if (!mutes) {
                        lowcrash[2].play();
                    }
                    bfcrash[im] = 2;
                }
                if (Math.abs(f) > 170.0F) {
                    if (!mutes) {
                        crash[2].play();
                    }
                    bfcrash[im] = 2;
                }
            }
            if (i == 1) {
                if (!mutes) {
                    tires.play();
                }
                bfcrash[im] = 3;
            }
        }
    }

    static void credits(final Control control, final int i, final int i23, final int i24) {
        if (flipo == 0) {
            powerup.play();
            flipo = 1;
        }
        if (flipo >= 1 && flipo <= 100) {
            rad(flipo);
            flipo++;
            if (flipo == 100) {
                flipo = 1;
            }
        }
        if (flipo == 101) {
            mainbg(-1);
            rd.drawImage(mdness, 283, 32, null);
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            drawcs(90, "At Radicalplay.com", 0, 0, 0, 3);
            drawcs(165, "Cartoon 3D Engine, Game Programming, 3D Models, Graphics and Sound Effects", 0, 0, 0, 3);
            drawcs(185, "By Omar Waly", 40, 60, 0, 3);
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            drawcs(225, "Special Thanks!", 0, 0, 0, 3);
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            drawcs(245, "Thanks to Dany Fernandez Diaz (DragShot) for imporving the game\u2019s music player to play more mod formats & effects!", 66, 98, 0, 3);
            drawcs(260, "Thanks to Badie El Zaman (Kingofspeed) for helping make the trees & cactus 3D models.", 66, 98, 0, 3);
            drawcs(275, "Thanks to Timothy Audrain Hardin (Legnak) for making hazard designs on stage parts & the new fence 3D model.", 66, 98, 0, 3);
            drawcs(290, "Thanks to Alex Miles (A-Mile) & Jaroslav Beleren (Phyrexian) for making trailer videos for the game.", 66, 98, 0, 3);
            drawcs(305, "A big thank you to everyone playing the game for sending their feedback, supporting the game and helping it improve!", 66, 98, 0, 3);
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            drawcs(345, "Music from ModArchive.org", 0, 0, 0, 3);
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            drawcs(365, "Most of the tracks where remixed by Omar Waly to match the game.", 66, 98, 0, 3);
            drawcs(380, "More details about the tracks and their original composers at:", 66, 98, 0, 3);
            drawcs(395, "http://multiplayer.needformadness.com/music.html", 33, 49, 0, 3);
            rd.drawLine(400 - ftm.stringWidth("http://multiplayer.needformadness.com/music.html") / 2, 396, ftm.stringWidth("http://multiplayer.needformadness.com/music.html") / 2 + 400, 396);
            if (i > 258 && i < 542 && i23 > 385 && i23 < 399) {
                app.setCursor(new Cursor(12));
                if (i24 == 2) {
                    GameSparker.musiclink();
                }
            } else {
                app.setCursor(new Cursor(0));
            }
        }
        if (flipo == 102) {
            mainbg(-1);
            rd.drawImage(onfmm, 283, 32, null);
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            drawcs(165, "Decompiled and fixed by", 0, 0, 0, 3);
            drawcs(185, "rafa1231518 aka chrishansen69", 40, 60, 0, 3);
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            drawcs(225, "~~~~~~ Special Thanks ~~~~~~", 0, 0, 0, 3);
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            drawcs(245, "Dany Fernandez Diaz (DragShot) for some code I stole-uh, I mean borrowed!", 66, 98, 0, 3);
            drawcs(260, "Thanks to Kaffeinated, Ten Graves & everyone else for their awesome work in NFM2!", 66, 98, 0, 3);
            drawcs(275, "Thanks to Emmanuel Dupuy for JD-GUI, Pavel Kouznetsov for JAD and Jochen Hoenicke for JODE.", 66, 98, 0, 3);
            drawcs(290, "Thanks to Allan for being a glorious bastard and please add credits.", 66, 98, 0, 3);
            drawcs(305, "Thanks to the Eclipse Foundation for this laggy piece of shit-uh, I mean great IDE!", 66, 98, 0, 3);
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            drawcs(345, "~~~~~~ License ~~~~~~", 0, 0, 0, 3);
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            drawcs(365, "All code is licensed under the BSD license, unless noted otherwise.", 66, 98, 0, 3);
            drawcs(380, "Need for Madness Multiplayer created by Omar Waly, copyright (c) Radical Play 2005-2015. All rights reserved.", 66, 98, 0, 3);
            drawcs(395, "OpenNFMM copyright (c) C. Hansen 2015. Some rights reserved.", 66, 98, 0, 3);
            drawcs(410, "Dual Mod Engine copyright (c) Dany Fernandez Diaz (DragShot) 2015. Some rights reserved.", 66, 98, 0, 3);

            if (i23 > 354 && i23 < 410 && i < 665) {
                app.setCursor(new Cursor(12));
                if (i24 == 2) {
                    GameSparker.onfmmlink();
                }
            } else if (i23 > 354 && i23 < 395 && i > 665) {
                app.setCursor(new Cursor(12));
                if (i24 == 2) {
                    GameSparker.onfmmlink();
                }
            } else {
                app.setCursor(new Cursor(0));
            }
        }
        if (flipo == 103) {
            mainbg(0);
            rd.drawImage(nfmcom, 190, 195, null);
            if (i > 190 && i < 609 && i23 > 195 && i23 < 216) {
                app.setCursor(new Cursor(12));
                if (i24 == 2) {
                    GameSparker.madlink();
                }
            } else {
                app.setCursor(new Cursor(0));
            }
        }
        rd.drawImage(next[pnext], 665, 395, null);

        if (control.enter || control.handb || control.right) {
            if (flipo >= 1 && flipo <= 100) {
                flipo = 101;
                app.setCursor(new Cursor(0));
            } else {
                flipo++;
            }
            if (flipo == 104) {
                flipo = 0;
                fase = 10;
            }
            control.enter = false;
            control.handb = false;
            control.right = false;
        }
    }

    static void ctachm(final int i, final int i182, final int i183, final Control control) {
        if (fase == 1) {
            if (i183 == 1) {
                if (over(next[0], i, i182, 625, 135)) {
                    pnext = 1;
                }
                if (over(back[0], i, i182, 115, 135)) {
                    pback = 1;
                }
                if (over(contin[0], i, i182, 355, 360)) {
                    pcontin = 1;
                }
            }
            if (i183 == 2) {
                if (pnext == 1) {
                    control.right = true;
                }
                if (pback == 1) {
                    control.left = true;
                }
                if (pcontin == 1) {
                    control.enter = true;
                }
            }
        }
        if (fase == 3) {
            if (i183 == 1 && over(contin[0], i, i182, 355, 350)) {
                pcontin = 1;
            }
            if (i183 == 2 && pcontin == 1) {
                control.enter = true;
                pcontin = 0;
            }
        }
        if (fase == 4) {
            if (i183 == 1 && over(back[0], i, i182, 370, 345)) {
                pback = 1;
            }
            if (i183 == 2 && pback == 1) {
                control.enter = true;
                pback = 0;
            }
        }
        if (fase == 6) {
            if (i183 == 1 && (over(star[0], i, i182, 359, 385) || over(star[0], i, i182, 359, 295))) {
                pstar = 2;
            }
            if (i183 == 2 && pstar == 2) {
                control.enter = true;
                pstar = 1;
            }
        }
        if (fase == 7) {
            if (i183 == 1) {
                if (over(next[0], i, i182, 645, 275)) {
                    pnext = 1;
                }
                if (over(back[0], i, i182, 95, 275)) {
                    pback = 1;
                }
                if (over(contin[0], i, i182, 355, 385) && !GameSparker.openm) {
                    pcontin = 1;
                }
            }
            if (i183 == 2) {
                if (pnext == 1) {
                    control.right = true;
                }
                if (pback == 1) {
                    control.left = true;
                }
                if (pcontin == 1) {
                    control.enter = true;
                    pcontin = 0;
                }
            }
        }
        if (fase == -5) {
            lxm = i;
            lym = i182;
            if (i183 == 1 && over(contin[0], i, i182, 355, 380)) {
                pcontin = 1;
            }
            if (i183 == 2 && pcontin == 1) {
                control.enter = true;
                pcontin = 0;
            }
        }
        if (fase == -7) {
            if (i183 == 1) {
                if (overon(329, 45, 137, 22, i, i182)) {
                    opselect = 0;
                    shaded = true;
                }
                if (overon(320, 73, 155, 22, i, i182)) {
                    opselect = 1;
                    shaded = true;
                }
                if (overon(303, 99, 190, 22, i, i182)) {
                    opselect = 2;
                    shaded = true;
                }
                if (overon(341, 125, 109, 22, i, i182)) {
                    opselect = 3;
                    shaded = true;
                }
            }
            if (i183 == 2 && shaded) {
                control.enter = true;
                shaded = false;
            }
            if (i183 == 0 && (i != lxm || i182 != lym)) {
                if (overon(329, 45, 137, 22, i, i182)) {
                    opselect = 0;
                }
                if (overon(320, 73, 155, 22, i, i182)) {
                    opselect = 1;
                }
                if (overon(303, 99, 190, 22, i, i182)) {
                    opselect = 2;
                }
                if (overon(341, 125, 109, 22, i, i182)) {
                    opselect = 3;
                }
                lxm = i;
                lym = i182;
            }
        }
        if (fase == 10) {
            if (i183 == 1) {
                if (overon(343, 261, 110, 22, i, i182)) {
                    opselect = 0;
                    shaded = true;
                }
                if (overon(288, 291, 221, 22, i, i182)) {
                    opselect = 1;
                    shaded = true;
                }
                if (overon(301, 321, 196, 22, i, i182)) {
                    opselect = 2;
                    shaded = true;
                }
                if (overon(357, 351, 85, 22, i, i182)) {
                    opselect = 3;
                    shaded = true;
                }
            }
            if (i183 == 2 && shaded) {
                control.enter = true;
                shaded = false;
            }
            if (i183 == 0 && (i != lxm || i182 != lym)) {
                if (overon(343, 261, 110, 22, i, i182)) {
                    opselect = 0;
                }
                if (overon(288, 291, 221, 22, i, i182)) {
                    opselect = 1;
                }
                if (overon(301, 321, 196, 22, i, i182)) {
                    opselect = 2;
                }
                if (overon(357, 351, 85, 22, i, i182)) {
                    opselect = 3;
                }
                lxm = i;
                lym = i182;
            }
        }
        if (fase == 102) {
            if (i183 == 1) {
                if (overon(358, 262 + dropf, 82, 22, i, i182)) {
                    opselect = 0;
                    shaded = true;
                }
                if (overon(358, 290 + dropf, 82, 22, i, i182)) {
                    opselect = 1;
                    shaded = true;
                }
                if (overon(333, 318 + dropf, 132, 22, i, i182)) {
                    opselect = 2;
                    shaded = true;
                }
                if (overon(348, 346, 102, 22, i, i182)) {
                    opselect = 3;
                    shaded = true;
                }
            }
            if (i183 == 2 && shaded) {
                control.enter = true;
                shaded = false;
            }
            if (i183 == 0 && (i != lxm || i182 != lym)) {
                if (overon(358, 262 + dropf, 82, 22, i, i182)) {
                    opselect = 0;
                }
                if (overon(358, 290 + dropf, 82, 22, i, i182)) {
                    opselect = 1;
                }
                if (overon(333, 318 + dropf, 132, 22, i, i182)) {
                    opselect = 2;
                }
                if (overon(348, 346, 102, 22, i, i182)) {
                    opselect = 3;
                }
                lxm = i;
                lym = i182;
            }
        }
        if (fase == 11) {
            if (flipo >= 1 && flipo <= 15) {
                if (i183 == 1 && over(next[0], i, i182, 665, 395)) {
                    pnext = 1;
                }
                if (i183 == 2 && pnext == 1) {
                    control.right = true;
                    pnext = 0;
                }
            }
            if (flipo >= 3 && flipo <= 16) {
                if (i183 == 1 && over(back[0], i, i182, 75, 395)) {
                    pback = 1;
                }
                if (i183 == 2 && pback == 1) {
                    control.left = true;
                    pback = 0;
                }
            }
            if (flipo == 16) {
                if (i183 == 1 && over(contin[0], i, i182, 565, 395)) {
                    pcontin = 1;
                }
                if (i183 == 2 && pcontin == 1) {
                    control.enter = true;
                    pcontin = 0;
                }
            }
        }
        if (fase == 8) {
            if (i183 == 1 && over(next[0], i, i182, 665, 395)) {
                pnext = 1;
            }
            if (i183 == 2 && pnext == 1) {
                control.enter = true;
                pnext = 0;
            }
        }
    }

    static private Image dodgen(final Image image) {
        final int i = image.getHeight(null);
        final int i378 = image.getWidth(null);
        final int[] is = new int[i378 * i];
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, i378, i, is, 0, i378);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        for (int i379 = 0; i379 < i378 * i; i379++) {
            final Color color = new Color(is[i379]);
            int i380 = color.getRed() * 4 + 90;
            if (i380 > 255) {
                i380 = 255;
            }
            if (i380 < 0) {
                i380 = 0;
            }
            int i381 = color.getGreen() * 4 + 90;
            if (i381 > 255) {
                i381 = 255;
            }
            if (i381 < 0) {
                i381 = 0;
            }
            int i382 = color.getBlue() * 4 + 90;
            if (i382 > 255) {
                i382 = 255;
            }
            if (i382 < 0) {
                i382 = 0;
            }
            final Color color383 = new Color(i380, i381, i382);
            is[i379] = color383.getRGB();
        }
        return xt.createImage(new MemoryImageSource(i378, i, is, 0, i378));
    }

    static boolean drawcarb(final boolean bool, final Image image, final String string, final int i, int i429, final int i430, final int i431, final boolean bool432) {
        boolean bool433 = false;
        rd.setFont(new Font("Arial", 1, 13));
        ftm = rd.getFontMetrics();
        int i435;
        if (bool) {
            i435 = ftm.stringWidth(string);
            if (string.startsWith("Class")) {
                i435 = 112;
            }
        } else {
            i435 = image.getWidth(null);
        }
        int i436 = 0;
        if (i430 > i && i430 < i + i435 + 14 && i431 > i429 && i431 < i429 + 28) {
            i436 = 1;
            if (bool432) {
                bool433 = true;
            }
        }
        rd.drawImage(bcl[i436], i, i429, null);
        rd.drawImage(bc[i436], i + 4, i429, i435 + 6, 28, null);
        rd.drawImage(bcr[i436], i + i435 + 10, i429, null);
        if (!bool && i435 == 73) {
            i429--;
        }
        if (bool) {
            if (string.equals("X") && i436 == 1) {
                rd.setColor(new Color(255, 0, 0));
            } else {
                rd.setColor(new Color(0, 0, 0));
            }
            if (string.startsWith("Class")) {
                rd.drawString(string, 400 - ftm.stringWidth(string) / 2, i429 + 19);
            } else {
                rd.drawString(string, i + 7, i429 + 19);
            }
        } else {
            rd.drawImage(image, i + 7, i429 + 7, null);
        }
        return bool433;
    }

    static void drawcs(final int i, final String string, int i212, int i213, int i214, final int i215) {
        if (i215 != 3 && i215 != 4 && i215 != 5) {
            i212 += i212 * (Medium.snap[0] / 100.0F);
            if (i212 > 255) {
                i212 = 255;
            }
            if (i212 < 0) {
                i212 = 0;
            }
            i213 += i213 * (Medium.snap[1] / 100.0F);
            if (i213 > 255) {
                i213 = 255;
            }
            if (i213 < 0) {
                i213 = 0;
            }
            i214 += i214 * (Medium.snap[2] / 100.0F);
            if (i214 > 255) {
                i214 = 255;
            }
            if (i214 < 0) {
                i214 = 0;
            }
        }
        if (i215 == 4) {
            i212 -= i212 * (Medium.snap[0] / 100.0F);
            if (i212 > 255) {
                i212 = 255;
            }
            if (i212 < 0) {
                i212 = 0;
            }
            i213 -= i213 * (Medium.snap[1] / 100.0F);
            if (i213 > 255) {
                i213 = 255;
            }
            if (i213 < 0) {
                i213 = 0;
            }
            i214 -= i214 * (Medium.snap[2] / 100.0F);
            if (i214 > 255) {
                i214 = 255;
            }
            if (i214 < 0) {
                i214 = 0;
            }
        }
        if (i215 == 1) {
            rd.setColor(new Color(0, 0, 0));
            rd.drawString(string, 400 - ftm.stringWidth(string) / 2 + 1, i + 1);
        }
        if (i215 == 2) {
            i212 = (i212 * 2 + Medium.csky[0]) / 3;
            if (i212 > 255) {
                i212 = 255;
            }
            if (i212 < 0) {
                i212 = 0;
            }
            i213 = (i213 * 2 + Medium.csky[1]) / 3;
            if (i213 > 255) {
                i213 = 255;
            }
            if (i213 < 0) {
                i213 = 0;
            }
            i214 = (i214 * 2 + Medium.csky[2]) / 3;
            if (i214 > 255) {
                i214 = 255;
            }
            if (i214 < 0) {
                i214 = 0;
            }
        }
        if (i215 == 5) {
            rd.setColor(new Color(Medium.csky[0] / 2, Medium.csky[1] / 2, Medium.csky[2] / 2));
            rd.drawString(string, 400 - ftm.stringWidth(string) / 2 + 1, i + 1);
        }
        rd.setColor(new Color(i212, i213, i214));
        rd.drawString(string, 400 - ftm.stringWidth(string) / 2, i);
    }

    static private void drawdprom(final int i, final int i139) {
        rd.setComposite(AlphaComposite.getInstance(3, 0.9F));
        rd.setColor(new Color(129, 203, 237));
        rd.fillRoundRect(205, i, 390, i139, 30, 30);
        rd.setColor(new Color(0, 0, 0));
        rd.drawRoundRect(205, i, 390, i139, 30, 30);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
    }

    static private void drawhi(final Image image, final int i) {
        if (Medium.darksky) {
            final float[] fs = new float[3];
            Color.RGBtoHSB(Medium.csky[0], Medium.csky[1], Medium.csky[2], fs);
            fs[2] = 0.6F;
            Color color = Color.getHSBColor(fs[0], fs[1], fs[2]);
            rd.setColor(color);
            rd.fillRoundRect(390 - image.getWidth(null) / 2, i - 2, image.getWidth(null) + 20, image.getHeight(null) + 2, 7, 20);
            rd.setColor(new Color((int) (color.getRed() / 1.1), (int) (color.getGreen() / 1.1), (int) (color.getBlue() / 1.1)));
            rd.drawRoundRect(390 - image.getWidth(null) / 2, i - 2, image.getWidth(null) + 20, image.getHeight(null) + 2, 7, 20);
        }
        rd.drawImage(image, 400 - image.getWidth(null) / 2, i, null);
    }

    static public void drawlprom(final int i, final int i140) {
        rd.setComposite(AlphaComposite.getInstance(3, 0.5F));
        rd.setColor(new Color(129, 203, 237));
        rd.fillRoundRect(277, i, 390, i140, 30, 30);
        rd.setColor(new Color(0, 0, 0));
        rd.drawRoundRect(277, i, 390, i140, 30, 30);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
    }

    static public void drawprom(final int i, final int i138) {
        rd.setComposite(AlphaComposite.getInstance(3, 0.76F));
        rd.setColor(new Color(129, 203, 237));
        rd.fillRoundRect(205, i, 390, i138, 30, 30);
        rd.setColor(new Color(0, 0, 0));
        rd.drawRoundRect(205, i, 390, i138, 30, 30);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
    }

    static private void drawSmokeCarsbg() {
        if (!badmac) {
            if (Math.abs(flyr - flyrdest) > 20) {
                if (flyr > flyrdest) {
                    flyr -= 20;
                } else {
                    flyr += 20;
                }
            } else {
                flyr = flyrdest;
                flyrdest = (int) (flyr + Medium.random() * 160.0F - 80.0F);
            }
            if (flyr > 160) {
                flyr = 160;
            }
            if (flatr > 170) {
                flatrstart++;
                flatr = flatrstart * 3;
                flyr = (int) (Medium.random() * 160.0F - 80.0F);
                flyrdest = (int) (flyr + Medium.random() * 160.0F - 80.0F);
                flang = 1;
            }
            for (int i = 0; i < 466; i++) {
                for (int i407 = 0; i407 < 202; i407++)
                    if (smokey[i + i407 * 466] != smokey[0]) {
                        final float f = pys(i, 233, i407, flyr);
                        final int i408 = (int) ((i - 233) / f * flatr);
                        final int i409 = (int) ((i407 - flyr) / f * flatr);
                        final int i410 = i + i408 + 100 + (i407 + i409 + 110) * 670;
                        if (i + i408 + 100 < 670 && i + i408 + 100 > 0 && i407 + i409 + 110 < 400 && i407 + i409 + 110 > 0 && i410 < 268000 && i410 >= 0) {
                            final Color color = new Color(flexpix[i410]);
                            final Color color411 = new Color(smokey[i + i407 * 466]);
                            final float f412 = (255.0F - color411.getRed()) / 255.0F;
                            final float f413 = (255.0F - color411.getGreen()) / 255.0F;
                            final float f414 = (255.0F - color411.getBlue()) / 255.0F;
                            int i415 = (int) ((color.getRed() * (flang * f412) + color411.getRed() * (1.0F - f412)) / (flang * f412 + (1.0F - f412)));
                            int i416 = (int) ((color.getGreen() * (flang * f413) + color411.getGreen() * (1.0F - f413)) / (flang * f413 + (1.0F - f413)));
                            int i417 = (int) ((color.getBlue() * (flang * f414) + color411.getBlue() * (1.0F - f414)) / (flang * f414 + (1.0F - f414)));
                            if (i415 > 255) {
                                i415 = 255;
                            }
                            if (i415 < 0) {
                                i415 = 0;
                            }
                            if (i416 > 255) {
                                i416 = 255;
                            }
                            if (i416 < 0) {
                                i416 = 0;
                            }
                            if (i417 > 255) {
                                i417 = 255;
                            }
                            if (i417 < 0) {
                                i417 = 0;
                            }
                            final Color color418 = new Color(i415, i416, i417);
                            flexpix[i410] = color418.getRGB();
                        }
                    }
            }
            flang += 2;
            flatr += 10 + flatrstart * 2;
            final Image image = xt.createImage(new MemoryImageSource(670, 400, flexpix, 0, 670));
            rd.drawImage(image, 65, 25, null);
        } else {
            rd.drawImage(carsbg, 65, 25, null);
            flatrstart++;
        }
    }

    static private void drawstat(final int i, int i206, final float f) {
        final int[] is = new int[4];
        final int[] is207 = new int[4];
        if (i206 > i) {
            i206 = i;
        }
        final int i208 = (int) (98.0F * ((float) i206 / (float) i));
        is[0] = 662;
        is207[0] = 11;
        is[1] = 662;
        is207[1] = 20;
        is[2] = 662 + i208;
        is207[2] = 20;
        is[3] = 662 + i208;
        is207[3] = 11;
        int i209 = 244;
        int i210 = 244;
        int i211 = 11;
        if (i208 > 33) {
            i210 = (int) (244.0F - 233.0F * ((i208 - 33) / 65.0F));
        }
        if (i208 > 70) {
            if (dmcnt < 10)
                if (dmflk) {
                    i210 = 170;
                    dmflk = false;
                } else {
                    dmflk = true;
                }
            dmcnt++;
            if (dmcnt > 167.0 - i208 * 1.5) {
                dmcnt = 0;
            }
        }
        i209 += i209 * (Medium.snap[0] / 100.0F);
        if (i209 > 255) {
            i209 = 255;
        }
        if (i209 < 0) {
            i209 = 0;
        }
        i210 += i210 * (Medium.snap[1] / 100.0F);
        if (i210 > 255) {
            i210 = 255;
        }
        if (i210 < 0) {
            i210 = 0;
        }
        i211 += i211 * (Medium.snap[2] / 100.0F);
        if (i211 > 255) {
            i211 = 255;
        }
        if (i211 < 0) {
            i211 = 0;
        }
        rd.setColor(new Color(i209, i210, i211));
        rd.fillPolygon(is, is207, 4);
        is[0] = 662;
        is207[0] = 31;
        is[1] = 662;
        is207[1] = 40;
        is[2] = (int) (662.0F + f);
        is207[2] = 40;
        is[3] = (int) (662.0F + f);
        is207[3] = 31;
        i209 = 128;
        if (f == 98.0F) {
            i209 = 64;
        }
        i210 = (int) (190.0 + f * 0.37);
        i211 = 244;
        if (auscnt < 45 && aflk) {
            i209 = 128;
            i210 = 244;
            i211 = 244;
        }
        i209 += i209 * (Medium.snap[0] / 100.0F);
        if (i209 > 255) {
            i209 = 255;
        }
        if (i209 < 0) {
            i209 = 0;
        }
        i210 += i210 * (Medium.snap[1] / 100.0F);
        if (i210 > 255) {
            i210 = 255;
        }
        if (i210 < 0) {
            i210 = 0;
        }
        i211 += i211 * (Medium.snap[2] / 100.0F);
        if (i211 > 255) {
            i211 = 255;
        }
        if (i211 < 0) {
            i211 = 0;
        }
        rd.setColor(new Color(i209, i210, i211));
        rd.fillPolygon(is, is207, 4);
    }

    static void drawWarning() {
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(0, 0, 800, 450);
        rd.setFont(new Font("Arial", 1, 22));
        ftm = rd.getFontMetrics();
        drawcs(100, "Warning!", 255, 0, 0, 3);
        rd.setFont(new Font("Arial", 1, 18));
        ftm = rd.getFontMetrics();
        drawcs(150, "Bad language and flooding is strictly prohibited in this game!", 255, 255, 255, 3);
        rd.setFont(new Font("Arial", 1, 13));
        ftm = rd.getFontMetrics();
        if (warning < 210) {
            drawcs(200, "If you continue typing bad language or flooding your game will shut down.", 200, 200, 200, 3);
        }
        if (warning > 210) {
            drawcs(200, "Sorry. This was your second warring your game has shut down.", 200, 200, 200, 3);
        }
        if (warning > 250) {
            stopallnow();
            runtyp = 0;
            //app.repaint();
            System.exit(0);
            //app.gamer.interrupt();
        }
    }

    static void finish(final ContO[] contos, final Control control, final int i, final int i141, final boolean bool) {
        /*if (chronostart) {
            chrono.stop();
            chronostart = false;
        }*/
        if (!badmac) {
            rd.drawImage(fleximg, 0, 0, null);
        } else {
            rd.setColor(new Color(0, 0, 0, (int) (255 * 0.1f)));
            rd.fillRect(0, 0, 800, 450);
        }
        rd.setFont(new Font("Arial", 1, 11));
        ftm = rd.getFontMetrics();
        int i142 = 0;
        String string = ":";
        if (CheckPoints.stage > 0) {
            final int i143 = CheckPoints.stage;
            //if (i143 > 10)
            //	i143 -= 10;
            string = " " + i143 + "!";
        }
        if (multion < 3) {
            if (winner) {
                rd.drawImage(congrd, 265, 87, null);
                drawcs(137, "You Won!  At Stage" + string, 255, 161, 85, 3);
                drawcs(154, CheckPoints.name, 255, 115, 0, 3);
                i142 = 154;
            } else {
                rd.drawImage(gameov, 315, 117, null);
                if (multion != 0 && (forstart == 700 || discon == 240)) {
                    drawcs(167, "Sorry, You where Disconnected from Game!", 255, 161, 85, 3);
                    drawcs(184, "Please check your connection!", 255, 115, 0, 3);
                } else {
                    drawcs(167, "You Lost!  At Stage" + string, 255, 161, 85, 3);
                    drawcs(184, CheckPoints.name, 255, 115, 0, 3);
                    i142 = 184;
                }
            }
            rd.setColor(new Color(193, 106, 0));
        } else {
            rd.drawImage(gameov, 315, 117, null);
            drawcs(167, "Finished Watching Game!  At Stage" + string + "", 255, 161, 85, 3);
            drawcs(184, CheckPoints.name, 255, 115, 0, 3);
            i142 = 184;
        }
        if (winner && multion == 0 && gmode != 0 && (CheckPoints.stage == unlocked /*+ (gmode - 1) * 10*/ || CheckPoints.stage == nTracks)) {
            int i144 = 0;
            int i145 = 0;
            pin = 60;
            /*if (gmode == 1) {
            	if (checkpoints.stage == 2) {
            		i144 = 5;
            		i145 = 365;
            		pin = -20;
            		scm[0] = 5;
            	}
            	if (checkpoints.stage == 4) {
            		i144 = 6;
            		i145 = 320;
            		pin = -20;
            		scm[0] = 6;
            	}
            	if (checkpoints.stage == 6) {
            		i144 = 11;
            		i145 = 326;
            		pin = -20;
            		scm[0] = 11;
            	}
            	if (checkpoints.stage == 8) {
            		i144 = 14;
            		i145 = 350;
            		pin = -20;
            		scm[0] = 14;
            	}
            	if (checkpoints.stage == 10) {
            		i144 = 15;
            		i145 = 370;
            		pin = -20;
            		scm[0] = 15;
            	}
            }*/
            if (gmode == 2) {
                if (CheckPoints.stage == 2) {
                    i144 = 8;
                    i145 = 365;
                    pin = -20;
                    scm = 8;
                }
                if (CheckPoints.stage == 4) {
                    i144 = 9;
                    i145 = 320;
                    pin = -20;
                    scm = 9;
                }
                if (CheckPoints.stage == 6) {
                    i144 = 10;
                    i145 = 370;
                    pin = -20;
                    scm = 10;
                }
                if (CheckPoints.stage == 8) {
                    i144 = 11;
                    i145 = 326;
                    pin = -20;
                    scm = 11;
                }
                if (CheckPoints.stage == 10) {
                    i144 = 12;
                    i145 = 310;
                    pin = -20;
                    scm = 12;
                }
                if (CheckPoints.stage == 12) {
                    i144 = 13;
                    i145 = 310;
                    pin = -20;
                    scm = 13;
                }
                if (CheckPoints.stage == 14) {
                    i144 = 14;
                    i145 = 350;
                    pin = -20;
                    scm = 14;
                }
                if (CheckPoints.stage == 16) {
                    i144 = 15;
                    i145 = 370;
                    pin = -20;
                    scm = 15;
                }
            }
            if (CheckPoints.stage != nTracks) {
                rd.setFont(new Font("Arial", 1, 13));
                ftm = rd.getFontMetrics();
                if (aflk) {
                    drawcs(200 + pin, "Stage " + (CheckPoints.stage + 1) + " is now unlocked!", 196, 176, 0, 3);
                } else {
                    drawcs(200 + pin, "Stage " + (CheckPoints.stage + 1) + " is now unlocked!", 255, 247, 165, 3);
                }
                if (i144 != 0) {
                    if (aflk) {
                        drawcs(200, "And:", 196, 176, 0, 3);
                    } else {
                        drawcs(200, "And:", 255, 247, 165, 3);
                    }
                    rd.setColor(new Color(236, 226, 202));
                    if (ThreadLocalRandom.current().nextDouble() > 0.5) {
                        rd.setComposite(AlphaComposite.getInstance(3, 0.5F));
                        rd.fillRect(226, 211, 344, 125);
                        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
                    }
                    rd.setColor(new Color(0, 0, 0));
                    rd.fillRect(226, 211, 348, 4);
                    rd.fillRect(226, 211, 4, 125);
                    rd.fillRect(226, 332, 348, 4);
                    rd.fillRect(570, 211, 4, 125);
                    contos[i144].y = i145;
                    Medium.crs = true;
                    Medium.x = -400;
                    Medium.y = 0;
                    Medium.z = -50;
                    Medium.xz = 0;
                    Medium.zy = 0;
                    Medium.ground = 2470;
                    contos[i144].z = 1000;
                    contos[i144].x = 0;
                    contos[i144].xz += 5;
                    contos[i144].zy = 0;
                    contos[i144].wzy -= 10;
                    rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
                    contos[i144].d(rd);
                    rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    if (ThreadLocalRandom.current().nextDouble() < 0.5) {
                        rd.setComposite(AlphaComposite.getInstance(3, 0.4F));
                        rd.setColor(new Color(236, 226, 202));
                        for (int i146 = 0; i146 < 30; i146++) {
                            rd.drawLine(230, 215 + 4 * i146, 569, 215 + 4 * i146);
                        }
                        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
                    }
                    String string147 = "";
                    if (i144 == 13) {
                        string147 = " ";
                    }
                    if (aflk) {
                        drawcs(320, "" + CarDefine.names[i144] + "" + string147 + " has been unlocked!", 196, 176, 0, 3);
                    } else {
                        drawcs(320, "" + CarDefine.names[i144] + "" + string147 + " has been unlocked!", 255, 247, 165, 3);
                    }
                    pin = 140;
                }
                rd.setFont(new Font("Arial", 1, 11));
                ftm = rd.getFontMetrics();
                drawcs(220 + pin, "GAME SAVED", 230, 167, 0, 3);
                if (pin == 60) {
                    pin = 30;
                } else {
                    pin = 0;
                }
            } else {
                rd.setFont(new Font("Arial", 1, 13));
                ftm = rd.getFontMetrics();
                if (aflk) {
                    drawcs(180, "Woohoooo you finished NFM" + gmode + " !!!", 144, 167, 255, 3);
                } else {
                    drawcs(180, "Woohoooo you finished NFM" + gmode + " !!!", 228, 240, 255, 3);
                }
                if (aflk) {
                    drawcs(210, "You're Awesome!", 144, 167, 255, 3);
                } else {
                    drawcs(212, "You're Awesome!", 228, 240, 255, 3);
                }
                if (aflk) {
                    drawcs(240, "You're truly a RADICAL GAMER!", 144, 167, 255, 3);
                } else {
                    drawcs(240, "You're truly a RADICAL GAMER!", 255, 100, 100, 3);
                }
                rd.setColor(new Color(0, 0, 0));
                rd.fillRect(0, 255, 800, 62);
                rd.drawImage(radicalplay, radpx + (int) (8.0 * ThreadLocalRandom.current().nextDouble() - 4.0), 255, null);
                if (radpx != 212) {
                    radpx += 40;
                    if (radpx > 800) {
                        radpx = -468;
                    }
                }
                if (flipo == 40) {
                    radpx = 213;
                }
                flipo++;
                if (flipo == 70) {
                    flipo = 0;
                }
                if (radpx == 212) {
                    rd.setFont(new Font("Arial", 1, 11));
                    ftm = rd.getFontMetrics();
                    if (aflk) {
                        drawcs(309, "A Game by Radicalplay.com", 144, 167, 255, 3);
                    } else {
                        drawcs(309, "A Game by Radicalplay.com", 228, 240, 255, 3);
                    }
                }
                if (aflk) {
                    drawcs(350, "Now get up and dance!", 144, 167, 255, 3);
                } else {
                    drawcs(350, "Now get up and dance!", 228, 240, 255, 3);
                }
                pin = 0;
            }
            aflk = !aflk;
        }
        if (multion != 0 && CheckPoints.stage == -2 && i142 != 0) {
            drawcs(i142 + 17, "Created by: " + CheckPoints.maker + "", 255, 161, 85, 3);
            if (CheckPoints.pubt > 0) {
                if (CheckPoints.pubt == 2) {
                    drawcs(310, "Super Public Stage", 41, 177, 255, 3);
                } else {
                    drawcs(310, "Public Stage", 41, 177, 255, 3);
                }
                if (dnload == 0 && drawcarb(true, null, " Add to My Stages ", 334, 317, i, i141, bool))
                    if (logged) {
                        CarDefine.onstage = CheckPoints.name;
                        CarDefine.staction = 2;
                        CarDefine.sparkstageaction();
                        dnload = 2;
                    } else {
                        dnload = 1;
                        waitlink = 20;
                    }
                if (dnload == 1) {
                    rd.setColor(new Color(193, 106, 0));
                    final String string148 = "Upgrade to a full account to add custom stages!";
                    final int i149 = 400 - ftm.stringWidth(string148) / 2;
                    final int i150 = i149 + ftm.stringWidth(string148);
                    rd.drawString(string148, i149, 332);
                    if (waitlink != -1) {
                        rd.drawLine(i149, 334, i150, 334);
                    }
                    if (i > i149 && i < i150 && i141 > 321 && i141 < 334) {
                        if (waitlink != -1) {
                            app.setCursor(new Cursor(12));
                        }
                        if (bool && waitlink == 0) {
                            GameSparker.editlink(nickname, true);
                            waitlink = -1;
                        }
                    } else {
                        app.setCursor(new Cursor(0));
                    }
                    if (waitlink > 0) {
                        waitlink--;
                    }
                }
                if (dnload == 2) {
                    drawcs(332, "Adding stage please wait...", 193, 106, 0, 3);
                    if (CarDefine.staction == 0) {
                        dnload = 3;
                    }
                    if (CarDefine.staction == -2) {
                        dnload = 4;
                    }
                    if (CarDefine.staction == -3) {
                        dnload = 5;
                    }
                    if (CarDefine.staction == -1) {
                        dnload = 6;
                    }
                }
                if (dnload == 3) {
                    drawcs(332, "Stager has been successfully added to your stages!", 193, 106, 0, 3);
                }
                if (dnload == 4) {
                    drawcs(332, "You already have this stage!", 193, 106, 0, 3);
                }
                if (dnload == 5) {
                    drawcs(332, "Cannot add more then 20 stages to your account!", 193, 106, 0, 3);
                }
                if (dnload == 6) {
                    drawcs(332, "Failed to add stage, unknown error, please try again later.", 193, 106, 0, 3);
                }
            } else {
                drawcs(342, "Private Stage", 193, 106, 0, 3);
            }
        }
        rd.drawImage(contin[pcontin], 355, 380, null);
        if (control.enter || control.handb) {
            if (loadedt) {
                strack.unload();
            }
            if (multion == 0) {
                opselect = 3;
                /*if (gmode == 1) {
                	opselect = 0;
                	if (winner && checkpoints.stage == unlocked[gmode - 1] + (gmode - 1) * 10
                			&& checkpoints.stage != 27) {
                		unlocked[gmode - 1]++;
                		justwon1 = true;
                	} else
                		justwon1 = false;
                }*/
                if (gmode == 2) {
                    opselect = 1;
                    if (winner && CheckPoints.stage == unlocked/* + (gmode - 1) * 10*/
                    && CheckPoints.stage != nTracks) {
                        unlocked++;
                        justwon2 = true;
                    } else {
                        justwon2 = false;
                    }
                }
                if (CheckPoints.stage == nTracks && gmode == 0) {
                    CheckPoints.stage = (int) (ThreadLocalRandom.current().nextDouble() * nTracks) + 1;
                }
                fase = 102;
            } else if (CarDefine.haltload == 1) {
                sc[0] = 36;
                fase = 1177;
            } else if (!mtop || nfreeplays >= 5 && !logged) {
                opselect = 2;
                fase = 102;
            } else {
                fase = -9;
            }
            if (multion == 0 && winner && CheckPoints.stage != nTracks && CheckPoints.stage > 0) {
                CheckPoints.stage++;
            }
            if (!winner && multion != 0 && (forstart == 700 || discon == 240) && ndisco < 5) {
                ndisco++;
            }
            flipo = 0;
            control.enter = false;
            control.handb = false;
        }
    }

    static void fleximage(final Image image, final int i) {
        if (!badmac) {
            if (i == 0) {
                flexpix = new int[360000];
                final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, 800, 450, flexpix, 0, 800);
                try {
                    pixelgrabber.grabPixels();
                } catch (final InterruptedException ignored) {

                }
            }
            int i300 = 0;
            int i301 = 0;
            int i302 = 0;
            int i303 = 0;
            int i304 = (int) (ThreadLocalRandom.current().nextDouble() * 128.0);
            int i305 = (int) (5.0 + ThreadLocalRandom.current().nextDouble() * 15.0);
            for (int i306 = 0; i306 < 360000; i306++) {
                final Color color = new Color(flexpix[i306]);
                int i309;
                int i310;
                int i311;
                if (i300 == 0) {
                    i309 = color.getRed();
                    i301 = i309;
                    i310 = color.getGreen();
                    i302 = i310;
                    i311 = color.getBlue();
                    i303 = i311;
                } else {
                    i309 = (int) ((color.getRed() + i301 * 0.38F * i) / (1.0F + 0.38F * i));
                    i301 = i309;
                    i310 = (int) ((color.getGreen() + i302 * 0.38F * i) / (1.0F + 0.38F * i));
                    i302 = i310;
                    i311 = (int) ((color.getBlue() + i303 * 0.38F * i) / (1.0F + 0.38F * i));
                    i303 = i311;
                }
                if (++i300 == 800) {
                    i300 = 0;
                }
                final int i312 = (int) ((i309 * 17 + i310 + i311 + i304) / 21.0F);
                final int i313 = (int) ((i310 * 17 + i309 + i311 + i304) / 22.0F);
                final int i314 = (int) ((i311 * 17 + i309 + i310 + i304) / 24.0F);
                if (--i305 == 0) {
                    i304 = (int) (ThreadLocalRandom.current().nextDouble() * 128.0);
                    i305 = (int) (5.0 + ThreadLocalRandom.current().nextDouble() * 15.0);
                }
                final Color color315 = new Color(i312, i313, i314);
                flexpix[i306] = color315.getRGB();
            }
            fleximg = xt.createImage(new MemoryImageSource(800, 450, flexpix, 0, 800));
            rd.drawImage(fleximg, 0, 0, null);
        } else {
            rd.setColor(new Color(0, 0, 0));
            rd.setComposite(AlphaComposite.getInstance(3, 0.1F));
            rd.fillRect(0, 0, 800, 450);
            rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        }
    }

    static Image getImage(final String string) throws IOException {
        return ImageIO.read(new File(string));
    }

    static private String getSvalue(final String string, final int i) {
        String string443 = "";
        try {
            int i444 = 0;
            int i445 = 0;
            int i446 = 0;
            String string447;
            String string448 = "";
            for (; i444 < string.length() && i446 != 2; i444++) {
                string447 = "" + string.charAt(i444);
                if (string447.equals("|")) {
                    i445++;
                    if (i446 == 1 || i445 > i) {
                        i446 = 2;
                    }
                } else if (i445 == i) {
                    string448 = "" + string448 + string447;
                    i446 = 1;
                }
            }
            string443 = string448;
        } catch (final Exception ignored) {

        }
        return string443;
    }

    static private int getvalue(final String string, final int i) {
        int i437 = -1;
        try {
            int i438 = 0;
            int i439 = 0;
            int i440 = 0;
            String string441;
            String string442 = "";
            for (; i438 < string.length() && i440 != 2; i438++) {
                string441 = "" + string.charAt(i438);
                if (string441.equals("|")) {
                    i439++;
                    if (i440 == 1 || i439 > i) {
                        i440 = 2;
                    }
                } else if (i439 == i) {
                    string442 = "" + string442 + string441;
                    i440 = 1;
                }
            }
            if (string442.equals("")) {
                string442 = "-1";
            }
            i437 = Integer.parseInt(string442);
        } catch (final Exception ignored) {

        }
        return i437;
    }

    static void gscrape(int im, final int i, final int i269, final int i270) {
        if ((bfsc1[im] == 0 || bfsc2[im] == 0) && Math.sqrt(i * i + i269 * i269 + i270 * i270) / 10.0 > 15.0)
            if (bfsc1[im] == 0) {
                if (!mutes) {
                    scrape[2].stop();
                    scrape[2].play();
                }
                bfsc1[im] = 12;
                bfsc2[im] = 6;
            } else {
                if (!mutes) {
                    scrape[3].stop();
                    scrape[3].play();
                }
                bfsc2[im] = 12;
                bfsc1[im] = 6;
            }
    }

    static private void hidos() {
        GameSparker.sgame.setVisible(false);
        //app.snfm1.setVisible(false);
        //app.snfm2.setVisible(false);
        GameSparker.mstgs.setVisible(false);
    }

    static private void hipnoload(final int i, final boolean bool) {
        final int[] is = {
                Medium.snap[0], Medium.snap[1], Medium.snap[2]
        };
        while (is[0] + is[1] + is[2] < -30) {
            for (int i45 = 0; i45 < 3; i45++)
                if (is[i45] < 50) {
                    is[i45]++;
                }
        }
        int i46 = (int) (230.0F - 230.0F * (is[0] / 100.0F));
        if (i46 > 255) {
            i46 = 255;
        }
        if (i46 < 0) {
            i46 = 0;
        }
        int i47 = (int) (230.0F - 230.0F * (is[1] / 100.0F));
        if (i47 > 255) {
            i47 = 255;
        }
        if (i47 < 0) {
            i47 = 0;
        }
        int i48 = (int) (230.0F - 230.0F * (is[2] / 100.0F));
        if (i48 > 255) {
            i48 = 255;
        }
        if (i48 < 0) {
            i48 = 0;
        }
        rd.setColor(new Color(i46, i47, i48));
        rd.fillRect(65, 25, 670, 400);
        rd.setComposite(AlphaComposite.getInstance(3, 0.3F));
        rd.drawImage(bggo, 0, -25, null);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(0, 0, 65, 450);
        rd.fillRect(735, 0, 65, 450);
        rd.fillRect(65, 0, 670, 25);
        rd.fillRect(65, 425, 670, 25);
        rd.setFont(new Font("Arial", 1, 13));
        ftm = rd.getFontMetrics();
        drawcs(50, asay, 0, 0, 0, 3);
        int i49 = -90;
        if (multion == 0) {
            if (i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 10) {
                i49 = 0;
            }
            if (i == 11 || i == 12 || i == 13 || i == 14 || i == 17 || i == 18 || i == 19 || i == 20 || i == 22 || i == 23 || i == 26) {
                i49 = 0;
            }
            if (i < 0 && nplayers != 1 && newparts) {
                i49 = 0;
            }
        } else if (ransay == 1 || ransay == 2 || ransay == 3 || ransay == 4 || i == 10) {
            i49 = 0;
        }
        if (i49 == 0) {
            if (dudo > 0) {
                if (aflk) {
                    if (ThreadLocalRandom.current().nextDouble() > ThreadLocalRandom.current().nextDouble()) {
                        duds = (int) (ThreadLocalRandom.current().nextDouble() * 3.0);
                    } else {
                        duds = (int) (ThreadLocalRandom.current().nextDouble() * 2.0);
                    }
                    aflk = false;
                } else {
                    aflk = true;
                }
                dudo--;
            } else {
                duds = 0;
            }
            rd.setComposite(AlphaComposite.getInstance(3, 0.3F));
            rd.drawImage(dude[duds], 95, 35, null);
            rd.setComposite(AlphaComposite.getInstance(3, 0.7F));
            rd.drawImage(flaot, 192, 67, null);
            rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
            i46 = (int) (80.0F - 80.0F * (is[0] / 100.0F));
            if (i46 > 255) {
                i46 = 255;
            }
            if (i46 < 0) {
                i46 = 0;
            }
            i47 = (int) (80.0F - 80.0F * (is[1] / 100.0F));
            if (i47 > 255) {
                i47 = 255;
            }
            if (i47 < 0) {
                i47 = 0;
            }
            i48 = (int) (80.0F - 80.0F * (is[2] / 100.0F));
            if (i48 > 255) {
                i48 = 255;
            }
            if (i48 < 0) {
                i48 = 0;
            }
            rd.setColor(new Color(i46, i47, i48));
            rd.setFont(new Font("Arial", 1, 13));
            if (multion != 0) {
                if (ransay == 1 && i != 10) {
                    rd.drawString("Multiplayer Tip:  Press [ C ] to access chat quickly during the game!", 262, 92);
                }
                if (ransay == 2 && i != 10) {
                    rd.drawString("Multiplayer Tip:  Press [ A ] to make Guidance Arrow point to cars and", 262, 92);
                    rd.drawString("click any of the players listed on the right to lock the Arrow on!", 262, 112);
                }
                if (ransay == 3 && i != 10) {
                    rd.drawString("Multiplayer Tip:  When wasting in multiplayer it's better to aim slightly", 262, 92);
                    rd.drawString("ahead of the other player's car to compensate for internet delay.", 262, 112);
                }
                if (ransay == 4) {
                    rd.drawString("When watching a game, click any player listed on the right of the", 262, 92);
                    rd.drawString("screen to follow and watch.", 262, 112);
                    rd.drawString("Press [ V ] to change the viewing mode!", 262, 132);
                }
                if (i == 10 && ransay != 4) {
                    if (tflk) {
                        rd.setColor(new Color(200, i47, i48));
                        tflk = false;
                    } else {
                        tflk = true;
                    }
                    rd.drawString("NOTE: Guidance Arrow and opponent status is disabled in this stage!", 262, 92);
                }
            } else {
                if (i < 0 && nplayers != 1 && newparts) {
                    rd.drawString("Please note, the computer car's AI has not yet been trained to handle", 262, 92);
                    rd.drawString("some of the new stage parts such as the 'Rollercoaster Road' and the", 262, 112);
                    rd.drawString("'Tunnel Side Ramp'.", 262, 132);
                    rd.drawString("(Those new parts where mostly designed for the multiplayer game.)", 262, 152);
                    rd.drawString("The AI will be trained and ready in the future releases of the game!", 262, 172);
                }
                if (i == 1 || i == 11) {
                    rd.drawString("Hey!  Don't forget, to complete a lap you must pass through", 262, 92);
                    rd.drawString("all checkpoints in the track!", 262, 112);
                }
                if (i == 2 || i == 12) {
                    rd.drawString("Remember, the more power you have the faster your car will be!", 262, 92);
                }
                if (i == 3) {
                    rd.drawString("> Hint: its easier to waste the other cars then to race in this stage!", 262, 92);
                    rd.drawString("Press [ A ] to make the guidance arrow point to cars instead of to", 262, 112);
                    rd.drawString("the track.", 262, 132);
                }
                if (i == 4) {
                    rd.drawString("Remember, the better the stunt you perform the more power you get!", 262, 92);
                }
                if (i == 5) {
                    rd.drawString("Remember, the more power you have the stronger your car is!", 262, 92);
                }
                if (i == 10) {
                    if (tflk) {
                        rd.setColor(new Color(200, i47, i48));
                        tflk = false;
                    } else {
                        tflk = true;
                    }
                    rd.drawString("NOTE: Guidance Arrow is disabled in this stage!", 262, 92);
                }
                if (i == 13) {
                    rd.drawString("Watch out!  Look out!  The policeman might be out to get you!", 262, 92);
                    rd.drawString("Don't upset him or you'll be arrested!", 262, 112);
                    rd.drawString("Better run, run, run.", 262, 152);
                }
                if (i == 14) {
                    rd.drawString("Don't waste your time.  Waste them instead!", 262, 92);
                    rd.drawString("Try a taste of sweet revenge here (if you can)!", 262, 112);
                    rd.drawString("Press [ A ] to make the guidance arrow point to cars instead of to", 262, 152);
                    rd.drawString("the track.", 262, 172);
                }
                if (i == 17) {
                    rd.drawString("Welcome to the realm of the king...", 262, 92);
                    rd.drawString("The key word here is 'POWER'.  The more you have of it the faster", 262, 132);
                    rd.drawString("and STRONGER you car will be!", 262, 152);
                }
                if (i == 18) {
                    rd.drawString("Watch out, EL KING is out to get you now!", 262, 92);
                    rd.drawString("He seems to be seeking revenge?", 262, 112);
                    rd.drawString("(To fly longer distances in the air try drifting your car on the ramp", 262, 152);
                    rd.drawString("before take off).", 262, 172);
                }
                if (i == 19) {
                    rd.drawString("It\u2019s good to be the king!", 262, 92);
                }
                if (i == 20) {
                    rd.drawString("Remember, forward loops give your car a push forwards in the air", 262, 92);
                    rd.drawString("and help in racing.", 262, 112);
                    rd.drawString("(You may need to do more forward loops here.  Also try keeping", 262, 152);
                    rd.drawString("your power at maximum at all times.  Try not to miss a ramp).", 262, 172);
                }
                if (i == 22) {
                    rd.drawString("Watch out!  Beware!  Take care!", 262, 92);
                    rd.drawString("MASHEEN is hiding out there some where, don't get mashed now!", 262, 112);
                }
                if (i == 23) {
                    rd.drawString("Anyone for a game of Digger?!", 262, 92);
                    rd.drawString("You can have fun using MASHEEN here!", 262, 112);
                }
                if (i == 26) {
                    rd.drawString("This is it!  This is the toughest stage in the game!", 262, 92);
                    rd.drawString("This track is actually a 4D object projected onto the 3D world.", 262, 132);
                    rd.drawString("It's been broken down, separated and, in many ways, it is also a", 262, 152);
                    rd.drawString("maze!  GOOD LUCK!", 262, 172);
                }
            }
        }
        rd.setComposite(AlphaComposite.getInstance(3, 0.8F));
        rd.drawImage(loadingmusic, 289, 205 + i49, null);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        rd.setFont(new Font("Arial", 1, 11));
        ftm = rd.getFontMetrics();
        int i50 = i - 1;
        if (i50 < 0) {
        }
        if (!bool) {
            //unnecessary
            //drawcs(340 + i49, "" + ("") + (sndsize[i50]) + (" KB"), 0, 0, 0,
            //		3);
            drawcs(375 + i49, " Please Wait...", 0, 0, 0, 3);
        } else {
            drawcs(365 + i49, "Loading complete!  Press Start to begin...", 0, 0, 0, 3);
            rd.setComposite(AlphaComposite.getInstance(3, 0.5F));
            rd.drawImage(star[pstar], 359, 385 + i49, null);
            rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
            if (pstar != 2)
                if (pstar == 0) {
                    pstar = 1;
                } else {
                    pstar = 0;
                }
            if (multion != 0) {
                drawcs(380 + i49, "" + forstart / 20, 0, 0, 0, 3);
            }
        }
    }

    static void inishcarselect(final ContO[] cars) {
        nplayers = 7;
        im = 0;
        xstart[0] = 0;
        xstart[1] = -350;
        xstart[2] = 350;
        xstart[3] = 0;
        xstart[4] = -350;
        xstart[5] = 350;
        xstart[6] = 0;
        zstart[0] = -760;
        zstart[1] = -380;
        zstart[2] = -380;
        zstart[3] = 0;
        zstart[4] = 380;
        zstart[5] = 380;
        zstart[6] = 760;
        onmsc = -1;
        remi = false;
        if (testdrive != 1 && testdrive != 2) {
            if (gmode != 0) {
                cfase = 0;
                sc[0] = scm;
            }
            if (gmode == 0) {
                sc[0] = osc;
            }
            if (CarDefine.lastload != 1 || cfase != 3) {
                onmsc = sc[0];
            }
            if (cfase == 0 && sc[0] > nCars - 1) {
                sc[0] = nCars - 1;
                if (multion != 0) {
                    cfase = -1;
                }
            }
            if (onjoin != -1 && multion != 0) {
                if (ontyp <= -2) {
                    cfase = 0;
                }
                if (ontyp >= 20) {
                    ontyp -= 20;
                    cfase = 0;
                }
                if (ontyp >= 10) {
                    ontyp -= 10;
                    if (CarDefine.lastload != 2) {
                        cfase = -1;
                        onjoin = -1;
                    } else {
                        cfase = 3;
                    }
                }
            }
            if (cfase == 11 || cfase == 101)
                if (sc[0] >= 16 && CarDefine.lastload == 2 && sc[0] < 36) {
                    cfase = 3;
                } else {
                    cfase = 0;
                }
            if (cfase == 3) {
                if (multion != 0 && CarDefine.lastload == 1) {
                    sc[0] = nCars - 1;
                    minsl = 0;
                    maxsl = nCars - 1;
                    cfase = 0;
                }
                if (CarDefine.lastload == 0) {
                    sc[0] = nCars - 1;
                    minsl = 0;
                    maxsl = nCars - 1;
                    cfase = 0;
                }
                if (CarDefine.lastload == 2) {
                    minsl = nCars;
                    maxsl = CarDefine.nlocars - 1;
                    if (sc[0] < minsl) {
                        sc[0] = minsl;
                    }
                    if (sc[0] > maxsl) {
                        sc[0] = maxsl;
                    }
                    if (onjoin != -1 && multion != 0 && ontyp > 0 && ontyp <= 5) {
                        boolean bool = false;
                        for (int i = nCars; i < CarDefine.nlocars; i++)
                            if (Math.abs(CarDefine.cclass[i] - (ontyp - 1)) <= 1) {
                                if (!bool) {
                                    minsl = i;
                                    bool = true;
                                }
                                if (bool) {
                                    maxsl = i;
                                }
                            }
                        if (!bool) {
                            onjoin = -1;
                        } else {
                            if (sc[0] < minsl) {
                                sc[0] = minsl;
                            }
                            if (sc[0] > maxsl) {
                                sc[0] = maxsl;
                            }
                            if (Math.abs(CarDefine.cclass[sc[0]] - (ontyp - 1)) > 1) {
                                sc[0] = minsl;
                            }
                        }
                    }
                }
                if (CarDefine.lastload == -2 && logged) {
                    cfase = 5;
                    showtf = false;
                    CarDefine.action = 3;
                    CarDefine.sparkactionloader();
                }
            }
            if (cfase == 0) {
                minsl = 0;
                maxsl = nCars - 1;
                if (onjoin != -1 && multion != 0) {
                    if (ontyp == 1) {
                        minsl = 0;
                        maxsl = 5;
                    }
                    if (ontyp == 2) {
                        minsl = 0;
                        maxsl = 9;
                    }
                    if (ontyp == 3) {
                        minsl = 5;
                        maxsl = 10;
                    }
                    if (ontyp == 4) {
                        minsl = 6;
                        maxsl = 15; //maybe ncars - 1
                    }
                    if (ontyp == 5) {
                        minsl = 10;
                        maxsl = 15; //maybe ncars - 1
                    }
                    if (ontyp <= -2) {
                        minsl = Math.abs(ontyp + 2);
                        maxsl = Math.abs(ontyp + 2);
                    }
                }
                if (sc[0] < minsl) {
                    sc[0] = minsl;
                }
                if (sc[0] > maxsl) {
                    sc[0] = maxsl;
                }
            }
        } else {
            minsl = sc[0];
            maxsl = sc[0];
        }
        GameSparker.mcars.setBackground(new Color(0, 0, 0));
        GameSparker.mcars.setForeground(new Color(47, 179, 255));
        GameSparker.mcars.alphad = true;
        GameSparker.mcars.carsel = true;
        carsbginflex();
        flatrstart = 0;
        Medium.lightson = false;
        pnext = 0;
        pback = 0;
        lsc = -1;
        mouson = -1;
        if (multion == 0) {
            GameSparker.mycar.setLabel(" Include in this game.");
            GameSparker.mycar.setBackground(new Color(198, 179, 129));
            GameSparker.mycar.setForeground(new Color(0, 0, 0));
            int i = 16;
            if (CarDefine.lastload == 2) {
                i = CarDefine.nlocars;
            }
            for (int i100 = 0; i100 < i; i100++) {
                final float[] fs = new float[3];
                Color.RGBtoHSB(cars[i100].fcol[0], cars[i100].fcol[1], cars[i100].fcol[2], fs);
                for (int i101 = 0; i101 < cars[i100].npl; i101++)
                    if (cars[i100].p[i101].colnum == 1) {
                        cars[i100].p[i101].hsb[0] = fs[0];
                        cars[i100].p[i101].hsb[1] = fs[1];
                        cars[i100].p[i101].hsb[2] = fs[2];
                        cars[i100].p[i101].oc[0] = cars[i100].fcol[0];
                        cars[i100].p[i101].oc[1] = cars[i100].fcol[1];
                        cars[i100].p[i101].oc[2] = cars[i100].fcol[2];
                    }
                Color.RGBtoHSB(cars[i100].scol[0], cars[i100].scol[1], cars[i100].scol[2], fs);
                for (int i102 = 0; i102 < cars[i100].npl; i102++)
                    if (cars[i100].p[i102].colnum == 2) {
                        cars[i100].p[i102].hsb[0] = fs[0];
                        cars[i100].p[i102].hsb[1] = fs[1];
                        cars[i100].p[i102].hsb[2] = fs[2];
                        cars[i100].p[i102].oc[0] = cars[i100].scol[0];
                        cars[i100].p[i102].oc[1] = cars[i100].scol[1];
                        cars[i100].p[i102].oc[2] = cars[i100].scol[2];
                    }
                cars[i100].xy = 0;
            }
            for (int i103 = 0; i103 < 6; i103++) {
                arnp[i103] = -1.0F;
            }
        }
        Medium.trk = 0;
        Medium.crs = true;
        Medium.x = -400;
        Medium.y = -525;
        Medium.z = -50;
        Medium.xz = 0;
        Medium.zy = 10;
        Medium.ground = 495;
        Medium.ih = 0;
        Medium.iw = 0;
        Medium.h = 450;
        Medium.w = 800;
        Medium.focusPoint = 400;
        Medium.cx = 400;
        Medium.cy = 225;
        Medium.cz = 50;
        if (multion == 0) {
            //intertrack.loadimod(false);
            intertrack.play();
        }
    }

    static void inishstageselect() {
        if (CheckPoints.stage == -2 && (CarDefine.msloaded != 1 || !logged)) {
            CheckPoints.stage = (int) (ThreadLocalRandom.current().nextDouble() * nTracks) + 1;
            CheckPoints.top20 = 0;
        }
        if (CheckPoints.stage > nTracks) {
            CheckPoints.stage = (int) (ThreadLocalRandom.current().nextDouble() * nTracks) + 1;
        }
        if (CheckPoints.stage == -2) {
            boolean bool = false;
            for (int i = 1; i < GameSparker.mstgs.getItemCount(); i++)
                if (GameSparker.mstgs.getItem(i).equals(CheckPoints.name)) {
                    bool = true;
                }
            if (!bool) {
                CheckPoints.stage = (int) (ThreadLocalRandom.current().nextDouble() * nTracks) + 1;
            }
        }
        /*if (gmode == 1) {
        	if (unlocked[0] != 11 || justwon1)
        		checkpoints.stage = unlocked[0];
        	else if (winner || checkpoints.stage > 11)
        		checkpoints.stage = (int) (ThreadLocalRandom.current().nextDouble() * 11.0) + 1;
        	if (checkpoints.stage == 11)
        		checkpoints.stage = 27;
        }*/
        if (gmode == 2)
            if (unlocked != nTracks || justwon2) {
                CheckPoints.stage = unlocked/* + 10*/;
            } else if (winner/* || checkpoints.stage < 11*/) {
                CheckPoints.stage = (int) (ThreadLocalRandom.current().nextDouble() * nTracks) + 1;
            }
        GameSparker.sgame.setBackground(new Color(0, 0, 0));
        GameSparker.sgame.setForeground(new Color(47, 179, 255));
        //app.snfm1.setBackground(new Color(0, 0, 0));
        //app.snfm1.setForeground(new Color(47, 179, 255));
        //app.snfm2.setBackground(new Color(0, 0, 0));
        //app.snfm2.setForeground(new Color(47, 179, 255));
        GameSparker.mstgs.setBackground(new Color(0, 0, 0));
        GameSparker.mstgs.setForeground(new Color(47, 179, 255));
        GameSparker.gmode.setBackground(new Color(49, 49, 0));
        GameSparker.gmode.setForeground(new Color(148, 167, 0));
        GameSparker.sgame.removeAll();
        GameSparker.sgame.add(rd, " NFM 1     ");
        GameSparker.sgame.add(rd, " NFM 2     ");
        GameSparker.sgame.add(rd, " My Stages ");
        GameSparker.sgame.add(rd, " Weekly Top20 ");
        GameSparker.sgame.add(rd, " Monthly Top20 ");
        GameSparker.sgame.add(rd, " Stage Maker ");
        if (CheckPoints.stage > 0 && CheckPoints.stage <= 10) {
            GameSparker.sgame.select(0);
            nfmtab = 0;
        }
        if (CheckPoints.stage > 10) {
            GameSparker.sgame.select(1);
            nfmtab = 1;
        }
        if (CheckPoints.stage == -2) {
            GameSparker.sgame.select(2);
            nfmtab = 2;
        }
        if (CheckPoints.stage == -1) {
            GameSparker.sgame.select(5);
            nfmtab = 5;
        }
        removeds = 0;
        lfrom = 0;
        CarDefine.staction = 0;
        fase = 2;
    }

    static void inst(final Control control) {
        if (flipo == 0) {
            flipo = 1;
        }
        if (flipo == 2) {
            flipo = 3;
            dudo = 200;
        }
        if (flipo == 4) {
            flipo = 5;
            dudo = 250;
        }
        if (flipo == 6) {
            flipo = 7;
            dudo = 200;
        }
        if (flipo == 8) {
            flipo = 9;
            dudo = 250;
        }
        if (flipo == 10) {
            flipo = 11;
            dudo = 200;
        }
        if (flipo == 12) {
            flipo = 13;
            dudo = 200;
        }
        if (flipo == 14) {
            flipo = 15;
            dudo = 100;
        }
        mainbg(2);
        rd.setComposite(AlphaComposite.getInstance(3, 0.3F));
        rd.drawImage(bggo, 65, 25, null);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(735, 0, 65, 450);
        rd.fillRect(65, 425, 670, 25);
        aflk = !aflk;
        if (flipo != 1 && flipo != 16) {
            if (dudo > 0) {
                if (aflk)
                    if (ThreadLocalRandom.current().nextDouble() > ThreadLocalRandom.current().nextDouble()) {
                        duds = (int) (ThreadLocalRandom.current().nextDouble() * 3.0);
                    } else {
                        duds = (int) (ThreadLocalRandom.current().nextDouble() * 2.0);
                    }
                dudo--;
            } else {
                duds = 0;
            }
            rd.setComposite(AlphaComposite.getInstance(3, 0.4F));
            rd.drawImage(dude[duds], 95, 15, null);
            rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
            rd.drawImage(oflaot, 192, 42, null);
        }
        rd.setColor(new Color(0, 64, 128));
        rd.setFont(new Font("Arial", 1, 13));
        if (flipo == 3 || flipo == 5) {
            if (flipo == 3) {
                rd.drawString("Hello!  Welcome to the world of", 262, 67);
                rd.drawString("!", 657, 67);
                rd.drawImage(nfm, 469, 55, null);
                rd.drawString("In this game there are two ways to complete a stage.", 262, 107);
                rd.drawString("One is by racing and finishing in first place, the other is by", 262, 127);
                rd.drawString("wasting and crashing all the other cars in the stage!", 262, 147);
            } else {
                rd.setColor(new Color(0, 128, 255));
                rd.drawString("While racing, you will need to focus on going fast and passing", 262, 67);
                rd.drawString("through all the checkpoints in the track. To complete a lap, you", 262, 87);
                rd.drawString("must not miss a checkpoint.", 262, 107);
                rd.drawString("While wasting, you will just need to chase the other cars and", 262, 127);
                rd.drawString("crash into them (without worrying about track and checkpoints).", 262, 147);
            }
            rd.setColor(new Color(0, 0, 0));
            rd.drawImage(racing, 165, 185, null);
            rd.drawImage(ory, 429, 235, null);
            rd.drawImage(wasting, 492, 185, null);
            rd.setFont(new Font("Arial", 1, 11));
            rd.drawString("Checkpoint", 392, 189);
            rd.setFont(new Font("Arial", 1, 13));
            rd.drawString("Drive your car using the Arrow Keys and Spacebar", 125, 320);
            rd.drawImage(space, 171, 355, null);
            rd.drawImage(arrows, 505, 323, null);
            rd.setFont(new Font("Arial", 1, 11));
            rd.drawString("(When your car is on the ground Spacebar is for Handbrake)", 125, 341);
            rd.drawString("Accelerate", 515, 319);
            rd.drawString("Brake/Reverse", 506, 397);
            rd.drawString("Turn left", 454, 375);
            rd.drawString("Turn right", 590, 375);
            rd.drawString("Handbrake", 247, 374);
        }
        if (flipo == 7 || flipo == 9) {
            if (flipo == 7) {
                rd.drawString("Whether you are racing or wasting the other cars you will need", 262, 67);
                rd.drawString("to power up your car.", 262, 87);
                rd.drawString("=> More 'Power' makes your car become faster and stronger!", 262, 107);
                rd.drawString("To power up your car (and keep it powered up) you will need to", 262, 127);
                rd.drawString("perform stunts!", 262, 147);
                rd.drawImage(chil, 167, 295, null);
            } else {
                rd.drawString("The better the stunt the more power you get!", 262, 67);
                rd.setColor(new Color(0, 128, 255));
                rd.drawString("Forward looping pushes your car forwards in the air and helps", 262, 87);
                rd.drawString("when racing. Backward looping pushes your car upwards giving it", 262, 107);
                rd.drawString("more hang time in the air making it easier to control its landing.", 262, 127);
                rd.drawString("Left and right rolls shift your car in the air left and right slightly.", 262, 147);
                if (aflk || dudo < 150) {
                    rd.drawImage(chil, 167, 295, null);
                }
            }
            rd.setColor(new Color(0, 0, 0));
            rd.drawImage(stunts, 105, 175, null);
            rd.drawImage(opwr, 540, 253, null);
            rd.setFont(new Font("Arial", 1, 13));
            rd.drawString("To perform stunts. When your car is in the AIR:", 125, 310);
            rd.drawString("Press combo Spacebar + Arrow Keys", 125, 330);
            rd.drawImage(space, 185, 355, null);
            rd.drawImage(plus, 405, 358, null);
            rd.drawImage(arrows, 491, 323, null);
            rd.setFont(new Font("Arial", 1, 11));
            rd.setColor(new Color(0, 0, 0));
            rd.drawString("Forward Loop", 492, 319);
            rd.drawString("Backward Loop", 490, 397);
            rd.drawString("Left Roll", 443, 375);
            rd.drawString("Right Roll", 576, 375);
            rd.drawString("Spacebar", 266, 374);
            rd.setColor(new Color(140, 243, 244));
            rd.fillRect(602, 257, 76, 9);
        }
        if (flipo == 11 || flipo == 13) {
            if (flipo == 11) {
                rd.drawString("When wasting cars, to help you find the other cars in the stage,", 262, 67);
                rd.drawString("press [ A ] to toggle the guidance arrow from pointing to the track", 262, 87);
                rd.drawString("to pointing to the cars.", 262, 107);
                rd.drawString("When your car is damaged. You fix it (and reset its 'Damage') by", 262, 127);
                rd.drawString("jumping through the electrified hoop.", 262, 147);
            } else {
                rd.setColor(new Color(0, 128, 255));
                rd.drawString("You will find that in some stages it's easier to waste the other cars", 262, 67);
                rd.drawString("and in some others it's easier to race and finish in first place.", 262, 87);
                rd.drawString("It is up to you to decide when to waste and when to race.", 262, 107);
                rd.drawString("And remember, 'Power' is an important factor in the game. You", 262, 127);
                rd.drawString("will need it whether you are racing or wasting!", 262, 147);
            }
            rd.setColor(new Color(0, 0, 0));
            rd.drawImage(fixhoop, 185, 218, null);
            rd.drawImage(sarrow, 385, 228, null);
            rd.setFont(new Font("Arial", 1, 11));
            rd.drawString("The Electrified Hoop", 192, 216);
            rd.drawString("Jumping through it fixes your car.", 158, 338);
            rd.drawString("Make guidance arrow point to cars.", 385, 216);
        }
        if (flipo == 15) {
            rd.drawString("And if you don\u2019t know who I am,", 262, 67);
            rd.drawString("I am Coach Insano, I am the coach and narrator of this game!", 262, 87);
            rd.drawString("I recommended starting with NFM 1 if it\u2019s your first time to play.", 262, 127);
            rd.drawString("Good Luck & Have Fun!", 262, 147);
            rd.setColor(new Color(0, 0, 0));
            rd.drawString("Other Controls :", 155, 205);
            rd.setFont(new Font("Arial", 1, 11));
            rd.drawImage(kz, 169, 229, null);
            rd.drawString("OR", 206, 251);
            rd.drawImage(kx, 229, 229, null);
            rd.drawString("To look behind you while driving.", 267, 251);
            rd.drawImage(kv, 169, 279, null);
            rd.drawString("Change Views", 207, 301);
            rd.drawImage(kenter, 169, 329, null);
            rd.drawString("Navigate & Pause Game", 275, 351);
            rd.drawImage(km, 489, 229, null);
            rd.drawString("Mute Music", 527, 251);
            rd.drawImage(kn, 489, 279, null);
            rd.drawString("Mute Sound Effects", 527, 301);
            rd.drawImage(ks, 489, 329, null);
            rd.drawString("Toggle radar / map", 527, 351);
        }
        if (flipo == 1 || flipo == 16) {
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            rd.setColor(new Color(0, 0, 0));
            if (flipo == 16) {
                rd.drawString("M A I N    C O N T R O L S   -   once again!", 400 - ftm.stringWidth("M A I N    C O N T R O L S   -   once again!") / 2, 49);
            } else {
                rd.drawString("M A I N    C O N T R O L S", 400 - ftm.stringWidth("M A I N    C O N T R O L S") / 2, 49);
            }
            rd.drawString("Drive your car using the Arrow Keys:", 125, 80);
            rd.drawString("On the GROUND Spacebar is for Handbrake", 125, 101);
            rd.drawImage(space, 171, 115, null);
            rd.drawImage(arrows, 505, 83, null);
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            rd.drawString("Accelerate", 515, 79);
            rd.drawString("Brake/Reverse", 506, 157);
            rd.drawString("Turn left", 454, 135);
            rd.drawString("Turn right", 590, 135);
            rd.drawString("Handbrake", 247, 134);
            drawcs(175, "----------------------------------------------------------------------------------------------------------------------------------------------------", 0, 64, 128, 3);
            rd.setColor(new Color(0, 0, 0));
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            rd.drawString("To perform STUNTS:", 125, 200);
            rd.drawString("In the AIR press combo Spacebar + Arrow Keys", 125, 220);
            rd.drawImage(space, 185, 245, null);
            rd.drawImage(plus, 405, 248, null);
            rd.drawImage(arrows, 491, 213, null);
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            rd.setColor(new Color(0, 0, 0));
            rd.drawString("Forward Loop", 492, 209);
            rd.drawString("Backward Loop", 490, 287);
            rd.drawString("Left Roll", 443, 265);
            rd.drawString("Right Roll", 576, 265);
            rd.drawString("Spacebar", 266, 264);
            rd.drawImage(stunts, 125, 285, null);
        }
        if (flipo >= 1 && flipo <= 15) {
            rd.drawImage(next[pnext], 665, 395, null);
        }
        if (flipo >= 3 && flipo <= 16) {
            rd.drawImage(back[pback], 75, 395, null);
        }
        if (flipo == 16) {
            rd.drawImage(contin[pcontin], 565, 395, null);
        }
        if (control.enter || control.right) {
            if (control.enter && flipo == 16) {
                flipo = 0;
                fase = oldfase;
                rd.setFont(new Font("Arial", 1, 11));
                ftm = rd.getFontMetrics();
            }
            control.enter = false;
            control.right = false;
            if (flipo >= 1 && flipo <= 15) {
                flipo++;
            }
        }
        if (control.left) {
            if (flipo >= 3 && flipo <= 15) {
                flipo -= 3;
            }
            if (flipo == 16) {
                flipo--;
            }
            control.left = false;
        }
    }

    static void jflexo() {
        if (!badmac) {
            final int[] is = new int[360000];
            final PixelGrabber pixelgrabber = new PixelGrabber(GameSparker.offImage, 0, 0, 800, 450, is, 0, 800);
            try {
                pixelgrabber.grabPixels();
            } catch (final InterruptedException ignored) {

            }
            int i = 0;
            int i353 = 0;
            int i354 = 0;
            int i355 = 0;
            for (int i356 = 0; i356 < 360000; i356++) {
                final Color color = new Color(is[i356]);
                int i359;
                int i360;
                int i361;
                if (i355 == 0) {
                    i359 = color.getRed();
                    i = i359;
                    i360 = color.getGreen();
                    i354 = i360;
                    i361 = color.getBlue();
                    i353 = i361;
                } else {
                    i359 = (color.getRed() + i * 10) / 11;
                    i = i359;
                    i360 = (color.getGreen() + i354 * 10) / 11;
                    i354 = i360;
                    i361 = (color.getBlue() + i353 * 10) / 11;
                    i353 = i361;
                }
                if (++i355 == 800) {
                    i355 = 0;
                }
                final Color color362 = new Color(i359, i360, i361);
                is[i356] = color362.getRGB();
            }
            final Image image = xt.createImage(new MemoryImageSource(800, 450, is, 0, 800));
            rd.drawImage(image, 0, 0, null);
        } else {
            rd.setColor(new Color(0, 0, 0));
            rd.setComposite(AlphaComposite.getInstance(3, 0.5F));
            rd.fillRect(0, 0, 800, 450);
            rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        }
    }

    static void levelhigh(final int i, final int i91, final int i92, final int i93, final int i94) {
        rd.drawImage(gameh, 301, 20, null);
        int i95 = 16;
        int i96 = 48;
        int i97 = 96;
        if (i93 < 50)
            if (aflk) {
                i95 = 106;
                i96 = 176;
                i97 = 255;
                aflk = false;
            } else {
                aflk = true;
            }
        if (i != im) {
            if (i92 == 0) {
                drawcs(60, "You Wasted 'em!", i95, i96, i97, 0);
            } else if (i92 == 1) {
                drawcs(60, "Close Finish!", i95, i96, i97, 0);
            } else {
                drawcs(60, "Close Finish!  Almost got it!", i95, i96, i97, 0);
            }
        } else if (i91 == 229) {
            if (discon != 240) {
                drawcs(60, "Wasted!", i95, i96, i97, 0);
            } else {
                drawcs(60, "Disconnected!", i95, i96, i97, 0);
            }
        } else if (i94 > 2 || i94 < 0) {
            drawcs(60, "Stunts!", i95, i96, i97, 0);
        } else {
            drawcs(60, "Best Stunt!", i95, i96, i97, 0);
        }
        drawcs(380, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
    }

    static private Image loadBimage(final byte[] is, final MediaTracker mediatracker, final Toolkit toolkit, final int i) {
        final Image image = toolkit.createImage(is);
        mediatracker.addImage(image, 0);
        try {
            mediatracker.waitForID(0);
        } catch (final Exception ignored) {

        }
        final int i368 = image.getHeight(null);
        final int i369 = image.getWidth(null);
        final int[] is370 = new int[i369 * i368];
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, i369, i368, is370, 0, i369);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        for (int i371 = 0; i371 < i369 * i368; i371++)
            if (is370[i371] != is370[0] || i != 0) {
                final Color color = new Color(is370[i371]);
                final float[] fs = new float[3];
                Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), fs);
                fs[0] = 0.12F;
                fs[1] = 0.45F;
                if (i == 3) {
                    fs[0] = 0.13F;
                    fs[1] = 0.45F;
                }
                final Color color372 = Color.getHSBColor(fs[0], fs[1], fs[2]);
                is370[i371] = color372.getRGB();
            }
        if (i == 2) {
            Color color = new Color(is370[0]);
            final int i373 = 0x40000000 | color.getRed() << 16 | color.getGreen() << 8 | color.getBlue();
            color = new Color(is370[1]);
            final int i374 = ~0x7fffffff | color.getRed() << 16 | color.getGreen() << 8 | color.getBlue();
            for (int i375 = 2; i375 < i369 * i368; i375++) {
                if (is370[i375] == is370[0]) {
                    is370[i375] = i373;
                }
                if (is370[i375] == is370[1]) {
                    is370[i375] = i374;
                }
            }
            is370[0] = i373;
            is370[1] = i374;
        }
        Image image376;
        if (i == 2) {
            final BufferedImage bufferedimage = new BufferedImage(i369, i368, 2);
            bufferedimage.setRGB(0, 0, i369, i368, is370, 0, i369);
            image376 = bufferedimage;
        } else {
            image376 = xt.createImage(new MemoryImageSource(i369, i368, is370, 0, i369));
        }
        return image376;
    }

    static void loaddata() {
        kbload = 637;
        //runtyp = 176;
        //runner = new Thread(xt);
        //runner.start();
        loadimages();
        try {
            intertrack = new RadicalBASS(new File("music/interface.zip"));
        } catch (Exception e) {
            intertrack = new RadicalMod("music/interface.zip");
        }
        dnload += 44;
        loadsounds();
    }

    static private Image loadimage(final byte[] is, final MediaTracker mediatracker, final Toolkit toolkit) {
        final Image image = toolkit.createImage(is);
        mediatracker.addImage(image, 0);
        try {
            mediatracker.waitForID(0);
        } catch (final Exception ignored) {

        }
        return image;
    }
    
    private static interface ImageConsumer {
        void accept(byte[] is, MediaTracker mediatracker, Toolkit toolkit);
    }
    
    private static final class ImageIdentifier {
        final String fileName;
        final ImageConsumer cons;
        private ImageIdentifier(String s, ImageConsumer c) {
            cons=c;
            fileName=s;
        }
    }
    
    private static Image cbg1, cbg2;
    
    private static final ImageIdentifier[] idts = {

        new ImageIdentifier("cars.gif", (is, mediatracker, toolkit) -> {
            carsbg = loadBimage(is, mediatracker, toolkit, 1);
        }),
        new ImageIdentifier("color.gif", (is, mediatracker, toolkit) -> {
            cbg1 = loadBimage(is, mediatracker, toolkit, 0);
            
            if (cbg1 != null && cbg2 != null)
                makecarsbgc(cbg1, cbg2);
        }),
        new ImageIdentifier("class.gif", (is, mediatracker, toolkit) -> {
            cbg2 = loadBimage(is, mediatracker, toolkit, 0);

            if (cbg1 != null && cbg2 != null)
                makecarsbgc(cbg1, cbg2);
        }),
        new ImageIdentifier("smokey.gif", (is, mediatracker, toolkit) -> {
            smokeypix(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("1.gif", (is, mediatracker, toolkit) -> {
            orank[0] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("gameh.gif", (is, mediatracker, toolkit) -> {
            ogameh = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("wgame.gif", (is, mediatracker, toolkit) -> {
            owgame = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("gameov.gif", (is, mediatracker, toolkit) -> {
            gameov = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("lap.gif", (is, mediatracker, toolkit) -> {
            olap = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("paused.gif", (is, mediatracker, toolkit) -> {
            paused = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("select.gif", (is, mediatracker, toolkit) -> {
            select = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("yourwasted.gif", (is, mediatracker, toolkit) -> {
            oyourwasted = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("disco.gif", (is, mediatracker, toolkit) -> {
            odisco = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("youwastedem.gif", (is, mediatracker, toolkit) -> {
            oyouwastedem = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("gamefinished.gif", (is, mediatracker, toolkit) -> {
            ogamefinished = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("exitgame.gif", (is, mediatracker, toolkit) -> {
            oexitgame = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("pgate.gif", (is, mediatracker, toolkit) -> {
            pgate = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("d1.png", (is, mediatracker, toolkit) -> {
            dude[0] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("d2.png", (is, mediatracker, toolkit) -> {
            dude[1] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("d3.png", (is, mediatracker, toolkit) -> {
            dude[2] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("float.gif", (is, mediatracker, toolkit) -> {
            oflaot = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("1c.gif", (is, mediatracker, toolkit) -> {
            ocntdn[1] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("2c.gif", (is, mediatracker, toolkit) -> {
            ocntdn[2] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("3c.gif", (is, mediatracker, toolkit) -> {
            ocntdn[3] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("2.gif", (is, mediatracker, toolkit) -> {
            orank[1] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("3.gif", (is, mediatracker, toolkit) -> {
            orank[2] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("4.gif", (is, mediatracker, toolkit) -> {
            orank[3] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("5.gif", (is, mediatracker, toolkit) -> {
            orank[4] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("6.gif", (is, mediatracker, toolkit) -> {
            orank[5] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("7.gif", (is, mediatracker, toolkit) -> {
            orank[6] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("8.gif", (is, mediatracker, toolkit) -> {
            orank[7] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("bgmain.jpg", (is, mediatracker, toolkit) -> {
            bgmain = loadBimage(is, mediatracker, toolkit, 2);
        }),
        new ImageIdentifier("br.png", (is, mediatracker, toolkit) -> {
            br = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("loadingmusic.gif", (is, mediatracker, toolkit) -> {
            oloadingmusic = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("radicalplay.gif", (is, mediatracker, toolkit) -> {
            radicalplay = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("back.gif", (is, mediatracker, toolkit) -> {
            back[0] = loadimage(is, mediatracker, toolkit);
            back[1] = bressed(back[0]);
        }),
        new ImageIdentifier("continue.gif", (is, mediatracker, toolkit) -> {
            contin[0] = loadimage(is, mediatracker, toolkit);
            contin[1] = bressed(contin[0]);
        }),
        new ImageIdentifier("next.gif", (is, mediatracker, toolkit) -> {
            next[0] = loadimage(is, mediatracker, toolkit);
            next[1] = bressed(next[0]);
        }),
        new ImageIdentifier("rpro.gif", (is, mediatracker, toolkit) -> {
            rpro = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("selectcar.gif", (is, mediatracker, toolkit) -> {
            selectcar = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("track.jpg", (is, mediatracker, toolkit) -> {
            trackbg[0] = loadBimage(is, mediatracker, toolkit, 3);
            trackbg[1] = dodgen(trackbg[0]);
        }),
        new ImageIdentifier("youlost.gif", (is, mediatracker, toolkit) -> {
            oyoulost = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("youwon.gif", (is, mediatracker, toolkit) -> {
            oyouwon = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("0c.gif", (is, mediatracker, toolkit) -> {
            ocntdn[0] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("damage.gif", (is, mediatracker, toolkit) -> {
            odmg = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("power.gif", (is, mediatracker, toolkit) -> {
            opwr = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("position.gif", (is, mediatracker, toolkit) -> {
            opos = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("speed.gif", (is, mediatracker, toolkit) -> {
            osped = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("wasted.gif", (is, mediatracker, toolkit) -> {
            owas = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("start1.gif", (is, mediatracker, toolkit) -> {
            ostar[0] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("start2.gif", (is, mediatracker, toolkit) -> {
            ostar[1] = loadimage(is, mediatracker, toolkit);
            star[2] = pressed(ostar[1]);
        }),
        new ImageIdentifier("congrad.gif", (is, mediatracker, toolkit) -> {
            congrd = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("statb.gif", (is, mediatracker, toolkit) -> {
            statb = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("statbo.gif", (is, mediatracker, toolkit) -> {
            statbo = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("madness.gif", (is, mediatracker, toolkit) -> {
            mdness = loadude(is, mediatracker, toolkit);
        }),
//            new ImageIdentifier("onfmm.gif", (is, mediatracker, toolkit) -> {
//                onfmm = loadude(is, mediatracker, toolkit);
//            }),
        new ImageIdentifier("fixhoop.png", (is, mediatracker, toolkit) -> {
            fixhoop = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("arrow.gif", (is, mediatracker, toolkit) -> {
            sarrow = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("stunts.png", (is, mediatracker, toolkit) -> {
            stunts = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("racing.gif", (is, mediatracker, toolkit) -> {
            racing = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("wasting.gif", (is, mediatracker, toolkit) -> {
            wasting = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("plus.gif", (is, mediatracker, toolkit) -> {
            plus = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("space.gif", (is, mediatracker, toolkit) -> {
            space = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("arrows.gif", (is, mediatracker, toolkit) -> {
            arrows = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("chil.gif", (is, mediatracker, toolkit) -> {
            chil = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("ory.gif", (is, mediatracker, toolkit) -> {
            ory = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("kz.gif", (is, mediatracker, toolkit) -> {
            kz = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("kx.gif", (is, mediatracker, toolkit) -> {
            kx = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("kv.gif", (is, mediatracker, toolkit) -> {
            kv = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("km.gif", (is, mediatracker, toolkit) -> {
            km = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("kn.gif", (is, mediatracker, toolkit) -> {
            kn = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("ks.gif", (is, mediatracker, toolkit) -> {
            ks = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("kenter.gif", (is, mediatracker, toolkit) -> {
            kenter = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("nfm.gif", (is, mediatracker, toolkit) -> {
            nfm = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("options.png", (is, mediatracker, toolkit) -> {
            opti = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("opback.png", (is, mediatracker, toolkit) -> {
            opback = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("logocars.png", (is, mediatracker, toolkit) -> {
            logocars = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("logomad.png", (is, mediatracker, toolkit) -> {
            logomadnes = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("logomadbg.jpg", (is, mediatracker, toolkit) -> {
            logomadbg = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("byrd.png", (is, mediatracker, toolkit) -> {
            byrd = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("bggo.jpg", (is, mediatracker, toolkit) -> {
            bggo = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("nfmcoms.png", (is, mediatracker, toolkit) -> {
            nfmcoms = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("nfmcom.gif", (is, mediatracker, toolkit) -> {
            nfmcom = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("brit.gif", (is, mediatracker, toolkit) -> {
            brt = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("arn.gif", (is, mediatracker, toolkit) -> {
            arn = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("mload.gif", (is, mediatracker, toolkit) -> {
            mload = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("login.gif", (is, mediatracker, toolkit) -> {
            login = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("play.gif", (is, mediatracker, toolkit) -> {
            play = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("cancel.gif", (is, mediatracker, toolkit) -> {
            cancel = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("register.gif", (is, mediatracker, toolkit) -> {
            register = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("upgrade.gif", (is, mediatracker, toolkit) -> {
            upgrade = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("sdets.gif", (is, mediatracker, toolkit) -> {
            sdets = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("bob.gif", (is, mediatracker, toolkit) -> {
            bob = loadBimage(is, mediatracker, toolkit, 1);
        }),
        new ImageIdentifier("bot.gif", (is, mediatracker, toolkit) -> {
            bot = loadBimage(is, mediatracker, toolkit, 1);
        }),
        new ImageIdentifier("bol.gif", (is, mediatracker, toolkit) -> {
            bol = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("bolp.gif", (is, mediatracker, toolkit) -> {
            bolp = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("bor.gif", (is, mediatracker, toolkit) -> {
            bor = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("borp.gif", (is, mediatracker, toolkit) -> {
            borp = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("logout.gif", (is, mediatracker, toolkit) -> {
            logout = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("change.gif", (is, mediatracker, toolkit) -> {
            change = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("pln.gif", (is, mediatracker, toolkit) -> {
            pln = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("bols.gif", (is, mediatracker, toolkit) -> {
            bols = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("bolps.gif", (is, mediatracker, toolkit) -> {
            bolps = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("bors.gif", (is, mediatracker, toolkit) -> {
            bors = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("borps.gif", (is, mediatracker, toolkit) -> {
            borps = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("games.gif", (is, mediatracker, toolkit) -> {
            games = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("exit.gif", (is, mediatracker, toolkit) -> {
            exit = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("roomp.gif", (is, mediatracker, toolkit) -> {
            roomp = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("ready.gif", (is, mediatracker, toolkit) -> {
            redy = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("notreg.gif", (is, mediatracker, toolkit) -> {
            ntrg = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("cgame.gif", (is, mediatracker, toolkit) -> {
            cgame = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("ccar.gif", (is, mediatracker, toolkit) -> {
            ccar = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("lanm.gif", (is, mediatracker, toolkit) -> {
            lanm = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("asu.gif", (is, mediatracker, toolkit) -> {
            asu = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("asd.gif", (is, mediatracker, toolkit) -> {
            asd = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("pls.gif", (is, mediatracker, toolkit) -> {
            pls = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("sts.gif", (is, mediatracker, toolkit) -> {
            sts = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("gmc.gif", (is, mediatracker, toolkit) -> {
            gmc = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("stg.gif", (is, mediatracker, toolkit) -> {
            stg = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("crd.gif", (is, mediatracker, toolkit) -> {
            crd = loadBimage(is, mediatracker, toolkit, 0);
        }),
        new ImageIdentifier("bcl.gif", (is, mediatracker, toolkit) -> {
            bcl[0] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("bcr.gif", (is, mediatracker, toolkit) -> {
            bcr[0] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("bc.gif", (is, mediatracker, toolkit) -> {
            bc[0] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("pbcl.gif", (is, mediatracker, toolkit) -> {
            bcl[1] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("pbcr.gif", (is, mediatracker, toolkit) -> {
            bcr[1] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("pbc.gif", (is, mediatracker, toolkit) -> {
            bc[1] = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("yac.gif", (is, mediatracker, toolkit) -> {
            yac = loadimage(is, mediatracker, toolkit);
        }),
        new ImageIdentifier("ycmc.gif", (is, mediatracker, toolkit) -> {
            ycmc = loadimage(is, mediatracker, toolkit);
        }),
    };
    

    static private void loadimages() {
        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        final MediaTracker mediatracker = new MediaTracker(app);
        dnload += 8;
        try {
            for (int i = 0; i < idts.length; i++) {
                idts[i].cons.accept(Files.readAllBytes(new File(Madness.fpath + "data/images/" + idts[i].fileName).toPath()), mediatracker, toolkit);
            }
            
            dnload += 2;
            
        } catch (final Exception exception) {
            System.err.println("Error Loading Images: " + exception);
        }
        System.gc();
    }

    static void loading() {
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(0, 0, 800, 450);
        rd.drawImage(sign, 362, 35, null);
        rd.drawImage(hello, 125, 105, null);
        rd.setColor(new Color(198, 214, 255));
        rd.fillRoundRect(250, 340, 300, 80, 30, 70);
        rd.setColor(new Color(128, 167, 255));
        rd.drawRoundRect(250, 340, 300, 80, 30, 70);
        rd.drawImage(loadbar, 281, 365, null);
        rd.setFont(new Font("Arial", 1, 11));
        ftm = rd.getFontMetrics();
        drawcs(358, "Loading game, please wait.", 0, 0, 0, 3);
        rd.setColor(new Color(255, 255, 255));
        rd.fillRect(295, 398, 210, 17);
        shload += (dnload + 10.0F - shload) / 100.0F;
        if (shload > kbload) {
            shload = kbload;
        }
        if (dnload == kbload) {
            shload = kbload;
        }
        drawcs(410, "" + (int) ((26.0F + shload / kbload * 200.0F) / 226.0F * 100.0F) + " % loaded    |    " + (kbload - (int) shload) + " KB remaining", 32, 64, 128, 3);
        rd.setColor(new Color(32, 64, 128));
        rd.fillRect(287, 371, 26 + (int) (shload / kbload * 200.0F), 10);
    }

    static void loadingstage(final boolean bool) {

        trackbg(true);
        rd.drawImage(br, 65, 25, null);
        rd.setColor(new Color(212, 214, 138));
        rd.fillRoundRect(265, 201, 270, 26, 20, 40);
        rd.setColor(new Color(57, 64, 8));
        rd.drawRoundRect(265, 201, 270, 26, 20, 40);
        rd.setFont(new Font("Arial", 1, 12));
        ftm = rd.getFontMetrics();
        drawcs(219, "Loading, please wait...", 58, 61, 17, 3);
        if (bool) {
            rd.drawImage(select, 338, 35, null);
        }
        //app.repaint();
        if (CarDefine.staction != 0) {
            GameSparker.tnick.setVisible(false);
            GameSparker.tpass.setVisible(false);
            CarDefine.staction = 0;
        }
        removeds = 0;
    }

    static void loadmusic(final int i, final String string, final int i51) {
        hipnoload(i, false);
        app.setCursor(new Cursor(3));
        //app.repaint();
        boolean bool = false;
        if (multion == 0) {
            if (i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 10) {
                bool = true;
            }
            if (i == 11 || i == 12 || i == 13 || i == 14 || i == 17 || i == 18 || i == 19 || i == 20 || i == 22 || i == 23 || i == 26) {
                bool = true;
            }
            if (i < 0 && nplayers != 1 && newparts) {
                bool = true;
            }
        } else if (ransay == 1 || ransay == 2 || ransay == 3 || ransay == 4 || i == 10) {
            bool = true;
        }
        if (bool) {
            runtyp = i;
            runner = new Thread(xt);
            runner.start();
        }
        loadstrack(i, string, i51);
        if (bool) {
            runner.interrupt();
            runner = null;
            runtyp = 0;
        }
        System.gc();
        if (multion == 0 && GameSparker.applejava) {
            try {
                Thread.sleep(1000L);
            } catch (final InterruptedException ignored) {

            }
        }
        if (!lan) {
            strack.play();
        } else if (im != 0) {
            try {
                Thread.sleep(1000L);
            } catch (final InterruptedException ignored) {

            }
        }
        app.setCursor(new Cursor(0));
        pcontin = 0;
        mutem = false;
        mutes = false;
        fase = 6;
    }

    static private Image loadopsnap(final Image image, int i, final int i323) {
        final int i324 = image.getHeight(null);
        final int i325 = image.getWidth(null);
        final int[] is = new int[i325 * i324];
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, i325, i324, is, 0, i325);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        if (i < 0) {
            i = 33;
        }
        int i326 = 0;
        if (i323 == 1) {
            i326 = is[61993];
        }
        final int[] is327 = {
                Medium.snap[0], Medium.snap[1], Medium.snap[2]
        };
        while (is327[0] + is327[1] + is327[2] < -30) {
            for (int i328 = 0; i328 < 3; i328++)
                if (is327[i328] < 50) {
                    is327[i328]++;
                }
        }
        for (int i329 = 0; i329 < i325 * i324; i329++)
            if (is[i329] != is[i323]) {
                final Color color = new Color(is[i329]);
                int i332;
                int i333;
                int i334;
                if (i323 == 1 && is[i329] == i326) {
                    i332 = (int) (237.0F - 237.0F * (is327[0] / 150.0F));
                    if (i332 > 255) {
                        i332 = 255;
                    }
                    if (i332 < 0) {
                        i332 = 0;
                    }
                    i333 = (int) (237.0F - 237.0F * (is327[1] / 150.0F));
                    if (i333 > 255) {
                        i333 = 255;
                    }
                    if (i333 < 0) {
                        i333 = 0;
                    }
                    i334 = (int) (237.0F - 237.0F * (is327[2] / 150.0F));
                    if (i334 > 255) {
                        i334 = 255;
                    }
                    if (i334 < 0) {
                        i334 = 0;
                    }
                    if (i == 11) {
                        i332 = 250;
                        i333 = 250;
                        i334 = 250;
                    }
                } else {
                    i332 = (int) (color.getRed() - color.getRed() * (is327[0] / 100.0F));
                    if (i332 > 255) {
                        i332 = 255;
                    }
                    if (i332 < 0) {
                        i332 = 0;
                    }
                    i333 = (int) (color.getGreen() - color.getGreen() * (is327[1] / 100.0F));
                    if (i333 > 255) {
                        i333 = 255;
                    }
                    if (i333 < 0) {
                        i333 = 0;
                    }
                    i334 = (int) (color.getBlue() - color.getBlue() * (is327[2] / 100.0F));
                    if (i334 > 255) {
                        i334 = 255;
                    }
                    if (i334 < 0) {
                        i334 = 0;
                    }
                }
                final Color color335 = new Color(i332, i333, i334);
                is[i329] = color335.getRGB();
            }
        return xt.createImage(new MemoryImageSource(i325, i324, is, 0, i325));
    }

    static private Image loadsnap(final Image image) {
        final int i = image.getHeight(null);
        final int i316 = image.getWidth(null);
        final int[] is = new int[i316 * i];
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, i316, i, is, 0, i316);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        for (int i317 = 0; i317 < i316 * i; i317++) {
            final Color color = new Color(is[i316 * i - 1]);
            final Color color318 = new Color(is[i317]);
            if (color318.getRed() != color318.getGreen() && color318.getGreen() != color318.getBlue()) {
                int i319 = (int) (color318.getRed() + color318.getRed() * (Medium.snap[0] / 100.0F));
                if (i319 > 255) {
                    i319 = 255;
                }
                if (i319 < 0) {
                    i319 = 0;
                }
                int i320 = (int) (color318.getGreen() + color318.getGreen() * (Medium.snap[1] / 100.0F));
                if (i320 > 255) {
                    i320 = 255;
                }
                if (i320 < 0) {
                    i320 = 0;
                }
                int i321 = (int) (color318.getBlue() + color318.getBlue() * (Medium.snap[2] / 100.0F));
                if (i321 > 255) {
                    i321 = 255;
                }
                if (i321 < 0) {
                    i321 = 0;
                }
                is[i317] = ~0xffffff | i319 << 16 | i320 << 8 | i321;
            } else {
                int i322 = (int) ((float) (color.getRed() - color318.getRed()) / (float) color.getRed() * 255.0F);
                if (i322 > 255) {
                    i322 = 255;
                }
                if (i322 < 0) {
                    i322 = 0;
                }
                is[i317] = i322 << 24 | 0x0 | 0x0 | 0x0;
            }
        }
        final BufferedImage bufferedimage = new BufferedImage(i316, i, 2);
        bufferedimage.setRGB(0, 0, i316, i, is, 0, i316);
        return bufferedimage;
    }

    static private void loadsounds() {
        dnload += 3;
        try {
            final File file = new File("" + Madness.fpath + "data/sounds.zip");
            final FileInputStream fileinputstream = new FileInputStream(file);
            final ZipInputStream zipinputstream = new ZipInputStream(fileinputstream);
            for (ZipEntry zipentry = zipinputstream.getNextEntry(); zipentry != null; zipentry = zipinputstream.getNextEntry()) {
                int i = (int) zipentry.getSize();
                final String string = zipentry.getName();
                final byte[] is = new byte[i];
                int i0 = 0;
                int i1;
                for (; i > 0; i -= i1) {
                    i1 = zipinputstream.read(is, i0, i);
                    i0 += i1;
                }
                for (int i2 = 0; i2 < 5; i2++) {
                    for (int i3 = 0; i3 < 5; i3++)
                        if (string.equals("" + i3 + "" + i2 + ".wav")) {
                            engs[i3][i2] = new SoundClip("temp-sound/" + string);
                        }
                }
                for (int i4 = 0; i4 < 6; i4++)
                    if (string.equals("air" + i4 + ".wav")) {
                        air[i4] = new SoundClip("temp-sound/" + string);
                    }
                for (int i5 = 0; i5 < 3; i5++)
                    if (string.equals("crash" + (i5 + 1) + ".wav")) {
                        crash[i5] = new SoundClip("temp-sound/" + string);
                    }
                for (int i6 = 0; i6 < 3; i6++)
                    if (string.equals("lowcrash" + (i6 + 1) + ".wav")) {
                        lowcrash[i6] = new SoundClip("temp-sound/" + string);
                    }
                for (int i7 = 0; i7 < 3; i7++)
                    if (string.equals("skid" + (i7 + 1) + ".wav")) {
                        skid[i7] = new SoundClip("temp-sound/" + string);
                    }
                for (int i8 = 0; i8 < 3; i8++)
                    if (string.equals("dustskid" + (i8 + 1) + ".wav")) {
                        dustskid[i8] = new SoundClip("temp-sound/" + string);
                    }
                for (int i9 = 0; i9 < 3; i9++)
                    if (string.equals("scrape" + (i9 + 1) + ".wav")) {
                        scrape[i9] = new SoundClip("temp-sound/" + string);
                        if (i9 == 2) {
                            scrape[3] = new SoundClip("temp-sound/" + string);
                        }
                    }
                if (string.equals("powerup.wav")) {
                    powerup = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("tires.wav")) {
                    tires = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("checkpoint.wav")) {
                    checkpoint = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("carfixed.wav")) {
                    carfixed = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("three.wav")) {
                    three = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("two.wav")) {
                    two = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("one.wav")) {
                    one = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("go.wav")) {
                    go = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("wasted.wav")) {
                    wastd = new SoundClip("temp-sound/" + string);
                }
                if (string.equals("firewasted.wav")) {
                    firewasted = new SoundClip("temp-sound/" + string);
                }
                dnload += 5;
            }
            fileinputstream.close();
            zipinputstream.close();
        } catch (final Exception exception) {
            System.out.println("Error Loading Sounds: " + exception);
        }
        System.gc();
    }

    static void loadstrack(final int i, final String string, final int i52) {
        strack = TrackZipLoader.loadLegacy(i, string, i52);

        loadedt = true;
    }

    static private Image loadude(final byte[] is, final MediaTracker mediatracker, final Toolkit toolkit) {
        final Image image = toolkit.createImage(is);
        mediatracker.addImage(image, 0);
        try {
            mediatracker.waitForID(0);
        } catch (final Exception ignored) {

        }
        final int i = image.getHeight(null);
        final int i364 = image.getWidth(null);
        final int[] is365 = new int[i364 * i];
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, i364, i, is365, 0, i364);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        for (int i366 = 0; i366 < i364 * i; i366++) {
            final Color color = new Color(is365[i366]);
            if (color.getGreen() > color.getRed() + 5 && color.getGreen() > color.getBlue() + 5) {
                int i367 = (int) (255.0F - (color.getGreen() - (color.getRed() + color.getBlue()) / 2) * 1.5F);
                if (i367 > 255) {
                    i367 = 255;
                }
                if (i367 < 0) {
                    i367 = 0;
                }
                is365[i366] = i367 << 24 | 0x0 | 0x0 | 0x0;
            }
        }
        final BufferedImage bufferedimage = new BufferedImage(i364, i, 2);
        bufferedimage.setRGB(0, 0, i364, i, is365, 0, i364);
        return bufferedimage;
    }

    static void mainbg(final int i) {
        int i26 = 2;
        rd.setColor(new Color(191, 184, 124));
        if (i == -1) {
            if (i != lmode) {
                bgmy[0] = 0;
                bgmy[1] = -400;
                bgup = false;
                bgf = 0.0F;
                lmode = i;
            }
            rd.setColor(new Color(144, 222, 9));
            i26 = 8;
        }
        if (i == 0) {
            if (i != lmode) {
                bgmy[0] = 0;
                bgmy[1] = -400;
                bgup = false;
                bgf = 0.0F;
                lmode = i;
            }
            final int i27 = (int) (255.0F * bgf + 191.0F * (1.0F - bgf));
            final int i28 = (int) (176.0F * bgf + 184.0F * (1.0F - bgf));
            final int i29 = (int) (67.0F * bgf + 124.0F * (1.0F - bgf));
            if (!bgup) {
                bgf += 0.02F;
                if (bgf > 0.9F) {
                    bgf = 0.9F;
                    bgup = true;
                }
            } else {
                bgf -= 0.02F;
                if (bgf < 0.2F) {
                    bgf = 0.2F;
                    bgup = false;
                }
            }
            rd.setColor(new Color(i27, i28, i29));
            i26 = 4;
        }
        if (i == 1) {
            if (i != lmode) {
                bgmy[0] = 0;
                bgmy[1] = -400;
                lmode = i;
            }
            rd.setColor(new Color(255, 176, 67));
            i26 = 8;
        }
        if (i == 2) {
            if (i != lmode) {
                bgmy[0] = 0;
                bgmy[1] = -400;
                lmode = i;
                bgf = 0.2F;
            }
            rd.setColor(new Color(188, 170, 122));
            if (flipo == 16) {
                final int i30 = (int) (176.0F * bgf + 191.0F * (1.0F - bgf));
                final int i31 = (int) (202.0F * bgf + 184.0F * (1.0F - bgf));
                final int i32 = (int) (255.0F * bgf + 124.0F * (1.0F - bgf));
                rd.setColor(new Color(i30, i31, i32));
                bgf += 0.025F;
                if (bgf > 0.85F) {
                    bgf = 0.85F;
                }
            } else {
                bgf = 0.2F;
            }
            i26 = 2;
        }
        if (i == 3) {
            if (i != lmode) {
                bgmy[0] = 0;
                bgmy[1] = -400;
                bgup = false;
                bgf = 0.0F;
                lmode = i;
            }
            final int i33 = (int) (255.0F * bgf + 191.0F * (1.0F - bgf));
            final int i34 = (int) (176.0F * bgf + 184.0F * (1.0F - bgf));
            final int i35 = (int) (67.0F * bgf + 124.0F * (1.0F - bgf));
            if (!bgup) {
                bgf += 0.02F;
                if (bgf > 0.9F) {
                    bgf = 0.9F;
                    bgup = true;
                }
            } else {
                bgf -= 0.02F;
                if (bgf < 0.2F) {
                    bgf = 0.2F;
                    bgup = false;
                }
            }
            rd.setColor(new Color(i33, i34, i35));
            i26 = 2;
        }
        if (i != -101)
            if (i == 4) {
                rd.setColor(new Color(216, 177, 100));
                rd.fillRect(65, 0, 670, 425);
            } else {
                rd.fillRect(65, 25, 670, 400);
            }
        if (i == 4) {
            if (i != lmode) {
                bgmy[0] = 0;
                bgmy[1] = 400;
                for (int i36 = 0; i36 < 4; i36++) {
                    ovw[i36] = (int) (50.0 + 150.0 * ThreadLocalRandom.current().nextDouble());
                    ovh[i36] = (int) (50.0 + 150.0 * ThreadLocalRandom.current().nextDouble());
                    ovy[i36] = (int) (400.0 * ThreadLocalRandom.current().nextDouble());
                    ovx[i36] = (int) (ThreadLocalRandom.current().nextDouble() * 670.0);
                    ovsx[i36] = (int) (5.0 + ThreadLocalRandom.current().nextDouble() * 10.0);
                }
                lmode = i;
            }
            for (int i37 = 0; i37 < 4; i37++) {
                rd.setColor(new Color(235, 176, 84));
                rd.fillOval((int) (65 + ovx[i37] - ovw[i37] * 1.5 / 2.0), (int) (25 + ovy[i37] - ovh[i37] * 1.5 / 2.0), (int) (ovw[i37] * 1.5), (int) (ovh[i37] * 1.5));
                rd.setColor(new Color(255, 176, 67));
                rd.fillOval(65 + ovx[i37] - ovh[i37] / 2, 25 + ovy[i37] - ovh[i37] / 2, ovw[i37], ovh[i37]);
                ovx[i37] -= ovsx[i37];
                if (ovx[i37] + ovw[i37] * 1.5 / 2.0 < 0.0) {
                    ovw[i37] = (int) (50.0 + 150.0 * ThreadLocalRandom.current().nextDouble());
                    ovh[i37] = (int) (50.0 + 150.0 * ThreadLocalRandom.current().nextDouble());
                    ovy[i37] = (int) (400.0 * ThreadLocalRandom.current().nextDouble());
                    ovx[i37] = (int) (670.0 + ovw[i37] * 1.5 / 2.0);
                    ovsx[i37] = (int) (5.0 + ThreadLocalRandom.current().nextDouble() * 10.0);
                }
            }
        }
        if (i != -101 && i != 4) {
            for (int i38 = 0; i38 < 2; i38++) {
                if (i != 2 || flipo != 16) {
                    rd.drawImage(bgmain, 65, 25 + bgmy[i38], null);
                }
                bgmy[i38] += i26;
                if (bgmy[i38] >= 400) {
                    bgmy[i38] = -400;
                }
            }
        }
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(0, 0, 65, 450);
        rd.fillRect(735, 0, 65, 450);
        if (i != 4) {
            rd.fillRect(65, 0, 670, 25);
        }
        rd.fillRect(65, 425, 670, 25);
    }

    static void maini(final Control control) {
        if (flipo == 0) {
            app.setCursor(new Cursor(0));
            flipo++;
        }
        mainbg(1);
        rd.setComposite(AlphaComposite.getInstance(3, 0.6F));
        rd.drawImage(logomadbg, 65, 25, null);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        rd.drawImage(logomadnes, 233, 186, null);
        float f = flkat / 800.0F;
        if (f > 0.2) {
            f = 0.2F;
        }
        if (flkat > 200) {
            f = (400 - flkat) / 1000.0F;
            if (f < 0.0F) {
                f = 0.0F;
            }
        }
        flkat++;
        if (flkat == 400) {
            flkat = 0;
        }
        rd.setComposite(AlphaComposite.getInstance(3, f));
        rd.drawImage(dude[0], 351 + gxdu, 28 + gydu, null);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        if (movly == 0) {
            gxdu = (int) (5.0 - 11.0 * ThreadLocalRandom.current().nextDouble());
            gydu = (int) (5.0 - 11.0 * ThreadLocalRandom.current().nextDouble());
        }
        movly++;
        if (movly == 2) {
            movly = 0;
        }
        rd.drawImage(logocars, 66, 33, null);
        rd.drawImage(opback, 247, 237, null);
        if (muhi < 0) {
            rd.setColor(new Color(140, 70, 0));
            rd.fillRoundRect(335, 293, 114, 19, 7, 20);
        }
        muhi--;
        if (muhi < -5) {
            muhi = 50;
        }
        if (control.up) {
            opselect--;
            if (opselect == -1) {
                opselect = 3;
            }
            control.up = false;
        }
        if (control.down) {
            opselect++;
            if (opselect == 4) {
                opselect = 0;
            }
            control.down = false;
        }
        if (opselect == 0) {
            if (shaded) {
                rd.setColor(new Color(140, 70, 0));
                rd.fillRect(343, 261, 110, 22);
                aflk = false;
            }
            if (aflk) {
                rd.setColor(new Color(200, 200, 0));
                aflk = false;
            } else {
                rd.setColor(new Color(255, 128, 0));
                aflk = true;
            }
            rd.drawRoundRect(343, 261, 110, 22, 7, 20);
        } else {
            rd.setColor(new Color(0, 0, 0));
            rd.drawRoundRect(343, 261, 110, 22, 7, 20);
        }
        if (opselect == 1) {
            if (shaded) {
                rd.setColor(new Color(140, 70, 0));
                rd.fillRect(288, 291, 221, 22);
                aflk = false;
            }
            if (aflk) {
                rd.setColor(new Color(200, 191, 0));
                aflk = false;
            } else {
                rd.setColor(new Color(255, 95, 0));
                aflk = true;
            }
            rd.drawRoundRect(288, 291, 221, 22, 7, 20);
        } else {
            rd.setColor(new Color(0, 0, 0));
            rd.drawRoundRect(288, 291, 221, 22, 7, 20);
        }
        if (opselect == 2) {
            if (shaded) {
                rd.setColor(new Color(140, 70, 0));
                rd.fillRect(301, 321, 196, 22);
                aflk = false;
            }
            if (aflk) {
                rd.setColor(new Color(200, 128, 0));
                aflk = false;
            } else {
                rd.setColor(new Color(255, 128, 0));
                aflk = true;
            }
            rd.drawRoundRect(301, 321, 196, 22, 7, 20);
        } else {
            rd.setColor(new Color(0, 0, 0));
            rd.drawRoundRect(301, 321, 196, 22, 7, 20);
        }
        if (opselect == 3) {
            if (shaded) {
                rd.setColor(new Color(140, 70, 0));
                rd.fillRect(357, 351, 85, 22);
                aflk = false;
            }
            if (aflk) {
                rd.setColor(new Color(200, 0, 0));
                aflk = false;
            } else {
                rd.setColor(new Color(255, 128, 0));
                aflk = true;
            }
            rd.drawRoundRect(357, 351, 85, 22, 7, 20);
        } else {
            rd.setColor(new Color(0, 0, 0));
            rd.drawRoundRect(357, 351, 85, 22, 7, 20);
        }
        rd.drawImage(opti, 294, 265, null);
        if (control.enter || control.handb) {
            if (opselect == 1) {
                mtop = true;
                multion = 1;
                gmode = 0;
                if (firstime) {
                    oldfase = -9;
                    fase = 11;
                    firstime = false;
                } else {
                    fase = -9;
                }
            }
            if (opselect == 2) {
                oldfase = 10;
                fase = 11;
                firstime = false;
            }
            if (opselect == 3) {
                fase = 8;
            }
            if (opselect == 0)
                /*if (unlocked[0] == 11)
                	if (unlocked[1] != 17)
                		opselect = 1;
                	else
                		opselect = 2;*/
                if (firstime) {
                    oldfase = 102;
                    fase = 11;
                    firstime = false;
                } else {
                    fase = 102;
                }
            flipo = 0;
            control.enter = false;
            control.handb = false;
        }
        rd.drawImage(byrd, 72, 410, null);
        rd.drawImage(nfmcoms, 567, 410, null);
        if (shaded) {
            //app.repaint();
            try {
                Thread.sleep(200L);
            } catch (final InterruptedException ignored) {

            }
        }
    }

    static void maini2() {
        mainbg(1);
        multion = 0;
        clangame = 0;
        gmode = 2;
        fase = -9;
        opselect = 0;
    }

    static private void makecarsbgc(final Image image, final Image image386) {
        final int[] is = new int[268000];
        final PixelGrabber pixelgrabber = new PixelGrabber(carsbg, 0, 0, 670, 400, is, 0, 670);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        final int[] is387 = new int[20700];
        final PixelGrabber pixelgrabber388 = new PixelGrabber(image, 0, 0, 92, 225, is387, 0, 92);
        try {
            pixelgrabber388.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        final int[] is389 = new int[2112];
        final PixelGrabber pixelgrabber390 = new PixelGrabber(image386, 0, 0, 88, 24, is389, 0, 88);
        try {
            pixelgrabber390.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        for (int i = 0; i < 670; i++) {
            for (int i391 = 0; i391 < 400; i391++) {
                if (i > 14 && i < 106 && i391 > 11 && i391 < 236 && is387[i - 14 + (i391 - 11) * 92] != is387[0]) {
                    final Color color = new Color(is[i + i391 * 670]);
                    final Color color392 = new Color(is387[i - 14 + (i391 - 11) * 92]);
                    int i393 = (int) (color.getRed() * 0.33 + color392.getRed() * 0.67);
                    if (i393 > 255) {
                        i393 = 255;
                    }
                    if (i393 < 0) {
                        i393 = 0;
                    }
                    int i394 = (int) (color.getGreen() * 0.33 + color392.getGreen() * 0.67);
                    if (i394 > 255) {
                        i394 = 255;
                    }
                    if (i394 < 0) {
                        i394 = 0;
                    }
                    int i395 = (int) (color.getBlue() * 0.33 + color392.getBlue() * 0.67);
                    if (i395 > 255) {
                        i395 = 255;
                    }
                    if (i395 < 0) {
                        i395 = 0;
                    }
                    final Color color396 = new Color(i393, i394, i395);
                    is[i + i391 * 670] = color396.getRGB();
                }
                if (i > 564 && i < 656 && i391 > 11 && i391 < 236 && is387[i - 564 + (i391 - 11) * 92] != is387[0]) {
                    final Color color = new Color(is[i + i391 * 670]);
                    final Color color397 = new Color(is387[i - 564 + (i391 - 11) * 92]);
                    int i398 = (int) (color.getRed() * 0.33 + color397.getRed() * 0.67);
                    if (i398 > 255) {
                        i398 = 255;
                    }
                    if (i398 < 0) {
                        i398 = 0;
                    }
                    int i399 = (int) (color.getGreen() * 0.33 + color397.getGreen() * 0.67);
                    if (i399 > 255) {
                        i399 = 255;
                    }
                    if (i399 < 0) {
                        i399 = 0;
                    }
                    int i400 = (int) (color.getBlue() * 0.33 + color397.getBlue() * 0.67);
                    if (i400 > 255) {
                        i400 = 255;
                    }
                    if (i400 < 0) {
                        i400 = 0;
                    }
                    final Color color401 = new Color(i398, i399, i400);
                    is[i + i391 * 670] = color401.getRGB();
                }
                if (i > 440 && i < 528 && i391 > 53 && i391 < 77 && is389[i - 440 + (i391 - 53) * 88] != is389[0]) {
                    final Color color = new Color(is[i + i391 * 670]);
                    final Color color402 = new Color(is389[i - 440 + (i391 - 53) * 88]);
                    int i403 = (int) (color.getRed() * 0.33 + color402.getRed() * 0.67);
                    if (i403 > 255) {
                        i403 = 255;
                    }
                    if (i403 < 0) {
                        i403 = 0;
                    }
                    int i404 = (int) (color.getGreen() * 0.33 + color402.getGreen() * 0.67);
                    if (i404 > 255) {
                        i404 = 255;
                    }
                    if (i404 < 0) {
                        i404 = 0;
                    }
                    int i405 = (int) (color.getBlue() * 0.33 + color402.getBlue() * 0.67);
                    if (i405 > 255) {
                        i405 = 255;
                    }
                    if (i405 < 0) {
                        i405 = 0;
                    }
                    final Color color406 = new Color(i403, i404, i405);
                    is[i + i391 * 670] = color406.getRGB();
                }
            }
        }
        carsbgc = xt.createImage(new MemoryImageSource(670, 400, is, 0, 670));
    }

    static boolean msgcheck(String string) {
        boolean bool = false;
        string = string.toLowerCase();
        final String[] strings = {
                "fu ", " rape", "slut ", "screw ", "redtube", "fuck", "fuk", "f*ck", "fu*k", "f**k", "ass hole",
                "asshole", "dick", "dik", "cock", "cok ", "shit", "damn", "sex", "anal", "whore", "bitch", "biatch",
                "bich", " ass", "bastard", "cunt", "dildo", "fag", "homo", "mothaf", "motherf", "negro", "nigga",
                "nigger", "pussy", "gay", "homo", "you punk", "i will kill you"
        };
        for (final String string2 : strings)
            if (string.contains(string2)) {
                bool = true;
            }
        if (string.startsWith("ass ")) {
            bool = true;
        }
        if (string.equals("ass")) {
            bool = true;
        }
        if (string.equals("rape")) {
            bool = true;
        }
        if (string.equals("fu")) {
            bool = true;
        }
        String string419 = "";
        String string420 = "";
        int i = 0;
        boolean bool421 = false;
        boolean bool422;
        for (bool422 = false; i < string.length() && !bool422; i++)
            if (!bool421) {
                string419 = "" + string419 + "" + string.charAt(i);
                bool421 = true;
            } else {
                bool421 = false;
                if (!string420.equals("") && !string420.equals("" + string.charAt(i))) {
                    bool422 = true;
                }
                string420 = "" + string.charAt(i);
            }
        if (!bool422) {
            for (final String string2 : strings)
                if (string419.contains(string2)) {
                    bool = true;
                }
        }
        string419 = "";
        string420 = "";
        i = 0;
        bool421 = true;
        for (bool422 = false; i < string.length() && !bool422; i++)
            if (!bool421) {
                string419 = "" + string419 + "" + string.charAt(i);
                bool421 = true;
            } else {
                bool421 = false;
                if (!string420.equals("") && !string420.equals("" + string.charAt(i))) {
                    bool422 = true;
                }
                string420 = "" + string.charAt(i);
            }
        if (!bool422) {
            for (final String string2 : strings)
                if (string419.contains(string2)) {
                    bool = true;
                }
        }
        string419 = "";
        string420 = "";
        i = 0;
        int i425 = 0;
        for (bool422 = false; i < string.length() && !bool422; i++)
            if (i425 == 0) {
                string419 = "" + string419 + "" + string.charAt(i);
                i425 = 2;
            } else {
                i425--;
                if (!string420.equals("") && !string420.equals("" + string.charAt(i))) {
                    bool422 = true;
                }
                string420 = "" + string.charAt(i);
            }
        if (!bool422) {
            for (final String string2 : strings)
                if (string419.contains(string2)) {
                    bool = true;
                }
        }
        string419 = "";
        string420 = "";
        i = 0;
        i425 = 1;
        for (bool422 = false; i < string.length() && !bool422; i++)
            if (i425 == 0) {
                string419 = "" + string419 + "" + string.charAt(i);
                i425 = 2;
            } else {
                i425--;
                if (!string420.equals("") && !string420.equals("" + string.charAt(i))) {
                    bool422 = true;
                }
                string420 = "" + string.charAt(i);
            }
        if (!bool422) {
            for (final String string2 : strings)
                if (string419.contains(string2)) {
                    bool = true;
                }
        }
        string419 = "";
        string420 = "";
        i = 0;
        i425 = 2;
        for (bool422 = false; i < string.length() && !bool422; i++)
            if (i425 == 0) {
                string419 = "" + string419 + "" + string.charAt(i);
                i425 = 2;
            } else {
                i425--;
                if (!string420.equals("") && !string420.equals("" + string.charAt(i))) {
                    bool422 = true;
                }
                string420 = "" + string.charAt(i);
            }
        if (!bool422) {
            for (final String string2 : strings)
                if (string419.contains(string2)) {
                    bool = true;
                }
        }
        return bool;
    }

    static void multistat(final Control control, final int i, final int i53, final boolean bool, final UDPMistro udpmistro) {
        int i54 = -1;
        if (fase != -2) {
            if (exitm != 0 && !holdit) {
                if (!lan || im != 0) {
                    if (bool)
                        if (i > 357 && i < 396 && i53 > 162 && i53 < 179) {
                            exitm = 2;
                            if (multion == 1 && !lan && sendstat == 0) {
                                sendstat = 1;
                                if (runtyp != -101) {
                                    if (runner != null) {
                                        runner.interrupt();
                                    }
                                    runner = null;
                                    runner = new Thread(xt);
                                    runner.start();
                                }
                            }
                        } else {
                            exitm = 0;
                        }
                    final float[] fs = new float[3];
                    Color.RGBtoHSB(Medium.cgrnd[0], Medium.cgrnd[1], Medium.cgrnd[2], fs);
                    fs[1] -= 0.15;
                    if (fs[1] < 0.0F) {
                        fs[1] = 0.0F;
                    }
                    fs[2] += 0.15;
                    if (fs[2] > 1.0F) {
                        fs[2] = 1.0F;
                    }
                    rd.setColor(Color.getHSBColor(fs[0], fs[1], fs[2]));
                    rd.fillRect(357, 169, 39, 10);
                    rd.fillRect(403, 169, 39, 10);
                    fs[1] -= 0.07;
                    if (fs[1] < 0.0F) {
                        fs[1] = 0.0F;
                    }
                    fs[2] += 0.07;
                    if (fs[2] > 1.0F) {
                        fs[2] = 1.0F;
                    }
                    rd.setColor(Color.getHSBColor(fs[0], fs[1], fs[2]));
                    rd.fillRect(357, 162, 39, 7);
                    rd.fillRect(403, 162, 39, 7);
                    drawhi(exitgame, 116);
                    if (i > 357 && i < 396 && i53 > 162 && i53 < 179) {
                        rd.setColor(new Color(Medium.csky[0], Medium.csky[1], Medium.csky[2]));
                        rd.fillRect(357, 162, 39, 17);
                    }
                    if (i > 403 && i < 442 && i53 > 162 && i53 < 179) {
                        rd.setColor(new Color(Medium.csky[0], Medium.csky[1], Medium.csky[2]));
                        rd.fillRect(403, 162, 39, 17);
                    }
                    rd.setColor(new Color(0, 0, 0));
                    rd.drawString("Yes", 366, 175);
                    rd.drawString("No", 416, 175);
                    rd.setColor(new Color(Medium.csky[0] / 2, Medium.csky[1] / 2, Medium.csky[2] / 2));
                    rd.drawRect(403, 162, 39, 17);
                    rd.drawRect(357, 162, 39, 17);
                } else {
                    rd.setFont(new Font("Arial", 1, 13));
                    ftm = rd.getFontMetrics();
                    drawcs(125, "You cannot exit game.  Your computer is the LAN server!", 0, 0, 0, 0);
                    msgflk[0]++;
                    if (msgflk[0] == 67 || bool) {
                        msgflk[0] = 0;
                        exitm = 0;
                    }
                    rd.setFont(new Font("Arial", 1, 11));
                    ftm = rd.getFontMetrics();
                }
            } else if (exitm == 4) {
                if (bool) {
                    if (i > 357 && i < 396 && i53 > 362 && i53 < 379) {
                        alocked = -1;
                        lalocked = -1;
                        multion = 2;
                        control.multion = multion;
                        holdit = false;
                        exitm = 0;
                        control.chatup = 0;
                    }
                    if ((!lan || im != 0) && i > 403 && i < 442 && i53 > 362 && i53 < 379) {
                        holdcnt = 600;
                        exitm = 0;
                        control.chatup = 0;
                    }
                }
                final float[] fs = new float[3];
                Color.RGBtoHSB(Medium.cgrnd[0], Medium.cgrnd[1], Medium.cgrnd[2], fs);
                fs[1] -= 0.15;
                if (fs[1] < 0.0F) {
                    fs[1] = 0.0F;
                }
                fs[2] += 0.15;
                if (fs[2] > 1.0F) {
                    fs[2] = 1.0F;
                }
                rd.setColor(Color.getHSBColor(fs[0], fs[1], fs[2]));
                rd.fillRect(357, 369, 39, 10);
                if (!lan || im != 0) {
                    rd.fillRect(403, 369, 39, 10);
                }
                fs[1] -= 0.07;
                if (fs[1] < 0.0F) {
                    fs[1] = 0.0F;
                }
                fs[2] += 0.07;
                if (fs[2] > 1.0F) {
                    fs[2] = 1.0F;
                }
                rd.setColor(Color.getHSBColor(fs[0], fs[1], fs[2]));
                rd.fillRect(357, 362, 39, 7);
                if (!lan || im != 0) {
                    rd.fillRect(403, 362, 39, 7);
                }
                rd.setColor(new Color(0, 0, 0));
                rd.setFont(new Font("Arial", 1, 13));
                ftm = rd.getFontMetrics();
                if (lan && im == 0) {
                    drawcs(140, "(You cannot exit game.  Your computer is the LAN server... )", 0, 0, 0, 0);
                }
                rd.drawString("Continue watching this game?", 155, 375);
                if (i > 357 && i < 396 && i53 > 362 && i53 < 379) {
                    rd.setColor(new Color(Medium.csky[0], Medium.csky[1], Medium.csky[2]));
                    rd.fillRect(357, 362, 39, 17);
                }
                if ((!lan || im != 0) && i > 403 && i < 442 && i53 > 362 && i53 < 379) {
                    rd.setColor(new Color(Medium.csky[0], Medium.csky[1], Medium.csky[2]));
                    rd.fillRect(403, 362, 39, 17);
                }
                rd.setFont(new Font("Arial", 1, 11));
                ftm = rd.getFontMetrics();
                rd.setColor(new Color(0, 0, 0));
                rd.drawString("Yes", 366, 375);
                if (!lan || im != 0) {
                    rd.drawString("No", 416, 375);
                }
                rd.setColor(new Color(Medium.csky[0] / 2, Medium.csky[1] / 2, Medium.csky[2] / 2));
                if (!lan || im != 0) {
                    rd.drawRoundRect(147, 357, 301, 27, 7, 20);
                } else {
                    rd.drawRoundRect(147, 357, 262, 27, 7, 20);
                }
                rd.drawRect(357, 362, 39, 17);
                if (!lan || im != 0) {
                    rd.drawRect(403, 362, 39, 17);
                }
            }
            if (runtyp == -101 && !lan) {
                if (warning == 0 || warning == 210) {
                    int i55 = 0;
                    int i56 = 0;
                    if (clanchat) {
                        i55 = 1;
                        i56 = -23;
                    } else if (control.chatup == 2) {
                        control.chatup = 1;
                    }
                    for (int i57 = i55; i57 >= 0; i57--) {
                        boolean bool58 = false;
                        if (i > 5 && i < 33 && i53 > 423 + i56 && i53 < 446 + i56) {
                            bool58 = true;
                            if (control.chatup != 0) {
                                control.chatup = 0;
                            }
                        } else if (pointc[i57] != 6) {
                            pointc[i57] = 6;
                            floater[i57] = 1;
                        }
                        if (i > 33 && i < 666 && i53 > 423 + i56 && i53 < 446 + i56 && lxm != i && i53 != lym && lxm != -100) {
                            control.chatup = i57 + 1;
                            cntchatp[i57] = 0;
                        }
                        if (i57 == 0) {
                            lxm = i;
                            lym = i53;
                        }
                        if (exitm != 0 && exitm != 4) {
                            control.chatup = 0;
                        }
                        boolean bool59 = false;
                        if (control.enter && control.chatup == i57 + 1) {
                            bool59 = true;
                            control.chatup = 0;
                            control.enter = false;
                            lxm = -100;
                        }
                        if (bool) {
                            if (mouson == 0) {
                                if (i > 676 && i < 785 && i53 > 426 + i56 && i53 < 443 + i56 && control.chatup == i57 + 1) {
                                    bool59 = true;
                                    control.chatup = 0;
                                }
                                if (bool58 && pointc[i57] > 0) {
                                    pointc[i57]--;
                                    floater[i57] = 1;
                                }
                                if (i57 == 0) {
                                    mouson = 1;
                                }
                            }
                            if (i57 == 0) {
                                control.chatup = 0;
                            }
                        } else if (i57 == 0 && mouson != 0) {
                            mouson = 0;
                        }
                        if (bool59) {
                            String string = "";
                            int i60 = 0;
                            int i61 = 1;
                            for (; i60 < lcmsg[i57].length(); i60++) {
                                final String string62 = "" + lcmsg[i57].charAt(i60);
                                if (string62.equals(" ")) {
                                    i61++;
                                } else {
                                    i61 = 0;
                                }
                                if (i61 < 2) {
                                    string = "" + string + string62;
                                }
                            }
                            if (!string.equals("")) {
                                string = string.replace('|', ':');
                                if (string.toLowerCase().contains(GameSparker.tpass.getText().toLowerCase())) {
                                    string = " ";
                                }
                                if (!msgcheck(string) && updatec[i57] > -12) {
                                    if (cnames[i57][6].equals("Game Chat  ") || cnames[i57][6].equals("" + clan + "'s Chat  ")) {
                                        cnames[i57][6] = "";
                                    }
                                    for (int i63 = 0; i63 < 6; i63++) {
                                        sentn[i57][i63] = sentn[i57][i63 + 1];
                                        cnames[i57][i63] = cnames[i57][i63 + 1];
                                    }
                                    sentn[i57][6] = string;
                                    cnames[i57][6] = nickname;
                                    if (pointc[i57] != 6) {
                                        pointc[i57] = 6;
                                        floater[i57] = 1;
                                    }
                                    msgflk[i57] = 110;
                                    if (updatec[i57] > -11) {
                                        updatec[i57] = -11;
                                    } else {
                                        updatec[i57]--;
                                    }
                                } else {
                                    warning++;
                                }
                            }
                        }
                        if (bool58 || floater[i57] != 0 || control.chatup == i57 + 1 || msgflk[i57] != 0) {
                            final float[] fs = new float[3];
                            Color.RGBtoHSB(Medium.cgrnd[0], Medium.cgrnd[1], Medium.cgrnd[2], fs);
                            fs[1] -= 0.15;
                            if (fs[1] < 0.0F) {
                                fs[1] = 0.0F;
                            }
                            fs[2] += 0.15;
                            if (fs[2] > 1.0F) {
                                fs[2] = 1.0F;
                            }
                            rd.setColor(Color.getHSBColor(fs[0], fs[1], fs[2]));
                            rd.fillRect(33, 423 + i56, 761, 23);
                        }
                        if (control.chatup == 0 && GameSparker.cmsg.isShowing()) {
                            GameSparker.cmsg.setVisible(false);
                            app.requestFocus();
                        }
                        if (control.chatup != i57 + 1) {
                            int i64 = 0;
                            int i65 = (int) (48.0F + 48.0F * (Medium.snap[1] / 100.0F));
                            if (i65 > 255) {
                                i65 = 255;
                            }
                            if (i65 < 0) {
                                i65 = 0;
                            }
                            int i66 = (int) (96.0F + 96.0F * (Medium.snap[2] / 100.0F));
                            if (i66 > 255) {
                                i66 = 255;
                            }
                            if (i66 < 0) {
                                i66 = 0;
                            }
                            if (floater[i57] != 0) {
                                for (int i67 = 6; i67 >= 0; i67--) {
                                    if (pointc[i57] == i67)
                                        if (Math.abs(i64 + movepos[i57]) > 10) {
                                            floater[i57] = (movepos[i57] + i64) / 4;
                                            if (floater[i57] > -5 && floater[i57] < 0) {
                                                floater[i57] = -5;
                                            }
                                            if (floater[i57] < 10 && floater[i57] > 0) {
                                                floater[i57] = 10;
                                            }
                                            movepos[i57] -= floater[i57];
                                        } else {
                                            movepos[i57] = -i64;
                                            floater[i57] = 0;
                                        }
                                    if (pointc[i57] >= i67) {
                                        rd.setColor(new Color(0, i65, i66));
                                        rd.setFont(new Font("Tahoma", 1, 11));
                                        ftm = rd.getFontMetrics();
                                        rd.drawString("" + cnames[i57][i67] + ": ", 39 + i64 + movepos[i57], 439 + i56);
                                        i64 += ftm.stringWidth("" + cnames[i57][i67] + ": ");
                                        rd.setColor(new Color(0, 0, 0));
                                        rd.setFont(new Font("Tahoma", 0, 11));
                                        ftm = rd.getFontMetrics();
                                        rd.drawString("" + sentn[i57][i67] + "   ", 39 + i64 + movepos[i57], 439 + i56);
                                        i64 += ftm.stringWidth("" + sentn[i57][i67] + "   ");
                                    } else {
                                        i64 += ftm.stringWidth("" + cnames[i57][i67] + ": ");
                                        i64 += ftm.stringWidth("" + sentn[i57][i67] + "   ");
                                    }
                                }
                                rd.setColor(new Color(0, 0, 0));
                                rd.fillRect(0, 423 + i56, 5, 24);
                                rd.fillRect(794, 423 + i56, 6, 24);
                            } else {
                                for (int i68 = pointc[i57]; i68 >= 0; i68--) {
                                    if (i68 == 6 && msgflk[i57] != 0) {
                                        msgflk[i57]--;
                                    }
                                    rd.setColor(new Color(0, i65, i66));
                                    rd.setFont(new Font("Tahoma", 1, 11));
                                    ftm = rd.getFontMetrics();
                                    if (ftm.stringWidth("" + cnames[i57][i68] + ": ") + 39 + i64 < 775) {
                                        if (i68 != 6 || msgflk[i57] < 67 || msgflk[i57] % 3 != 0) {
                                            rd.drawString("" + cnames[i57][i68] + ": ", 39 + i64, 439 + i56);
                                        }
                                        i64 += ftm.stringWidth("" + cnames[i57][i68] + ": ");
                                    } else {
                                        String string = "";
                                        for (int i69 = 0; ftm.stringWidth(string) + 39 + i64 < 775 && i69 < cnames[i57][i68].length(); i69++) {
                                            string = "" + string + cnames[i57][i68].charAt(i69);
                                        }
                                        string = "" + string + "...";
                                        if (i68 != 6 || msgflk[i57] < 67 || msgflk[i57] % 3 != 0) {
                                            rd.drawString(string, 39 + i64, 439 + i56);
                                        }
                                        break;
                                    }
                                    rd.setColor(new Color(0, 0, 0));
                                    rd.setFont(new Font("Tahoma", 0, 11));
                                    ftm = rd.getFontMetrics();
                                    if (ftm.stringWidth(sentn[i57][i68]) + 39 + i64 < 775) {
                                        if (i68 != 6 || msgflk[i57] < 67 || msgflk[i57] % 3 != 0) {
                                            rd.drawString("" + sentn[i57][i68] + "   ", 39 + i64, 439 + i56);
                                        }
                                        i64 += ftm.stringWidth("" + sentn[i57][i68] + "   ");
                                    } else {
                                        String string = "";
                                        for (int i70 = 0; ftm.stringWidth(string) + 39 + i64 < 775 && i70 < sentn[i57][i68].length(); i70++) {
                                            string = "" + string + sentn[i57][i68].charAt(i70);
                                        }
                                        string = "" + string + "...";
                                        if (i68 != 6 || msgflk[i57] < 67 || msgflk[i57] % 3 != 0) {
                                            rd.drawString(string, 39 + i64, 439 + i56);
                                        }
                                        break;
                                    }
                                }
                            }
                        } else {
                            msgflk[i57] = 0;
                            i54 = i57;
                        }
                        if (bool58 || floater[i57] != 0) {
                            final float[] fs = new float[3];
                            Color.RGBtoHSB(Medium.cgrnd[0], Medium.cgrnd[1], Medium.cgrnd[2], fs);
                            fs[1] -= 0.076;
                            if (fs[1] < 0.0F) {
                                fs[1] = 0.0F;
                            }
                            fs[2] += 0.076;
                            if (fs[2] > 1.0F) {
                                fs[2] = 1.0F;
                            }
                            rd.setColor(Color.getHSBColor(fs[0], fs[1], fs[2]));
                            rd.fillRect(5, 423 + i56, 28, 23);
                        }
                        if (bool58) {
                            rd.setColor(new Color(0, 0, 0));
                        } else {
                            rd.setColor(new Color((int) (Medium.cgrnd[0] / 2.0F), (int) (Medium.cgrnd[1] / 2.0F), (int) (Medium.cgrnd[2] / 2.0F)));
                        }
                        rd.setFont(new Font("Tahoma", 1, 11));
                        rd.drawString("<<", 10, 439 + i56);
                        rd.setColor(new Color(0, 0, 0));
                        rd.drawRect(5, 423 + i56, 789, 23);
                        rd.drawLine(33, 423 + i56, 33, 446 + i56);
                        i56 += 23;
                    }
                    if (i > 775 && i < 794 && i53 > 409 - i55 * 23 && i53 < 423 - i55 * 23) {
                        rd.drawRect(775, 409 - i55 * 23, 19, 14);
                        rd.setColor(new Color(200, 0, 0));
                        if (bool) {
                            control.chatup = 0;
                            if (GameSparker.cmsg.isShowing()) {
                                GameSparker.cmsg.setVisible(false);
                                app.requestFocus();
                            }
                            runtyp = 0;
                            try {
                                socket.close();
                                socket = null;
                                din.close();
                                din = null;
                                dout.close();
                                dout = null;
                            } catch (final Exception ignored) {

                            }
                        }
                    }
                    rd.setFont(new Font("Arial", 1, 12));
                    rd.drawString("x", 782, 420 - i55 * 23);
                } else {
                    drawWarning();
                    if (GameSparker.cmsg.isShowing()) {
                        GameSparker.cmsg.setVisible(false);
                        app.requestFocus();
                    }
                    warning++;
                }
                rd.setFont(new Font("Arial", 1, 11));
                ftm = rd.getFontMetrics();
            } else if (control.chatup != 0) {
                control.chatup = 0;
                if (!lan) {
                    runtyp = -101;
                    if (runner != null) {
                        runner.interrupt();
                    }
                    runner = null;
                    runner = new Thread(xt);
                    runner.start();
                }
            }
            if (holdit && multion == 1 && !lan && sendstat == 0) {
                sendstat = 1;
                if (runtyp != -101) {
                    if (runner != null) {
                        runner.interrupt();
                    }
                    runner = null;
                    runner = new Thread(xt);
                    runner.start();
                }
            }
            if (control.arrace && starcnt < 38 && !holdit && CheckPoints.stage != 10 || multion >= 2) {
                if (alocked != -1 && CheckPoints.dested[alocked] != 0) {
                    alocked = -1;
                    lalocked = -1;
                }
                if (multion >= 2) {
                    if (alocked == -1 || holdit) {
                        if (cntflock == 100) {
                            for (int i71 = 0; i71 < nplayers; i71++)
                                if (holdit) {
                                    if (CheckPoints.pos[i71] == 0) {
                                        alocked = i71;
                                        im = i71;
                                    }
                                } else if (CheckPoints.dested[i71] == 0) {
                                    alocked = i71;
                                    im = i71;
                                }
                        }
                        cntflock++;
                    } else {
                        cntflock = 0;
                    }
                    if (lan) {
                        boolean bool72 = true;
                        for (int i73 = 0; i73 < nplayers; i73++)
                            if (dested[i73] == 0 && !plnames[i73].contains("MadBot")) {
                                bool72 = false;
                            }
                        if (bool72) {
                            exitm = 2;
                        }
                    }
                }
                final int i74 = nplayers;
                for (int i75 = 0; i75 < i74; i75++) {
                    boolean bool76 = false;
                    for (int i77 = 0; i77 < nplayers; i77++)
                        if (CheckPoints.pos[i77] == i75 && CheckPoints.dested[i77] == 0 && !bool76) {
                            int i81 = (int) (100.0F + 100.0F * (Medium.snap[2] / 100.0F));
                            if (i81 > 255) {
                                i81 = 255;
                            }
                            if (i81 < 0) {
                                i81 = 0;
                            }
                            rd.setColor(new Color(0, 0, i81));
                            if (i75 == 0) {
                                rd.drawString("1st", 673, 76 + 30 * i75);
                            }
                            if (i75 == 1) {
                                rd.drawString("2nd", 671, 76 + 30 * i75);
                            }
                            if (i75 == 2) {
                                rd.drawString("3rd", 671, 76 + 30 * i75);
                            }
                            if (i75 >= 3) {
                                rd.drawString("" + (i75 + 1) + "th", 671, 76 + 30 * i75);
                            }
                            if (clangame != 0) {
                                int i82;
                                int i83;
                                if (pclan[i77].equalsIgnoreCase(gaclan)) {
                                    i82 = 255;
                                    i83 = 128;
                                    i81 = 0;
                                } else {
                                    i82 = 0;
                                    i83 = 128;
                                    i81 = 255;
                                }
                                i82 += i82 * (Medium.snap[0] / 100.0F);
                                if (i82 > 255) {
                                    i82 = 255;
                                }
                                if (i82 < 0) {
                                    i82 = 0;
                                }
                                i83 += i83 * (Medium.snap[1] / 100.0F);
                                if (i83 > 255) {
                                    i83 = 255;
                                }
                                if (i83 < 0) {
                                    i83 = 0;
                                }
                                i81 += i81 * (Medium.snap[2] / 100.0F);
                                if (i81 > 255) {
                                    i81 = 255;
                                }
                                if (i81 < 0) {
                                    i81 = 0;
                                }
                                rd.setColor(new Color(i82, i83, i81));
                                rd.drawString(plnames[i77], 731 - ftm.stringWidth(plnames[i77]) / 2, 70 + 30 * i75);
                            }
                            rd.setColor(new Color(0, 0, 0));
                            rd.drawString(plnames[i77], 730 - ftm.stringWidth(plnames[i77]) / 2, 70 + 30 * i75);
                            final int i84 = (int) (60.0F * CheckPoints.magperc[i77]);
                            int i85 = 244;
                            int i86 = 244;
                            i81 = 11;
                            if (i84 > 20) {
                                i86 = (int) (244.0F - 233.0F * ((i84 - 20) / 40.0F));
                            }
                            i85 += i85 * (Medium.snap[0] / 100.0F);
                            if (i85 > 255) {
                                i85 = 255;
                            }
                            if (i85 < 0) {
                                i85 = 0;
                            }
                            i86 += i86 * (Medium.snap[1] / 100.0F);
                            if (i86 > 255) {
                                i86 = 255;
                            }
                            if (i86 < 0) {
                                i86 = 0;
                            }
                            i81 += i81 * (Medium.snap[2] / 100.0F);
                            if (i81 > 255) {
                                i81 = 255;
                            }
                            if (i81 < 0) {
                                i81 = 0;
                            }
                            rd.setColor(new Color(i85, i86, i81));
                            rd.fillRect(700, 74 + 30 * i75, i84, 5);
                            rd.setColor(new Color(0, 0, 0));
                            rd.drawRect(700, 74 + 30 * i75, 60, 5);
                            boolean bool87 = false;
                            if ((im != i77 || multion >= 2) && i > 661 && i < 775 && i53 > 58 + 30 * i75 && i53 < 83 + 30 * i75) {
                                bool87 = true;
                                if (bool) {
                                    if (!onlock)
                                        if (alocked != i77 || multion >= 2) {
                                            alocked = i77;
                                            if (multion >= 2) {
                                                im = i77;
                                            }
                                        } else {
                                            alocked = -1;
                                        }
                                    onlock = true;
                                } else if (onlock) {
                                    onlock = false;
                                }
                            }
                            if (alocked == i77) {
                                i85 = (int) (159.0F + 159.0F * (Medium.snap[0] / 100.0F));
                                if (i85 > 255) {
                                    i85 = 255;
                                }
                                if (i85 < 0) {
                                    i85 = 0;
                                }
                                i86 = (int) (207.0F + 207.0F * (Medium.snap[1] / 100.0F));
                                if (i86 > 255) {
                                    i86 = 255;
                                }
                                if (i86 < 0) {
                                    i86 = 0;
                                }
                                i81 = (int) (255.0F + 255.0F * (Medium.snap[2] / 100.0F));
                                if (i81 > 255) {
                                    i81 = 255;
                                }
                                if (i81 < 0) {
                                    i81 = 0;
                                }
                                rd.setColor(new Color(i85, i86, i81));
                                rd.drawRect(661, 58 + 30 * i75, 114, 25);
                                rd.drawRect(662, 59 + 30 * i75, 112, 23);
                            }
                            if (bool87 && !onlock) {
                                if (alocked == i77) {
                                    i85 = (int) (120.0F + 120.0F * (Medium.snap[0] / 100.0F));
                                    if (i85 > 255) {
                                        i85 = 255;
                                    }
                                    if (i85 < 0) {
                                        i85 = 0;
                                    }
                                    i86 = (int) (114.0F + 114.0F * (Medium.snap[1] / 100.0F));
                                    if (i86 > 255) {
                                        i86 = 255;
                                    }
                                    if (i86 < 0) {
                                        i86 = 0;
                                    }
                                    i81 = (int) (255.0F + 255.0F * (Medium.snap[2] / 100.0F));
                                    if (i81 > 255) {
                                        i81 = 255;
                                    }
                                    if (i81 < 0) {
                                        i81 = 0;
                                    }
                                } else {
                                    i85 = (int) (140.0F + 140.0F * (Medium.snap[0] / 100.0F));
                                    if (i85 > 255) {
                                        i85 = 255;
                                    }
                                    if (i85 < 0) {
                                        i85 = 0;
                                    }
                                    i86 = (int) (160.0F + 160.0F * (Medium.snap[1] / 100.0F));
                                    if (i86 > 255) {
                                        i86 = 255;
                                    }
                                    if (i86 < 0) {
                                        i86 = 0;
                                    }
                                    i81 = (int) (255.0F + 255.0F * (Medium.snap[2] / 100.0F));
                                    if (i81 > 255) {
                                        i81 = 255;
                                    }
                                    if (i81 < 0) {
                                        i81 = 0;
                                    }
                                }
                                rd.setColor(new Color(i85, i86, i81));
                                rd.drawRect(660, 57 + 30 * i75, 116, 27);
                            }
                            bool76 = true;
                        }
                }
            }
            if (udpmistro.go && udpmistro.runon == 1 && !holdit) {
                int i88 = 0;
                int i89 = 0;
                for (int i90 = 0; i90 < nplayers; i90++)
                    if (i90 != udpmistro.im) {
                        i89++;
                        if (udpmistro.lframe[i90] == udpmistro.lcframe[i90] || udpmistro.force[i90] == 7) {
                            i88++;
                        } else {
                            udpmistro.lcframe[i90] = udpmistro.lframe[i90];
                        }
                    }
                if (i88 == i89) {
                    discon++;
                } else if (discon != 0) {
                    discon = 0;
                }
                if (discon == 240) {
                    udpmistro.runon = 2;
                }
            }
        }
        if (i54 != -1) {
            final float[] fs = new float[3];
            Color.RGBtoHSB(Medium.cgrnd[0], Medium.cgrnd[1], Medium.cgrnd[2], fs);
            fs[1] -= 0.22;
            if (fs[1] < 0.0F) {
                fs[1] = 0.0F;
            }
            fs[2] += 0.22;
            if (fs[2] > 1.0F) {
                fs[2] = 1.0F;
            }
            final Color color = Color.getHSBColor(fs[0], fs[1], fs[2]);
            rd.setColor(color);
            rd.fillRect(676, 426 - i54 * 23, 109, 7);
            rd.setColor(new Color(0, 0, 0));
            rd.setFont(new Font("Tahoma", 1, 11));
            rd.drawString("Send Message  >", 684, 439 - i54 * 23);
            rd.setColor(new Color((int) (Medium.cgrnd[0] / 1.2F), (int) (Medium.cgrnd[1] / 1.2F), (int) (Medium.cgrnd[2] / 1.2F)));
            rd.drawRect(676, 426 - i54 * 23, 109, 17);
            if (!GameSparker.cmsg.isShowing()) {
                GameSparker.cmsg.setVisible(true);
                GameSparker.cmsg.requestFocus();
                lcmsg[i54] = "";
                GameSparker.cmsg.setText("");
                GameSparker.cmsg.setBackground(color);
            }
            GameSparker.movefield(GameSparker.cmsg, 34, 424 - i54 * 23, 633, 22);
            if (GameSparker.cmsg.getText().equals(lcmsg[i54])) {
                cntchatp[i54]++;
            } else {
                cntchatp[i54] = -200;
            }
            lcmsg[i54] = "" + GameSparker.cmsg.getText();
            if (cntchatp[i54] == 67) {
                control.chatup = 0;
            }
            if (GameSparker.cmsg.getText().length() > 100) {
                GameSparker.cmsg.setText(GameSparker.cmsg.getText().substring(0, 100));
                GameSparker.cmsg.select(100, 100);
            }
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
        }
    }

    static void musicomp(final int i, final Control control) {
        hipnoload(i, true);
        if (multion != 0) {
            forstart--;
            if (lan && im == 0) {
                forstart = 0;
            }
        }
        if (control.handb || control.enter || forstart == 0) {
            System.gc();
            Medium.trk = 0;
            Medium.crs = false;
            Medium.ih = 0;
            Medium.iw = 0;
            Medium.h = 450;
            Medium.w = 800;
            Medium.focusPoint = 400;
            Medium.cx = 400;
            Medium.cy = 225;
            Medium.cz = 50;
            rd.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
            rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
            if (multion == 0) {
                fase = 0;
            } else {
                fase = 7001;
                forstart = 0;
                if (!lan) {
                    try {
                        socket = new Socket(server, servport);
                        din = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        dout = new PrintWriter(socket.getOutputStream(), true);
                        runtyp = -101;
                        runner = new Thread(xt);
                        runner.start();
                    } catch (final Exception ignored) {

                    }
                }
            }
            if (ThreadLocalRandom.current().nextDouble() > ThreadLocalRandom.current().nextDouble()) {
                dudo = 250;
            } else {
                dudo = 428;
            }
            control.handb = false;
            control.enter = false;
        }
    }

    static public void nofocus() {
        rd.setColor(new Color(255, 255, 255));
        rd.fillRect(0, 0, 800, 20);
        rd.fillRect(0, 0, 20, 450);
        rd.fillRect(0, 430, 800, 20);
        rd.fillRect(780, 0, 20, 450);
        rd.setColor(new Color(192, 192, 192));
        rd.drawRect(20, 20, 760, 410);
        rd.setColor(new Color(0, 0, 0));
        rd.drawRect(22, 22, 756, 406);
        rd.setFont(new Font("Arial", 1, 11));
        ftm = rd.getFontMetrics();
        drawcs(14, "Game lost its focus.   Click screen with mouse to continue.", 100, 100, 100, 3);
        drawcs(445, "Game lost its focus.   Click screen with mouse to continue.", 100, 100, 100, 3);
    }

    static private boolean over(final Image image, final int i, final int i294, final int i295, final int i296) {
        final int i297 = image.getHeight(null);
        final int i298 = image.getWidth(null);
        return i > i295 - 5 && i < i295 + i298 + 5 && i294 > i296 - 5 && i294 < i296 + i297 + 5;
    }

    static private boolean overon(final int i, final int i289, final int i290, final int i291, final int i292, final int i293) {
        return i292 > i && i292 < i + i290 && i293 > i289 && i293 < i289 + i291;
    }

    static void pausedgame(final Control control) {
        if (!badmac) {
            rd.drawImage(fleximg, 0, 0, null);
        } else {
            rd.setColor(new Color(30, 67, 110));
            rd.fillRect(281, 8, 237, 188);
        }
        if (control.up) {
            opselect--;
            if (opselect == -1) {
                opselect = 3;
            }
            control.up = false;
        }
        if (control.down) {
            opselect++;
            if (opselect == 4) {
                opselect = 0;
            }
            control.down = false;
        }
        if (opselect == 0) {
            rd.setColor(new Color(64, 143, 223));
            rd.fillRoundRect(329, 45, 137, 22, 7, 20);
            if (shaded) {
                rd.setColor(new Color(225, 200, 255));
            } else {
                rd.setColor(new Color(0, 89, 223));
            }
            rd.drawRoundRect(329, 45, 137, 22, 7, 20);
        }
        if (opselect == 1) {
            rd.setColor(new Color(64, 143, 223));
            rd.fillRoundRect(320, 73, 155, 22, 7, 20);
            if (shaded) {
                rd.setColor(new Color(225, 200, 255));
            } else {
                rd.setColor(new Color(0, 89, 223));
            }
            rd.drawRoundRect(320, 73, 155, 22, 7, 20);
        }
        if (opselect == 2) {
            rd.setColor(new Color(64, 143, 223));
            rd.fillRoundRect(303, 99, 190, 22, 7, 20);
            if (shaded) {
                rd.setColor(new Color(225, 200, 255));
            } else {
                rd.setColor(new Color(0, 89, 223));
            }
            rd.drawRoundRect(303, 99, 190, 22, 7, 20);
        }
        if (opselect == 3) {
            rd.setColor(new Color(64, 143, 223));
            rd.fillRoundRect(341, 125, 109, 22, 7, 20);
            if (shaded) {
                rd.setColor(new Color(225, 200, 255));
            } else {
                rd.setColor(new Color(0, 89, 223));
            }
            rd.drawRoundRect(341, 125, 109, 22, 7, 20);
        }
        rd.drawImage(paused, 281, 8, null);
        if (control.enter || control.handb) {
            if (opselect == 0) {
                if (loadedt && !mutem) {
                    strack.setPaused(false);
                }
                fase = 0;
            }
            if (opselect == 1)
                if (Record.caught >= 300) {
                    if (loadedt && !mutem) {
                        strack.setPaused(false);
                    }
                    fase = -1;
                } else {
                    fase = -8;
                }
            if (opselect == 2) {
                if (loadedt) {
                    strack.setPaused(true);
                }
                oldfase = -7;
                fase = 11;
            }
            if (opselect == 3) {
                if (loadedt) {
                    strack.unload();
                }
                fase = 102;
                if (gmode == 0) {
                    opselect = 3;
                }
                //if (gmode == 1)
                //	opselect = 0;
                if (gmode == 2) {
                    opselect = 1;
                }
                rd.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
                rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            }
            control.enter = false;
            control.handb = false;
        }
    }

    static void pauseimage(final Image image) {
        if (!badmac) {
            final int[] is = new int[360000];
            final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, 800, 450, is, 0, 800);
            try {
                pixelgrabber.grabPixels();
            } catch (final InterruptedException ignored) {

            }
            int i = 0;
            int i343 = 0;
            int i344 = 0;
            int i345 = 0;
            for (int i346 = 0; i346 < 360000; i346++) {
                final Color color = new Color(is[i346]);
                int i347;
                if (i345 == 0) {
                    i347 = (color.getRed() + color.getGreen() + color.getBlue()) / 3;
                    i344 = i347;
                } else {
                    i347 = (color.getRed() + color.getGreen() + color.getBlue() + i344 * 30) / 33;
                    i344 = i347;
                }
                if (++i345 == 800) {
                    i345 = 0;
                }
                if (i346 > 800 * (8 + i343) + 281 && i343 < 188) {
                    final int i348 = (i347 + 60) / 3;
                    final int i349 = (i347 + 135) / 3;
                    final int i350 = (i347 + 220) / 3;
                    if (++i == 237) {
                        i343++;
                        i = 0;
                    }
                    final Color color351 = new Color(i348, i349, i350);
                    is[i346] = color351.getRGB();
                } else {
                    final Color color352 = new Color(i347, i347, i347);
                    is[i346] = color352.getRGB();
                }
            }
            fleximg = xt.createImage(new MemoryImageSource(800, 450, is, 0, 800));
            rd.drawImage(fleximg, 0, 0, null);
        } else {
            rd.setColor(new Color(0, 0, 0));
            rd.setComposite(AlphaComposite.getInstance(3, 0.5F));
            rd.fillRect(0, 0, 800, 450);
            rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        }
    }

    static private void pingstat() {
        final int i = (int) (100.0 * ThreadLocalRandom.current().nextDouble());
        try {
            final URL url = new URL("http://c.statcounter.com/9994681/0/14bb645e/1/?reco=" + i + "");
            url.openConnection().setConnectTimeout(5000);
            final Image image = Toolkit.getDefaultToolkit().createImage(url);
            final MediaTracker mediatracker = new MediaTracker(app);
            mediatracker.addImage(image, 0);
            mediatracker.waitForID(0);
            mediatracker.removeImage(image, 0);
        } catch (final Exception ignored) {

        }
    }

    static void playsounds(int im, final Mad mad, final Control control, final ContO player, final ContO conto) {
        SoundClip.source = conto;
        SoundClip.player = player;
        
        if ((fase == 0 || fase == 7001) && starcnt < 35 && cntwis[im] != 8 && !mutes) {
            boolean bool = control.up && mad.speed > 0.0F || control.down && mad.speed < 10.0F;
            boolean bool257 = mad.skid == 1 && control.handb || Math.abs(mad.scz[0] - (mad.scz[1] + mad.scz[0] + mad.scz[2] + mad.scz[3]) / 4.0F) > 1.0F || Math.abs(mad.scx[0] - (mad.scx[1] + mad.scx[0] + mad.scx[2] + mad.scx[3]) / 4.0F) > 1.0F;
            boolean bool258 = false;
            if (control.up && mad.speed < 10.0F) {
                bool257 = true;
                bool = true;
                bool258 = true;
            }
            if (bool && mad.mtouch) {
                if (!mad.capsized) {
                    if (!bool257) {
                        if (mad.power != 98.0F) {
                            if (Math.abs(mad.speed) > 0.0F && Math.abs(mad.speed) <= CarDefine.swits[mad.cn][0]) {
                                int i259 = (int) (3.0F * Math.abs(mad.speed) / CarDefine.swits[mad.cn][0]);
                                if (i259 == 2) {
                                    if (pwait[im] == 0) {
                                        i259 = 0;
                                    } else {
                                        pwait[im]--;
                                    }
                                } else {
                                    pwait[im] = 7;
                                }
                                sparkeng(i259, mad.cn);
                            }
                            if (Math.abs(mad.speed) > CarDefine.swits[mad.cn][0] && Math.abs(mad.speed) <= CarDefine.swits[mad.cn][1]) {
                                int i260 = (int) (3.0F * (Math.abs(mad.speed) - CarDefine.swits[mad.cn][0]) / (CarDefine.swits[mad.cn][1] - CarDefine.swits[mad.cn][0]));
                                if (i260 == 2) {
                                    if (pwait[im] == 0) {
                                        i260 = 0;
                                    } else {
                                        pwait[im]--;
                                    }
                                } else {
                                    pwait[im] = 7;
                                }
                                sparkeng(i260, mad.cn);
                            }
                            if (Math.abs(mad.speed) > CarDefine.swits[mad.cn][1] && Math.abs(mad.speed) <= CarDefine.swits[mad.cn][2]) {
                                final int i261 = (int) (3.0F * (Math.abs(mad.speed) - CarDefine.swits[mad.cn][1]) / (CarDefine.swits[mad.cn][2] - CarDefine.swits[mad.cn][1]));
                                sparkeng(i261, mad.cn);
                            }
                        } else {
                            int i262 = 2;
                            if (pwait[im] == 0) {
                                if (Math.abs(mad.speed) > CarDefine.swits[mad.cn][1]) {
                                    i262 = 3;
                                }
                            } else {
                                pwait[im]--;
                            }
                            sparkeng(i262, mad.cn);
                        }
                    } else {
                        sparkeng(-1, mad.cn);
                        if (bool258) {
                            if (stopcnt[im] <= 0) {
                                air[5].loop();
                                stopcnt[im] = 10;
                            }
                        } else if (stopcnt[im] <= -2) {
                            air[2 + (int) (Medium.random() * 3.0F)].loop();
                            stopcnt[im] = 7;
                        }
                    }
                } else {
                    sparkeng(3, mad.cn);
                }
                grrd[im] = false;
                aird [im]= false;
            } else {
                pwait[im] = 15;
                if (!mad.mtouch && !grrd[im] && Medium.random() > 0.4) {
                    air[(int) (Medium.random() * 4.0F)].loop();
                    stopcnt[im] = 5;
                    grrd [im]= true;
                }
                if (!mad.wtouch && !aird[im]) {
                    stopairs();
                    air[(int) (Medium.random() * 4.0F)].loop();
                    stopcnt[im] = 10;
                    aird [im]= true;
                }
                sparkeng(-1, mad.cn);
            }
            if (mad.cntdest != 0 && cntwis[im] < 7) {
                if (!pwastd[im]) {
                    wastd.loop();
                    pwastd[im] = true;
                }
            } else {
                if (pwastd[im]) {
                    wastd.stop();
                    pwastd[im] = false;
                }
                if (cntwis[im] == 7 && !mutes) {
                    firewasted.play();
                }
            }
        } else {
            sparkeng(-2, mad.cn);
            if (pwastd[im]) {
                wastd.stop();
                pwastd [im]= false;
            }
        }
        if (stopcnt[im] != -20) {
            if (stopcnt[im] == 1) {
                stopairs();
            }
            stopcnt[im]--;
        }
        if (bfcrash[im] != 0) {
            bfcrash[im]--;
        }
        if (bfscrape[im] != 0) {
            bfscrape[im]--;
        }
        if (bfsc1[im] != 0) {
            bfsc1[im]--;
        }
        if (bfsc2[im] != 0) {
            bfsc2[im]--;
        }
        if (bfskid[im] != 0) {
            bfskid[im]--;
        }
        if (mad.newcar) {
            cntwis[im] = 0;
        }
        if (fase == 0 || fase == 7001 || fase == 6 || fase == -1 || fase == -2 || fase == -3 || fase == -4 || fase == -5) {
            if (mutes != control.mutes) {
                mutes = control.mutes;
            }
            if (control.mutem != mutem) {
                mutem = control.mutem;
                if (mutem) {
                    if (loadedt) {
                        strack.setPaused(true);
                    }
                } else if (loadedt) {
                    strack.setPaused(false);
                }
            }
        }
        if (mad.cntdest != 0 && cntwis[im] < 7) {
            if (mad.dest) {
                cntwis[im]++;
            }
        } else {
            if (mad.cntdest == 0) {
                cntwis[im] = 0;
            }
            if (cntwis[im] == 7) {
                cntwis[im] = 8;
            }
        }
        if (GameSparker.applejava) {
            closesounds();
        }
    }

    static private Image pressed(final Image image) {
        final int i = image.getHeight(null);
        final int i337 = image.getWidth(null);
        final int[] is = new int[i337 * i];
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, i337, i, is, 0, i337);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        for (int i338 = 0; i338 < i337 * i; i338++)
            if (is[i338] != is[i337 * i - 1]) {
                is[i338] = -16777216;
            }
        return xt.createImage(new MemoryImageSource(i337, i, is, 0, i337));
    }

    static private int py(final int i, final int i281, final int i282, final int i283) {
        return (i - i281) * (i - i281) + (i282 - i283) * (i282 - i283);
    }

    static private float pys(final int i, final int i284, final int i285, final int i286) {
        return (float) Math.sqrt((i - i284) * (i - i284) + (i285 - i286) * (i285 - i286));
    }

    static void rad(final int i) {
        if (i == 0) {
            powerup.play();
            radpx = 212;
            pin = 0;
        }
        trackbg(false);
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(65, 135, 670, 59);
        if (pin != 0) {
            rd.drawImage(radicalplay, radpx + (int) (8.0 * ThreadLocalRandom.current().nextDouble() - 4.0), 135, null);
        } else {
            rd.drawImage(radicalplay, 212, 135, null);
        }
        if (radpx != 212) {
            radpx += 40;
            if (radpx > 735) {
                radpx = -388;
            }
        } else if (pin != 0) {
            pin--;
        }
        if (i == 40) {
            radpx = 213;
            pin = 7;
        }
        if (radpx == 212) {
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            drawcs(185 + (int) (5.0F * Medium.random()), "Radicalplay.com", 112, 120, 143, 3);
        }
        rd.setFont(new Font("Arial", 1, 11));
        ftm = rd.getFontMetrics();
        if (aflk) {
            drawcs(215, "And we are never going to find the new unless we get a little crazy...", 112, 120, 143, 3);
            aflk = false;
        } else {
            drawcs(217, "And we are never going to find the new unless we get a little crazy...", 150, 150, 150, 3);
            aflk = true;
        }
        rd.drawImage(rpro, 275, 265, null);
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(0, 0, 65, 450);
        rd.fillRect(735, 0, 65, 450);
        rd.fillRect(65, 0, 670, 25);
        rd.fillRect(65, 425, 670, 25);
    }

    static private void radarstat(final Mad mad, final ContO conto) {
        rd.setComposite(AlphaComposite.getInstance(3, 0.5F));
        rd.setColor(new Color(Medium.csky[0], Medium.csky[1], Medium.csky[2]));
        rd.fillRoundRect(10, 55, 172, 172, 30, 30);
        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
        rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        rd.setColor(new Color(Medium.csky[0] / 2, Medium.csky[1] / 2, Medium.csky[2] / 2));
        for (int i = 0; i < CheckPoints.n; i++) {
            int i241 = i + 1;
            if (i == CheckPoints.n - 1) {
                i241 = 0;
            }
            boolean bool = false;
            if (CheckPoints.typ[i241] == -3) {
                i241 = 0;
                bool = true;
            }
            final int[] is = {
                    (int) (96.0F - (CheckPoints.opx[im] - CheckPoints.x[i]) / CheckPoints.prox),
                    (int) (96.0F - (CheckPoints.opx[im] - CheckPoints.x[i241]) / CheckPoints.prox)
            };
            final int[] is242 = {
                    (int) (141.0F - (CheckPoints.z[i] - CheckPoints.opz[im]) / CheckPoints.prox),
                    (int) (141.0F - (CheckPoints.z[i241] - CheckPoints.opz[im]) / CheckPoints.prox)
            };
            rot(is, is242, 96, 141, mad.cxz, 2);
            rd.drawLine(is[0], is242[0], is[1], is242[1]);
            if (bool) {
                break;
            }
        }
        if (arrace || multion > 1) {
            final int[] is = new int[nplayers];
            final int[] is245 = new int[nplayers];
            for (int i = 0; i < nplayers; i++) {
                is[i] = (int) (96.0F - (CheckPoints.opx[im] - CheckPoints.opx[i]) / CheckPoints.prox);
                is245[i] = (int) (141.0F - (CheckPoints.opz[i] - CheckPoints.opz[im]) / CheckPoints.prox);
            }
            rot(is, is245, 96, 141, mad.cxz, nplayers);
            int i = 0;
            int i246 = (int) (80.0F + 80.0F * (Medium.snap[1] / 100.0F));
            if (i246 > 255) {
                i246 = 255;
            }
            if (i246 < 0) {
                i246 = 0;
            }
            int i247 = (int) (159.0F + 159.0F * (Medium.snap[2] / 100.0F));
            if (i247 > 255) {
                i247 = 255;
            }
            if (i247 < 0) {
                i247 = 0;
            }
            for (int i248 = 0; i248 < nplayers; i248++)
                if (i248 != im && CheckPoints.dested[i248] == 0) {
                    if (clangame != 0) {
                        if (pclan[i248].equalsIgnoreCase(gaclan)) {
                            i = 159;
                            i246 = 80;
                            i247 = 0;
                        } else {
                            i = 0;
                            i246 = 80;
                            i247 = 159;
                        }
                        i += i * (Medium.snap[0] / 100.0F);
                        if (i > 255) {
                            i = 255;
                        }
                        if (i < 0) {
                            i = 0;
                        }
                        i246 += i246 * (Medium.snap[1] / 100.0F);
                        if (i246 > 255) {
                            i246 = 255;
                        }
                        if (i246 < 0) {
                            i246 = 0;
                        }
                        i247 += i247 * (Medium.snap[2] / 100.0F);
                        if (i247 > 255) {
                            i247 = 255;
                        }
                        if (i247 < 0) {
                            i247 = 0;
                        }
                    }
                    int i249 = 2;
                    if (alocked == i248) {
                        i249 = 3;
                        rd.setColor(new Color(i, i246, i247));
                    } else {
                        rd.setColor(new Color((i + Medium.csky[0]) / 2, (Medium.csky[1] + i246) / 2, (i247 + Medium.csky[2]) / 2));
                    }
                    rd.drawLine(is[i248] - i249, is245[i248], is[i248] + i249, is245[i248]);
                    rd.drawLine(is[i248], is245[i248] + i249, is[i248], is245[i248] - i249);
                    rd.setColor(new Color(i, i246, i247));
                    rd.fillRect(is[i248] - 1, is245[i248] - 1, 3, 3);
                }
        }
        int i = (int) (159.0F + 159.0F * (Medium.snap[0] / 100.0F));
        if (i > 255) {
            i = 255;
        }
        if (i < 0) {
            i = 0;
        }
        int i250 = 0;
        int i251 = 0;
        if (clangame != 0) {
            if (pclan[im].equalsIgnoreCase(gaclan)) {
                i = 159;
                i250 = 80;
                i251 = 0;
            } else {
                i = 0;
                i250 = 80;
                i251 = 159;
            }
            i += i * (Medium.snap[0] / 100.0F);
            if (i > 255) {
                i = 255;
            }
            if (i < 0) {
                i = 0;
            }
            i250 += i250 * (Medium.snap[1] / 100.0F);
            if (i250 > 255) {
                i250 = 255;
            }
            if (i250 < 0) {
                i250 = 0;
            }
            i251 += i251 * (Medium.snap[2] / 100.0F);
            if (i251 > 255) {
                i251 = 255;
            }
            if (i251 < 0) {
                i251 = 0;
            }
        }
        rd.setColor(new Color((i + Medium.csky[0]) / 2, (Medium.csky[1] + i250) / 2, (i251 + Medium.csky[2]) / 2));
        rd.drawLine(96, 139, 96, 143);
        rd.drawLine(94, 141, 98, 141);
        rd.setColor(new Color(i, i250, i251));
        rd.fillRect(95, 140, 3, 3);
        rd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        if (Medium.darksky) {
            Color color = new Color(Medium.csky[0], Medium.csky[1], Medium.csky[2]);
            final float[] fs = new float[3];
            Color.RGBtoHSB(Medium.csky[0], Medium.csky[1], Medium.csky[2], fs);
            fs[2] = 0.6F;
            color = Color.getHSBColor(fs[0], fs[1], fs[2]);
            rd.setColor(color);
            rd.fillRect(5, 232, 181, 17);
            rd.drawLine(4, 233, 4, 247);
            rd.drawLine(3, 235, 3, 245);
            rd.drawLine(186, 233, 186, 247);
            rd.drawLine(187, 235, 187, 245);
        }
        rd.drawImage(sped, 7, 234, null);
        final int i252 = conto.x - lcarx;
        lcarx = conto.x;
        final int i254 = conto.z - lcarz;
        lcarz = conto.z;
        final float f = (float) Math.sqrt(i252 * i252 + i254 * i254);
        final float f255 = f * 1.4F * 21.0F * 60.0F * 60.0F / 100000.0F;
        final float f256 = f255 * 0.621371F;
        rd.setColor(new Color(0, 0, 100));
        rd.drawString("" + (int) f255, 62, 245);
        rd.drawString("" + (int) f256, 132, 245);
    }

    static void replyn() {
        if (aflk) {
            drawcs(30, "Replay  > ", 0, 0, 0, 0);
            aflk = false;
        } else {
            drawcs(30, "Replay  >>", 0, 128, 255, 0);
            aflk = true;
        }
    }

    static void resetstat(final int i) {
        arrace = false;
        alocked = -1;
        lalocked = -1;
        cntflock = 90;
        onlock = false;
        ana = 0;
        cntan = 0;
        cntovn = 0;
        tcnt = 30;
        wasay = false;
        clear = 0;
        dmcnt = 0;
        pwcnt = 0;
        auscnt = 45;
        pnext = 0;
        pback = 0;
        starcnt = 130;
        gocnt = 3;
        for (int im = 0; im < 8; im++) {
            grrd[im] = true;
            aird[im] = true;
            bfcrash[im] = 0;
            bfscrape[im] = 0;
            cntwis[im] = 0;
            bfskid[im] = 0;
            pwait[im] = 7;
        }
        forstart = 200;
        exitm = 0;
        holdcnt = 0;
        holdit = false;
        winner = false;
        for (int i20 = 0; i20 < 8; i20++) {
            dested[i20] = 0;
            isbot[i20] = false;
            dcrashes[i20] = 0;
        }
        runtyp = 0;
        discon = 0;
        dnload = 0;
        beststunt = 0;
        laptime = 0;
        fastestlap = 0;
        sendstat = 0;
        if (fase == 2 || fase == -22) {
            sortcars(i);
        }
        if (fase == 22) {
            for (int i21 = 0; i21 < 2; i21++) {
                for (int i22 = 0; i22 < 7; i22++) {
                    cnames[i21][i22] = "";
                    sentn[i21][i22] = "";
                }
                if (i21 == 0) {
                    cnames[i21][6] = "Game Chat  ";
                } else {
                    cnames[i21][6] = "" + clan + "'s Chat  ";
                }
                updatec[i21] = -1;
                movepos[i21] = 0;
                pointc[i21] = 6;
                floater[i21] = 0;
                cntchatp[i21] = 0;
                msgflk[i21] = 0;
                lcmsg[i21] = "";
            }
            if (multion == 3) {
                ransay = 4;
            } else if (ransay == 0) {
                ransay = 1 + (int) (ThreadLocalRandom.current().nextDouble() * 3.0);
            } else {
                ransay++;
                if (ransay > 3) {
                    ransay = 1;
                }
            }
        }
    }

    static private void rot(final int[] is, final int[] is272, final int i, final int i273, final int i274, final int i275) {
        if (i274 != 0) {
            for (int i276 = 0; i276 < i275; i276++) {
                final int i277 = is[i276];
                final int i278 = is272[i276];
                is[i276] = i + (int) ((i277 - i) * Medium.cos(i274) - (i278 - i273) * Medium.sin(i274));
                is272[i276] = i273 + (int) ((i277 - i) * Medium.sin(i274) + (i278 - i273) * Medium.cos(i274));
            }
        }
    }

    @Override
    public void run() {
        if (!Thread.currentThread().isInterrupted()) {
            boolean bool = false;
            while (runtyp > 0) {
                if (runtyp >= 1 && runtyp <= 140) {
                    hipnoload(runtyp, false);
                }
                //if (runtyp == 176) {
                //    loading();
                //    bool = true;
                //}
                //app.repaint();
                try {
                    if (runner != null) {

                    }
                    Thread.sleep(20L);
                } catch (final InterruptedException ignored) {

                }
            }
            if (bool) {
                pingstat();
            }
            final boolean[] bools = {
                    true, true
            };
            while ((runtyp == -101 || sendstat == 1) && !lan) {
                String string = "3|" + playingame + "|" + updatec[0] + "|";
                if (clanchat) {
                    string = "" + string + "" + updatec[1] + "|" + clan + "|" + clankey + "|";
                } else {
                    string = "" + string + "0|||";
                }
                if (updatec[0] <= -11) {
                    for (int i = 0; i < -updatec[0] - 10; i++) {
                        string = "" + string + "" + cnames[0][6 - i] + "|" + sentn[0][6 - i] + "|";
                    }
                    updatec[0] = -2;
                }
                if (clanchat && updatec[1] <= -11) {
                    for (int i = 0; i < -updatec[1] - 10; i++) {
                        string = "" + string + "" + cnames[1][6 - i] + "|" + sentn[1][6 - i] + "|";
                    }
                    updatec[1] = -2;
                }
                if (sendstat == 1) {
                    string = "5|" + playingame + "|" + im + "|" + beststunt + "|" + fastestlap + "|";
                    for (int i = 0; i < nplayers; i++) {
                        string = "" + string + "" + dcrashes[i] + "|";
                    }
                    sendstat = 2;
                }
                boolean bool13 = false;
                String string14 = "";
                try {
                    dout.println(string);
                    string14 = din.readLine();
                    if (string14 == null) {
                        bool13 = true;
                    }
                } catch (final Exception exception) {
                    bool13 = true;
                }
                if (bool13) {
                    try {
                        socket.close();
                        socket = null;
                        din.close();
                        din = null;
                        dout.close();
                        dout = null;
                    } catch (final Exception ignored) {

                    }
                    try {
                        socket = new Socket(server, servport);
                        din = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        dout = new PrintWriter(socket.getOutputStream(), true);
                        dout.println(string);
                        string14 = din.readLine();
                        if (string14 != null) {
                            bool13 = false;
                        }
                    } catch (final Exception ignored) {

                    }
                }
                if (bool13) {
                    try {
                        socket.close();
                        socket = null;
                    } catch (final Exception ignored) {

                    }
                    runtyp = 0;
                    if (GameSparker.cmsg.isShowing()) {
                        GameSparker.cmsg.setVisible(false);
                        app.requestFocus();
                    }
                    runner.interrupt();
                    runner = null;
                }
                if (sendstat != 2) {
                    int i = 2;
                    int i15 = 1;
                    if (clanchat) {
                        i15 = 2;
                    }
                    for (int i16 = 0; i16 < i15; i16++) {
                        final int i17 = getvalue(string14, i16);
                        if (updatec[i16] != i17 && updatec[i16] >= -2 && pointc[i16] == 6) {
                            for (int i18 = 0; i18 < 7; i18++) {
                                cnames[i16][i18] = getSvalue(string14, i);
                                i++;
                                sentn[i16][i18] = getSvalue(string14, i);
                                i++;
                            }
                            if (cnames[i16][6].equals(""))
                                if (i16 == 0) {
                                    cnames[i16][6] = "Game Chat  ";
                                } else {
                                    cnames[i16][6] = "" + clan + "'s Chat  ";
                                }
                            if (updatec[i16] != -2) {
                                floater[i16] = 1;
                                if (bools[i16]) {
                                    msgflk[i16] = 67;
                                    bools[i16] = false;
                                } else {
                                    msgflk[i16] = 110;
                                }
                            }
                            updatec[i16] = i17;
                        }
                    }
                } else {
                    sendstat = 3;
                }
                try {
                    if (runner != null) {

                    }
                    Thread.sleep(1000L);
                } catch (final InterruptedException ignored) {

                }
            }
            if (runtyp == -167 || runtyp == -168) {
                try {
                    socket = new Socket("multiplayer.needformadness.com", 7061);
                    din = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    dout = new PrintWriter(socket.getOutputStream(), true);
                    dout.println("101|" + (runtyp + 174) + "|" + GameSparker.tnick.getText() + "|" + GameSparker.tpass.getText() + "|");
                    din.readLine();
                    socket.close();
                    socket = null;
                    din.close();
                    din = null;
                    dout.close();
                    dout = null;
                } catch (final Exception ignored) {

                }
                runtyp = 0;
            }
            if (runtyp == -166 || runtyp == -167 || runtyp == -168) {
                pingstat();
            }
        }
    }

    static void scrape(int im, final int i, final int i266, final int i267) {
        if (bfscrape[im] == 0 && Math.sqrt(i * i + i266 * i266 + i267 * i267) / 10.0 > 10.0) {
            int i268 = 0;
            if (Medium.random() > Medium.random()) {
                i268 = 1;
            }
            if (i268 == 0) {
                sturn1 = 0;
                sturn0++;
                if (sturn0 == 3) {
                    i268 = 1;
                    sturn1 = 1;
                    sturn0 = 0;
                }
            } else {
                sturn0 = 0;
                sturn1++;
                if (sturn1 == 3) {
                    i268 = 0;
                    sturn0 = 1;
                    sturn1 = 0;
                }
            }
            if (!mutes) {
                scrape[i268].play();
            }
            bfscrape[im] = 5;
        }
    }

    static void sendwin() {
        if (logged && multion == 1 && winner) {
            if (CheckPoints.wasted == nplayers - 1) {
                runtyp = -167;
            } else {
                runtyp = -168;
            }
        } else {
            runtyp = -166;
        }
        runner = new Thread(xt);
        runner.start();
    }

    static void setbots(final boolean[] bools) {
        for (int i = 0; i < nplayers; i++)
            if (plnames[i].contains("MadBot")) {
                bools[i] = true;
                isbot[i] = true;
            }
    }

    static void skid(int im, final int i, final float f) {
        if (bfcrash[im] == 0 && bfskid[im] == 0 && f > 150.0F) {
            if (i == 0) {
                if (!mutes) {
                    skid[skflg].play();
                }
                if (skidup) {
                    skflg++;
                } else {
                    skflg--;
                }
                if (skflg == 3) {
                    skflg = 0;
                }
                if (skflg == -1) {
                    skflg = 2;
                }
            } else {
                if (!mutes) {
                    dustskid[dskflg].play();
                }
                if (skidup) {
                    dskflg++;
                } else {
                    dskflg--;
                }
                if (dskflg == 3) {
                    dskflg = 0;
                }
                if (dskflg == -1) {
                    dskflg = 2;
                }
            }
            bfskid[im] = 35;
        }
    }

    static private void smokeypix(final byte[] is, final MediaTracker mediatracker, final Toolkit toolkit) {
        final Image image = toolkit.createImage(is);
        mediatracker.addImage(image, 0);
        try {
            mediatracker.waitForID(0);
        } catch (final Exception ignored) {

        }
        final PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, 466, 202, smokey, 0, 466);
        try {
            pixelgrabber.grabPixels();
        } catch (final InterruptedException ignored) {

        }
        for (int i = 0; i < 94132; i++)
            if (smokey[i] != smokey[0]) {
                final Color color = new Color(smokey[i]);
                final float[] fs = new float[3];
                Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), fs);
                fs[0] = 0.11F;
                fs[1] = 0.45F;
                final Color color385 = Color.getHSBColor(fs[0], fs[1], fs[2]);
                smokey[i] = color385.getRGB();
            }
    }

    static void snap(final int i) {
        dmg = loadsnap(odmg);
        pwr = loadsnap(opwr);
        was = loadsnap(owas);
        lap = loadsnap(olap);
        pos = loadsnap(opos);
        sped = loadsnap(osped);
        for (int i287 = 0; i287 < 8; i287++) {
            rank[i287] = loadsnap(orank[i287]);
        }
        for (int i288 = 0; i288 < 4; i288++) {
            cntdn[i288] = loadsnap(ocntdn[i288]);
        }
        if (multion != 0) {
            wgame = loadsnap(owgame);
            exitgame = loadsnap(oexitgame);
            gamefinished = loadsnap(ogamefinished);
            disco = loadsnap(odisco);
        }
        yourwasted = loadsnap(oyourwasted);
        youlost = loadsnap(oyoulost);
        youwon = loadsnap(oyouwon);
        youwastedem = loadsnap(oyouwastedem);
        gameh = loadsnap(ogameh);
        loadingmusic = loadopsnap(oloadingmusic, i, 76);
        star[0] = loadopsnap(ostar[0], i, 0);
        star[1] = loadopsnap(ostar[1], i, 0);
        flaot = loadopsnap(oflaot, i, 1);
    }

    static private void sortcars(final int i) {
        if (i != 0) {
            int lastcar = nplayers;

            // get boss car if player is not in the mad party, since that one has no boss car (you play as dr monstaa)
            if (sc[0] != 7 + (i + 1) / 2 && i != nTracks) {
                sc[6] = 7 + (i + 1) / 2;
                if (sc[6] >= nCars) {
                    sc[6] = nCars - 1; // you could put -= 5 or something here
                }
                lastcar--; //boss car won't be randomized
            }

            // DEBUG: Prints the range of possible cars to the console
            //System.out.println("Minimum car: " + stat.names[(i - 1) / 2] + ", maximum car: " + stat.names[nplayers + ((i - 1) / 2)] + ", therefore: " + (((i - 1) / 2) - (nplayers + ((i - 1) / 2))) + " car difference");

            // create a list of car ids, each item completely unique
            final ArrayList<Integer> list = new ArrayList<>();
            for (int k = (i - 1) / 2; k < nplayers + (i - 1) / 2; k++) {
                if (k == sc[0]) {
                    continue;
                }
                list.add(k);
            }

            // randomize the order of this list (shuffle it like a deck of cards)
            Collections.shuffle(list);

            // which item of the list should be picked
            int k = 0;

            for (int j = 1; j < lastcar; j++) {

                // get an item from the "deck" - this can be any item as long as it's unique
                sc[j] = list.get(k);
                k++;

                // if there are more cars than tracks, reduce the car index number until it fits.
                // unfortunately i have no idea how to make this work properly so we'll just have to ignore the duplicates here
                while (sc[j] >= nCars) {
                    System.out.println("Car " + j + " is out of bounds");
                    sc[j] -= ThreadLocalRandom.current().nextDouble() * 5F;
                }
                System.out.println("sc of " + j + " is " + sc[j]);
            }
        }
        // this error will never be thrown in a deployment environment
        // it is only here for extra safety
        for (int j = 0; j < nplayers; j++) {
            if (sc[j] > nCars)
                throw new Error("there are too many tracks and not enough cars");
        }
    }

    static private void sparkeng(int i, final int i263) {
        if (lcn != i263) {
            for (int i264 = 0; i264 < 5; i264++)
                if (pengs[i264]) {
                    engs[CarDefine.enginsignature[lcn]][i264].stop();
                    pengs[i264] = false;
                }
            lcn = i263;
        }
        i++;
        for (int i265 = 0; i265 < 5; i265++)
            if (i == i265) {
                if (!pengs[i265]) {
                    engs[CarDefine.enginsignature[i263]][i265].loop();
                    pengs[i265] = true;
                }
            } else if (pengs[i265]) {
                engs[CarDefine.enginsignature[i263]][i265].stop();
                pengs[i265] = false;
            }
    }

    static void stageselect(final Control control, final int i, final int i39, final boolean bool) {
        rd.drawImage(br, 65, 25, null);
        rd.drawImage(select, 338, 35, null);
        if (testdrive != 3 && testdrive != 4) {
            if (CheckPoints.stage > 0 && CarDefine.staction == 0) {
                if (CheckPoints.stage != 1 && CheckPoints.stage != 11) {
                    rd.drawImage(back[pback], 115, 135, null);
                }
                if (CheckPoints.stage != nTracks) {
                    rd.drawImage(next[pnext], 625, 135, null);
                }
            }
            if (gmode == 0) {
                boolean bool40 = false;
                int i41 = 0;
                if (nfmtab != GameSparker.sgame.getSelectedIndex()) {
                    nfmtab = GameSparker.sgame.getSelectedIndex();
                    //app.snfm1.select(0);
                    //app.snfm2.select(0);
                    GameSparker.mstgs.select(0);
                    app.requestFocus();
                    bool40 = true;
                }
                if (CarDefine.staction == 5) {
                    if (lfrom == 0) {
                        CarDefine.staction = 0;
                        removeds = 1;
                        bool40 = true;
                    } else {
                        CarDefine.onstage = CheckPoints.name;
                        CarDefine.staction = 2;
                        dnload = 2;
                    }
                    nickname = GameSparker.tnick.getText();
                    backlog = nickname;
                    nickey = CarDefine.tnickey;
                    clan = CarDefine.tclan;
                    clankey = CarDefine.tclankey;
                    GameSparker.setloggedcookie();
                    logged = true;
                    gotlog = true;
                    if (CarDefine.reco == 0) {
                        acexp = 0;
                    }
                    if (CarDefine.reco > 10) {
                        acexp = CarDefine.reco - 10;
                    }
                    if (CarDefine.reco == 3) {
                        acexp = -1;
                    }
                    if (CarDefine.reco == 111)
                        if (!backlog.equalsIgnoreCase(nickname)) {
                            acexp = -3;
                        } else {
                            acexp = 0;
                        }
                }
                if (nfmtab == 2 && CarDefine.staction == 0 && removeds == 1) {
                    CheckPoints.stage = -3;
                }
                if (GameSparker.openm && CarDefine.staction == 3) {
                    GameSparker.tnick.setVisible(false);
                    GameSparker.tpass.setVisible(false);
                    CarDefine.staction = 0;
                }
                int i42 = 0;
                GameSparker.sgame.setSize(131);
                //if (app.sgame.getSelectedIndex() == 0)
                //	i42 = 400 - (app.sgame.getWidth() + 6 + app.snfm1.getWidth()) / 2;
                //if (app.sgame.getSelectedIndex() == 1)
                //	i42 = 400 - (app.sgame.getWidth() + 6 + app.snfm2.getWidth()) / 2;
                if (GameSparker.sgame.getSelectedIndex() == 2) {
                    GameSparker.mstgs.setSize(338);
                    if (bool40)
                        if (logged) {
                            if (CarDefine.msloaded != 1) {
                                GameSparker.mstgs.removeAll();
                                GameSparker.mstgs.add(rd, "Loading your stages now, please wait...");
                                GameSparker.mstgs.select(0);
                                i41 = 1;
                            }
                        } else {
                            GameSparker.mstgs.removeAll();
                            GameSparker.mstgs.add(rd, "Please login first to load your stages...");
                            GameSparker.mstgs.select(0);
                            CarDefine.msloaded = 0;
                            lfrom = 0;
                            CarDefine.staction = 3;
                            showtf = false;
                            tcnt = 0;
                            cntflock = 0;
                            CarDefine.reco = -2;
                        }
                    i42 = 400 - (GameSparker.sgame.getWidth() + 6 + GameSparker.mstgs.getWidth()) / 2;
                }
                if (GameSparker.sgame.getSelectedIndex() == 3) {
                    GameSparker.mstgs.setSize(338);
                    if (bool40 && CarDefine.msloaded != 3) {
                        GameSparker.mstgs.removeAll();
                        GameSparker.mstgs.add(rd, "Loading Top20 list, please wait...");
                        GameSparker.mstgs.select(0);
                        i41 = 3;
                    }
                    i42 = 400 - (GameSparker.sgame.getWidth() + 6 + GameSparker.mstgs.getWidth()) / 2;
                }
                if (GameSparker.sgame.getSelectedIndex() == 4) {
                    GameSparker.mstgs.setSize(338);
                    if (bool40 && CarDefine.msloaded != 4) {
                        GameSparker.mstgs.removeAll();
                        GameSparker.mstgs.add(rd, "Loading Top20 list, please wait...");
                        GameSparker.mstgs.select(0);
                        i41 = 4;
                    }
                    i42 = 400 - (GameSparker.sgame.getWidth() + 6 + GameSparker.mstgs.getWidth()) / 2;
                }
                if (GameSparker.sgame.getSelectedIndex() == 5) {
                    if (CarDefine.staction != 0) {
                        GameSparker.tnick.setVisible(false);
                        GameSparker.tpass.setVisible(false);
                        CarDefine.staction = 0;
                    }
                    GameSparker.mstgs.setSize(338);
                    if (bool40 && CarDefine.msloaded != 2) {
                        GameSparker.mstgs.removeAll();
                        GameSparker.mstgs.add(rd, "Loading Stage Maker stages, please wait...");
                        GameSparker.mstgs.select(0);
                        i41 = 2;
                    }
                    i42 = 400 - (GameSparker.sgame.getWidth() + 6 + GameSparker.mstgs.getWidth()) / 2;
                }
                if (!GameSparker.sgame.isShowing()) {
                    GameSparker.sgame.setVisible(true);
                }
                GameSparker.sgame.move(i42, 62);
                /*if (nfmtab == 0) {
                	if (!app.snfm1.isShowing()) {
                		app.snfm1.setVisible(true);
                		if (!bool40 && checkpoints.stage > 0)
                			app.snfm1.select(checkpoints.stage);
                	}
                	app.snfm1.move(i42, 62);
                	if (app.snfm2.isShowing())
                		app.snfm2.setVisible(false);
                	if (app.mstgs.isShowing())
                		app.mstgs.setVisible(false);
                }*/
                //if (nfmtab == 1) {
                /*if (!app.snfm2.isShowing()) {
                	app.snfm2.setVisible(true);
                	if (!bool40 && checkpoints.stage > 10)
                		app.snfm2.select(checkpoints.stage - 10);
                }
                app.snfm2.move(i42, 62);
                if (app.snfm1.isShowing())
                	app.snfm1.setVisible(false);
                if (app.mstgs.isShowing())
                	app.mstgs.setVisible(false);*/
                //}
                /*if (nfmtab == 2 || nfmtab == 3 || nfmtab == 4 || nfmtab == 5) {
                	if (!app.mstgs.isShowing()) {
                		app.mstgs.setVisible(true);
                		if (!bool40)
                			app.mstgs.select(checkpoints.name);
                	}
                	app.mstgs.move(i42, 62);
                	if (app.snfm1.isShowing())
                		app.snfm1.setVisible(false);
                	if (app.snfm2.isShowing())
                		app.snfm2.setVisible(false);
                }*/
                rd.setFont(new Font("Arial", 1, 13));
                ftm = rd.getFontMetrics();
                if (CarDefine.staction == 0 || CarDefine.staction == 6)
                    if (CheckPoints.stage != -3) {
                        String string = "";
                        if (CheckPoints.top20 >= 3) {
                            string = "N#" + CheckPoints.nto + "  ";
                        }
                        if (aflk) {
                            drawcs(132, "" + string + CheckPoints.name, 240, 240, 240, 3);
                            aflk = false;
                        } else {
                            drawcs(132, "" + string + CheckPoints.name, 176, 176, 176, 3);
                            aflk = true;
                        }
                        if (CheckPoints.stage == -2 && CarDefine.staction == 0) {
                            rd.setFont(new Font("Arial", 1, 11));
                            ftm = rd.getFontMetrics();
                            rd.setColor(new Color(255, 176, 85));
                            if (CheckPoints.maker.equals(nickname)) {
                                rd.drawString("Created by You", 70, 115);
                            } else {
                                rd.drawString("Created by :  " + CheckPoints.maker + "", 70, 115);
                            }
                            if (CheckPoints.top20 >= 3) {
                                rd.drawString("Added by :  " + CarDefine.top20adds[CheckPoints.nto - 1] + " Players", 70, 135);
                            }
                        }
                    } else if (removeds != 1) {
                        rd.setFont(new Font("Arial", 1, 13));
                        ftm = rd.getFontMetrics();
                        drawcs(132, "Failed to load stage...", 255, 138, 0, 3);
                        rd.setFont(new Font("Arial", 1, 11));
                        ftm = rd.getFontMetrics();
                        if (nfmtab == 5) {
                            drawcs(155, "Please Test Drive this stage in the Stage Maker to make sure it can be loaded!", 255, 138, 0, 3);
                        }
                        if (nfmtab == 2 || nfmtab == 3 || nfmtab == 4) {
                            drawcs(155, "It could be a connection error, please try again later.", 255, 138, 0, 3);
                        }
                        if (nfmtab == 1 || nfmtab == 0) {
                            drawcs(155, "Will try to load another stage...", 255, 138, 0, 3);
                            //app.repaint();
                            try {
                                Thread.sleep(5000L);
                            } catch (final InterruptedException ignored) {

                            }
                            //if (nfmtab == 0)
                            //	app.snfm1.select(1 + (int) (ThreadLocalRandom.current().nextDouble() * 10.0));
                            //if (nfmtab == 1)
                            //	app.snfm2.select(1 + (int) (ThreadLocalRandom.current().nextDouble() * 17.0));
                        }
                    }
                if (CarDefine.staction == 3) {
                    drawdprom(145, 170);
                    if (CarDefine.reco == -2)
                        if (lfrom == 0) {
                            drawcs(171, "Login to Retrieve your Account Stages", 0, 0, 0, 3);
                        } else {
                            drawcs(171, "Login to add this stage to your account.", 0, 0, 0, 3);
                        }
                    if (CarDefine.reco == -1) {
                        drawcs(171, "Unable to connect to server, try again later!", 0, 8, 0, 3);
                    }
                    if (CarDefine.reco == 1) {
                        drawcs(171, "Sorry.  The Nickname you have entered is incorrect.", 0, 0, 0, 3);
                    }
                    if (CarDefine.reco == 2) {
                        drawcs(171, "Sorry.  The Password you have entered is incorrect.", 0, 0, 0, 3);
                    }
                    if (CarDefine.reco == -167 || CarDefine.reco == -177) {
                        if (CarDefine.reco == -167) {
                            nickname = GameSparker.tnick.getText();
                            backlog = nickname;
                            CarDefine.reco = -177;
                        }
                        drawcs(171, "You are currently using a trial account.", 0, 0, 0, 3);
                    }
                    if (CarDefine.reco == -3 && (tcnt % 3 != 0 || tcnt > 20)) {
                        drawcs(171, "Please enter your Nickname!", 0, 0, 0, 3);
                    }
                    if (CarDefine.reco == -4 && (tcnt % 3 != 0 || tcnt > 20)) {
                        drawcs(171, "Please enter your Password!", 0, 0, 0, 3);
                    }
                    if (!showtf) {
                        GameSparker.tnick.setBackground(new Color(206, 237, 255));
                        if (CarDefine.reco != 1) {
                            if (CarDefine.reco != 2) {
                                GameSparker.tnick.setText(nickname);
                            }
                            GameSparker.tnick.setForeground(new Color(0, 0, 0));
                        } else {
                            GameSparker.tnick.setForeground(new Color(255, 0, 0));
                        }
                        GameSparker.tnick.requestFocus();
                        GameSparker.tpass.setBackground(new Color(206, 237, 255));
                        if (CarDefine.reco != 2) {
                            if (!autolog) {
                                GameSparker.tpass.setText("");
                            }
                            GameSparker.tpass.setForeground(new Color(0, 0, 0));
                        } else {
                            GameSparker.tpass.setForeground(new Color(255, 0, 0));
                        }
                        if (!GameSparker.tnick.getText().equals("") && CarDefine.reco != 1) {
                            GameSparker.tpass.requestFocus();
                        }
                        showtf = true;
                    }
                    rd.drawString("Nickname:", 376 - ftm.stringWidth("Nickname:") - 14, 201);
                    rd.drawString("Password:", 376 - ftm.stringWidth("Password:") - 14, 231);
                    GameSparker.movefieldd(GameSparker.tnick, 376, 185, 129, 23, true);
                    GameSparker.movefieldd(GameSparker.tpass, 376, 215, 129, 23, true);
                    if (tcnt < 30) {
                        tcnt++;
                        if (tcnt == 30) {
                            if (CarDefine.reco == 2) {
                                GameSparker.tpass.setText("");
                            }
                            GameSparker.tnick.setForeground(new Color(0, 0, 0));
                            GameSparker.tpass.setForeground(new Color(0, 0, 0));
                        }
                    }
                    if (CarDefine.reco != -177) {
                        if ((drawcarb(true, null, "       Login       ", 347, 247, i, i39, bool) || control.handb || control.enter) && tcnt > 5) {
                            tcnt = 0;
                            if (!GameSparker.tnick.getText().equals("") && !GameSparker.tpass.getText().equals("")) {
                                autolog = false;
                                GameSparker.tnick.setVisible(false);
                                GameSparker.tpass.setVisible(false);
                                app.requestFocus();
                                CarDefine.staction = 4;
                                CarDefine.sparkstageaction();
                            } else {
                                if (GameSparker.tpass.getText().equals("")) {
                                    CarDefine.reco = -4;
                                }
                                if (GameSparker.tnick.getText().equals("")) {
                                    CarDefine.reco = -3;
                                }
                            }
                        }
                    } else if (drawcarb(true, null, "  Upgrade to have your own stages!  ", 277, 247, i, i39, bool) && cntflock == 0) {
                        GameSparker.editlink(nickname, true);
                        cntflock = 100;
                    }
                    if (drawcarb(true, null, "  Cancel  ", 409, 282, i, i39, bool)) {
                        GameSparker.tnick.setVisible(false);
                        GameSparker.tpass.setVisible(false);
                        app.requestFocus();
                        CarDefine.staction = 0;
                    }
                    if (drawcarb(true, null, "  Register!  ", 316, 282, i, i39, bool)) {
                        if (cntflock == 0) {
                            GameSparker.reglink();
                            cntflock = 100;
                        }
                    } else if (cntflock != 0) {
                        cntflock--;
                    }
                }
                if (CarDefine.staction == 4) {
                    drawdprom(145, 170);
                    drawcs(195, "Logging in to your account...", 0, 0, 0, 3);
                }
                if (CheckPoints.stage == -2 && CarDefine.msloaded == 1 && CheckPoints.top20 < 3 && !GameSparker.openm && drawcarb(true, null, "X", 609, 113, i, i39, bool)) {
                    CarDefine.staction = 6;
                }
                if (CarDefine.staction == -1 && CheckPoints.top20 < 3) {
                    removeds = 0;
                    drawdprom(145, 95);
                    drawcs(175, "Failed to remove stage from your account, try again later.", 0, 0, 0, 3);
                    if (drawcarb(true, null, " OK ", 379, 195, i, i39, bool)) {
                        CarDefine.staction = 0;
                    }
                }
                if (CarDefine.staction == 1) {
                    drawdprom(145, 95);
                    drawcs(195, "Removing stage from your account...", 0, 0, 0, 3);
                    removeds = 1;
                }
                if (CarDefine.staction == 6) {
                    drawdprom(145, 95);
                    drawcs(175, "Remove this stage from your account?", 0, 0, 0, 3);
                    if (drawcarb(true, null, " Yes ", 354, 195, i, i39, bool)) {
                        CarDefine.onstage = GameSparker.mstgs.getSelectedItem();
                        CarDefine.staction = 1;
                        CarDefine.sparkstageaction();
                    }
                    if (drawcarb(true, null, " No ", 408, 195, i, i39, bool)) {
                        CarDefine.staction = 0;
                    }
                }
                if (i41 == 1) {
                    GameSparker.drawms();
                    //app.repaint();
                    CarDefine.loadmystages();
                }
                if (i41 >= 3) {
                    GameSparker.drawms();
                    //app.repaint();
                    CarDefine.loadtop20(i41);
                }
                if (i41 == 2) {
                    GameSparker.drawms();
                    //app.repaint();
                    CarDefine.loadstagemaker();
                }
                if (CheckPoints.stage != -3 && CarDefine.staction == 0 && CheckPoints.top20 < 3) {
                    rd.drawImage(contin[pcontin], 355, 360, null);
                } else {
                    pcontin = 0;
                }
                if (CheckPoints.top20 >= 3 && CarDefine.staction != 3 && CarDefine.staction != 4) {
                    rd.setFont(new Font("Arial", 1, 11));
                    ftm = rd.getFontMetrics();
                    if (dnload == 0 && drawcarb(true, null, " Add to My Stages ", 334, 355, i, i39, bool))
                        if (logged) {
                            CarDefine.onstage = CheckPoints.name;
                            CarDefine.staction = 2;
                            CarDefine.sparkstageaction();
                            dnload = 2;
                        } else {
                            lfrom = 1;
                            CarDefine.staction = 3;
                            showtf = false;
                            tcnt = 0;
                            cntflock = 0;
                            CarDefine.reco = -2;
                        }
                    if (dnload == 2) {
                        drawcs(370, "Adding stage please wait...", 193, 106, 0, 3);
                        if (CarDefine.staction == 0) {
                            dnload = 3;
                        }
                        if (CarDefine.staction == -2) {
                            dnload = 4;
                        }
                        if (CarDefine.staction == -3) {
                            dnload = 5;
                        }
                        if (CarDefine.staction == -1) {
                            dnload = 6;
                        }
                        if (dnload != 2) {
                            CarDefine.staction = 0;
                        }
                    }
                    if (dnload == 3) {
                        drawcs(370, "Stage has been successfully added to your stages!", 193, 106, 0, 3);
                    }
                    if (dnload == 4) {
                        drawcs(370, "You already have this stage!", 193, 106, 0, 3);
                    }
                    if (dnload == 5) {
                        drawcs(370, "Cannot add more then 20 stages to your account!", 193, 106, 0, 3);
                    }
                    if (dnload == 6) {
                        drawcs(370, "Failed to add stage, unknown error, please try again later.", 193, 106, 0, 3);
                    }
                }
                if (testdrive == 0 && CheckPoints.top20 < 3) {
                    if (!GameSparker.gmode.isShowing()) {
                        GameSparker.gmode.select(0);
                        GameSparker.gmode.setVisible(true);
                    }
                    GameSparker.gmode.move(400 - GameSparker.gmode.getWidth() / 2, 395);
                    if (GameSparker.gmode.getSelectedIndex() == 0 && nplayers != 7) {
                        nplayers = 7;
                        fase = 2;
                        app.requestFocus();
                    }
                    if (GameSparker.gmode.getSelectedIndex() == 1 && nplayers != 1) {
                        nplayers = 1;
                        fase = 2;
                        app.requestFocus();
                    }
                } else if (GameSparker.gmode.isShowing()) {
                    GameSparker.gmode.setVisible(false);
                }
                /*if (nfmtab == 0 && app.snfm1.getSelectedIndex() != checkpoints.stage
                		&& app.snfm1.getSelectedIndex() != 0) {
                	checkpoints.stage = app.snfm1.getSelectedIndex();
                	checkpoints.top20 = 0;
                	checkpoints.nto = 0;
                	hidos();
                	fase = 2;
                	app.requestFocus();
                }
                if (nfmtab == 1 && app.snfm2.getSelectedIndex() != checkpoints.stage - 10
                		&& app.snfm2.getSelectedIndex() != 0) {
                	checkpoints.stage = app.snfm2.getSelectedIndex() + 10;
                	checkpoints.top20 = 0;
                	checkpoints.nto = 0;
                	hidos();
                	fase = 2;
                	app.requestFocus();
                }*/
                if ((nfmtab == 2 || nfmtab == 5) && !GameSparker.mstgs.getSelectedItem().equals(CheckPoints.name) && GameSparker.mstgs.getSelectedIndex() != 0) {
                    if (nfmtab == 2) {
                        CheckPoints.stage = -2;
                    } else {
                        CheckPoints.stage = -1;
                    }
                    CheckPoints.name = GameSparker.mstgs.getSelectedItem();
                    CheckPoints.top20 = 0;
                    CheckPoints.nto = 0;
                    hidos();
                    fase = 2;
                    app.requestFocus();
                }
                if (nfmtab == 3 || nfmtab == 4) {
                    String string = "";
                    final int i43 = GameSparker.mstgs.getSelectedItem().indexOf(' ') + 1;
                    if (i43 > 0) {
                        string = GameSparker.mstgs.getSelectedItem().substring(i43);
                    }
                    if (!string.equals("") && !string.equals(CheckPoints.name) && GameSparker.mstgs.getSelectedIndex() != 0) {
                        CheckPoints.stage = -2;
                        CheckPoints.name = string;
                        CheckPoints.top20 = -CarDefine.msloaded;
                        CheckPoints.nto = GameSparker.mstgs.getSelectedIndex();
                        hidos();
                        fase = 2;
                        app.requestFocus();
                    }
                }
            } else {
                rd.setFont(new Font("SansSerif", 1, 13));
                ftm = rd.getFontMetrics();
                if (CheckPoints.stage != nTracks) {
                    final int i44 = CheckPoints.stage;
                    //if (i44 > 10)
                    //	i44 -= 10;
                    drawcs(80, "Stage " + i44 + "  >", 255, 128, 0, 3);
                } else {
                    drawcs(80, "Final Party Stage  >", 255, 128, 0, 3);
                }
                if (aflk) {
                    drawcs(100, "| " + CheckPoints.name + " |", 240, 240, 240, 3);
                    aflk = false;
                } else {
                    drawcs(100, "| " + CheckPoints.name + " |", 176, 176, 176, 3);
                    aflk = true;
                }
                if (CheckPoints.stage != -3) {
                    rd.drawImage(contin[pcontin], 355, 360, null);
                } else {
                    pcontin = 0;
                }
            }
            if (CarDefine.staction == 0) {
                if ((control.handb || control.enter) && CheckPoints.stage != -3 && CheckPoints.top20 < 3) {
                    GameSparker.gmode.setVisible(false);
                    hidos();
                    dudo = 150;
                    fase = 5;
                    control.handb = false;
                    control.enter = false;
                    intertrack.setPaused(true);
                    intertrack.unload();
                }
                if (CheckPoints.stage > 0) {
                    if (control.right) {
                        if (gmode == 0 /*|| gmode == 1 && checkpoints.stage != unlocked[0]*/
                        || gmode == 2 && CheckPoints.stage != unlocked/* + 10*/
                        || CheckPoints.stage == nTracks) {
                            if (CheckPoints.stage != nTracks) {
                                hidos();
                                CheckPoints.stage++;
                                //if (gmode == 1 && checkpoints.stage == 11)
                                //	checkpoints.stage = 27;
                                if (CheckPoints.stage > 10) {
                                    GameSparker.sgame.select(1);
                                    nfmtab = 1;
                                } else {
                                    GameSparker.sgame.select(0);
                                    nfmtab = 0;
                                }
                                fase = 2;
                            }
                        } else {
                            fase = 4;
                            lockcnt = 100;
                        }
                        control.right = false;
                    }
                    if (control.left && CheckPoints.stage != 1/* && (checkpoints.stage != 11 || gmode != 2)*/) {
                        hidos();
                        CheckPoints.stage--;
                        //if (gmode == 1 && checkpoints.stage == 26)
                        //	checkpoints.stage = 10;
                        if (CheckPoints.stage > 10) {
                            GameSparker.sgame.select(1);
                            nfmtab = 1;
                        } else {
                            GameSparker.sgame.select(0);
                            nfmtab = 0;
                        }
                        fase = 2;
                        control.left = false;
                    }
                }
            }
        } else {
            if (aflk) {
                drawcs(132, CheckPoints.name, 240, 240, 240, 3);
                aflk = false;
            } else {
                drawcs(132, CheckPoints.name, 176, 176, 176, 3);
                aflk = true;
            }
            rd.drawImage(contin[pcontin], 355, 360, null);
            if (control.handb || control.enter) {
                dudo = 150;
                fase = 5;
                control.handb = false;
                control.enter = false;
                intertrack.setPaused(true);
                intertrack.unload();
            }
        }
        if (drawcarb(true, null, " Exit X ", 670, 30, i, i39, bool)) {
            fase = 103;
            //fase = 102;
            if (gmode == 0) {
                opselect = 3;
            }
            //if (gmode == 1)
            //	opselect = 0;
            if (gmode == 2) {
                opselect = 1;
            }
            GameSparker.gmode.setVisible(false);
            hidos();
            GameSparker.tnick.setVisible(false);
            GameSparker.tpass.setVisible(false);
            intertrack.setPaused(true);
        }
    }

    static void stat(final Mad mad, final ContO conto, final Control control, final boolean bool) {
        if (holdit) {
            int i = 250;
            if (fase == 7001)
                if (exitm != 4) {
                    exitm = 0;
                    i = 600;
                } else {
                    i = 1200;
                }
            if (exitm != 4 || !lan || im != 0) {
                holdcnt++;
                if ((control.enter || holdcnt > i) && (control.chatup == 0 || fase != 7001)) {
                    fase = -2;
                    control.enter = false;
                }
            } else if (control.enter) {
                control.enter = false;
            }
        } else {
            if (holdcnt != 0) {
                holdcnt = 0;
            }
            if (control.enter || control.exit) {
                if (fase == 0) {
                    if (loadedt) {
                        strack.setPaused(true);
                    }
                    SoundClip.stopAll();
                    fase = -6;
                } else if (starcnt == 0 && control.chatup == 0 && (multion < 2 || !lan))
                    if (exitm == 0) {
                        exitm = 1;
                    } else {
                        exitm = 0;
                    }
                if (control.chatup == 0 || fase != 7001) {
                    control.enter = false;
                }
                control.exit = false;
            }
        }
        if (exitm == 2) {
            fase = -2;
            winner = false;
        }
        if (fase != -2) {
            holdit = false;
            if (CheckPoints.haltall) {
                CheckPoints.haltall = false;
            }
            boolean bool184 = false;
            String string = "";
            String string185 = "";
            if (clangame != 0 && (!mad.dest || multion >= 2)) {
                bool184 = true;
                for (int i = 0; i < nplayers; i++)
                    if (CheckPoints.dested[i] == 0)
                        if (string.equals("")) {
                            string = pclan[i];
                        } else if (!string.equalsIgnoreCase(pclan[i])) {
                            bool184 = false;
                            break;
                        }
            }
            if (clangame > 1) {
                boolean bool186 = false;
                String string187 = "";
                if (bool184) {
                    for (int i = 0; i < nplayers; i++)
                        if (!string.equalsIgnoreCase(pclan[i])) {
                            string185 = pclan[i];
                            break;
                        }
                    if (clangame == 2) {
                        bool186 = true;
                        string187 = "Clan " + string185 + " wasted, nobody won becuase this is a racing only game!";
                    }
                    if (clangame == 4 && !string.equalsIgnoreCase(gaclan)) {
                        bool186 = true;
                        string187 = "Clan " + string185 + " wasted, nobody won becuase " + string + " should have raced in this racing vs wasting game!";
                    }
                    if (clangame == 5 && string.equalsIgnoreCase(gaclan)) {
                        bool186 = true;
                        string187 = "Clan " + string185 + " wasted, nobody won becuase " + string + " should have raced in this racing vs wasting game!";
                    }
                }
                for (int i = 0; i < nplayers; i++)
                    if (CheckPoints.clear[i] == CheckPoints.nlaps * CheckPoints.nsp && CheckPoints.pos[i] == 0) {
                        if (clangame == 3) {
                            bool186 = true;
                            string187 = "" + plnames[i] + " of clan " + pclan[i] + " finished first, nobody won becuase this is a wasting only game!";
                        }
                        if (clangame == 4 && pclan[i].equalsIgnoreCase(gaclan)) {
                            bool186 = true;
                            string187 = "" + plnames[i] + " of clan " + pclan[i] + " finished first, nobody won becuase " + pclan[i] + " should have wasted in this racing vs wasting game!";
                        }
                        if (clangame == 5 && !pclan[i].equalsIgnoreCase(gaclan)) {
                            bool186 = true;
                            string187 = "" + plnames[i] + " of clan " + pclan[i] + " finished first, nobody won becuase " + pclan[i] + " should have wasted in this racing vs wasting game!";
                        }
                    }
                if (bool186) {
                    drawhi(gamefinished, 70);
                    if (aflk) {
                        drawcs(120, string187, 0, 0, 0, 0);
                        aflk = false;
                    } else {
                        drawcs(120, string187, 0, 128, 255, 0);
                        aflk = true;
                    }
                    drawcs(350, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
                    CheckPoints.haltall = true;
                    holdit = true;
                    winner = false;
                }
            }
            if (multion < 2) {
                if (!holdit && (CheckPoints.wasted == nplayers - 1 && nplayers != 1 || bool184)) {
                    drawhi(youwastedem, 70);
                    if (!bool184) {
                        if (aflk) {
                            drawcs(120, "You Won, all cars have been wasted!", 0, 0, 0, 0);
                            aflk = false;
                        } else {
                            drawcs(120, "You Won, all cars have been wasted!", 0, 128, 255, 0);
                            aflk = true;
                        }
                    } else if (aflk) {
                        drawcs(120, "Your clan " + string + " has wasted all the cars!", 0, 0, 0, 0);
                        aflk = false;
                    } else {
                        drawcs(120, "Your clan " + string + " has wasted all the cars!", 0, 128, 255, 0);
                        aflk = true;
                    }
                    drawcs(350, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
                    CheckPoints.haltall = true;
                    holdit = true;
                    winner = true;
                }
                if (!holdit && mad.dest && cntwis[im] == 8) {
                    if (discon != 240) {
                        drawhi(yourwasted, 70);
                    } else {
                        drawhi(disco, 70);
                        stopchat();
                    }
                    boolean bool188 = false;
                    if (lan) {
                        bool188 = true;
                        for (int i = 0; i < nplayers; i++)
                            if (i != im && dested[i] == 0 && !plnames[i].contains("MadBot")) {
                                bool188 = false;
                            }
                    }
                    if (fase == 7001 && nplayers - (CheckPoints.wasted + 1) >= 2 && discon != 240 && !bool188) {
                        exitm = 4;
                    } else {
                        if (exitm == 4) {
                            exitm = 0;
                        }
                        drawcs(350, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
                    }
                    holdit = true;
                    winner = false;
                }
                if (!holdit) {
                    for (int i = 0; i < nplayers; i++)
                        if (CheckPoints.clear[i] == CheckPoints.nlaps * CheckPoints.nsp && CheckPoints.pos[i] == 0) {
                            // it is stopped later on
                            if (clangame == 0) {
                                if (i == im) {
                                    drawhi(youwon, 70);
                                    if (aflk) {
                                        drawcs(120, "You finished first, nice job!", 0, 0, 0, 0);
                                        aflk = false;
                                    } else {
                                        drawcs(120, "You finished first, nice job!", 0, 128, 255, 0);
                                        aflk = true;
                                    }
                                    winner = true;
                                } else {
                                    drawhi(youlost, 70);
                                    if (fase != 7001) {
                                        if (aflk) {
                                            drawcs(120, "" + CarDefine.names[sc[i]] + " finished first, race over!", 0, 0, 0, 0);
                                            aflk = false;
                                        } else {
                                            drawcs(120, "" + CarDefine.names[sc[i]] + " finished first, race over!", 0, 128, 255, 0);
                                            aflk = true;
                                        }
                                    } else if (aflk) {
                                        drawcs(120, "" + plnames[i] + " finished first, race over!", 0, 0, 0, 0);
                                        aflk = false;
                                    } else {
                                        drawcs(120, "" + plnames[i] + " finished first, race over!", 0, 128, 255, 0);
                                        aflk = true;
                                    }
                                    winner = false;
                                }
                            } else if (pclan[i].equalsIgnoreCase(pclan[im])) {
                                drawhi(youwon, 70);
                                if (aflk) {
                                    drawcs(120, "Your clan " + pclan[im] + " finished first, nice job!", 0, 0, 0, 0);
                                    aflk = false;
                                } else {
                                    drawcs(120, "Your clan " + pclan[im] + " finished first, nice job!", 0, 128, 255, 0);
                                    aflk = true;
                                }
                                winner = true;
                            } else {
                                drawhi(youlost, 70);
                                if (aflk) {
                                    drawcs(120, "" + plnames[i] + " of clan " + pclan[i] + " finished first, race over!", 0, 0, 0, 0);
                                    aflk = false;
                                } else {
                                    drawcs(120, "" + plnames[i] + " of clan " + pclan[i] + " finished first, race over!", 0, 128, 255, 0);
                                    aflk = true;
                                }
                                winner = false;
                            }
                            drawcs(350, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
                            CheckPoints.haltall = true;
                            holdit = true;
                        }
                }
            } else {
                if (!holdit && (CheckPoints.wasted >= nplayers - 1 || bool184)) {
                    String string189 = "Someone";
                    if (!bool184) {
                        for (int i = 0; i < nplayers; i++)
                            if (CheckPoints.dested[i] == 0) {
                                string189 = plnames[i];
                            }
                    } else {
                        string189 = "Clan " + string + "";
                    }
                    drawhi(gamefinished, 70);
                    if (aflk) {
                        drawcs(120, "" + string189 + " has wasted all the cars!", 0, 0, 0, 0);
                        aflk = false;
                    } else {
                        drawcs(120, "" + string189 + " has wasted all the cars!", 0, 128, 255, 0);
                        aflk = true;
                    }
                    drawcs(350, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
                    CheckPoints.haltall = true;
                    holdit = true;
                    winner = false;
                }
                if (!holdit) {
                    for (int i = 0; i < nplayers; i++)
                        if (CheckPoints.clear[i] == CheckPoints.nlaps * CheckPoints.nsp && CheckPoints.pos[i] == 0) {
                            drawhi(gamefinished, 70);
                            if (clangame == 0) {
                                if (aflk) {
                                    drawcs(120, "" + plnames[i] + " finished first, race over!", 0, 0, 0, 0);
                                    aflk = false;
                                } else {
                                    drawcs(120, "" + plnames[i] + " finished first, race over!", 0, 128, 255, 0);
                                    aflk = true;
                                }
                            } else if (aflk) {
                                drawcs(120, "Clan " + pclan[i] + " finished first, race over!", 0, 0, 0, 0);
                                aflk = false;
                            } else {
                                drawcs(120, "Clan " + pclan[i] + " finished first, race over!", 0, 128, 255, 0);
                                aflk = true;
                            }
                            drawcs(350, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
                            CheckPoints.haltall = true;
                            holdit = true;
                            winner = false;
                        }
                }
                if (!holdit && discon == 240) {
                    drawhi(gamefinished, 70);
                    if (aflk) {
                        drawcs(120, "Game got disconnected!", 0, 0, 0, 0);
                        aflk = false;
                    } else {
                        drawcs(120, "Game got disconnected!", 0, 128, 255, 0);
                        aflk = true;
                    }
                    drawcs(350, "Press  [ Enter ]  to continue", 0, 0, 0, 0);
                    CheckPoints.haltall = true;
                    holdit = true;
                    winner = false;
                }
                if (!holdit) {
                    rd.drawImage(wgame, 311, 20, null);
                    if (!clanchat) {
                        drawcs(397, "Click any player on the right to follow!", 0, 0, 0, 0);
                        if (!lan) {
                            drawcs(412, "Press [V] to change view.  Press [Enter] to exit.", 0, 0, 0, 0);
                        } else {
                            drawcs(412, "Press [V] to change view.", 0, 0, 0, 0);
                        }
                    }
                }
            }
            if (bool) {
                if (CheckPoints.stage != 10 && multion < 2 && nplayers != 1 && arrace != control.arrace) {
                    arrace = control.arrace;
                    if (multion == 1 && arrace) {
                        control.radar = true;
                    }
                    if (arrace) {
                        wasay = true;
                        say = " Arrow now pointing at >  CARS";
                        if (multion == 1) {
                            say = say + "    Press [S] to toggle Radar!";
                        }
                        tcnt = -5;
                    }
                    if (!arrace) {
                        wasay = false;
                        say = " Arrow now pointing at >  TRACK";
                        if (multion == 1) {
                            say = say + "    Press [S] to toggle Radar!";
                        }
                        tcnt = -5;
                        cntan = 20;
                        alocked = -1;
                        alocked = -1;
                    }
                }
                if (!holdit && fase != -6 && starcnt == 0 && multion < 2 && CheckPoints.stage != 10) {
                    arrow(mad.point, mad.missedcp, arrace);
                    if (!arrace) {
                        if (auscnt == 45 && mad.capcnt == 0 && exitm == 0)
                            if (mad.missedcp > 0) {
                                if (mad.missedcp > 15 && mad.missedcp < 50)
                                    if (flk) {
                                        drawcs(70, "Checkpoint Missed!", 255, 0, 0, 0);
                                    } else {
                                        drawcs(70, "Checkpoint Missed!", 255, 150, 0, 2);
                                    }
                                mad.missedcp++;
                                if (mad.missedcp == 70) {
                                    mad.missedcp = -2;
                                }
                            } else if (mad.mtouch && cntovn < 70) {
                                if (Math.abs(ana) > 100) {
                                    cntan++;
                                } else if (cntan != 0) {
                                    cntan--;
                                }
                                if (cntan > 40) {
                                    cntovn++;
                                    cntan = 40;
                                    if (flk) {
                                        drawcs(70, "Wrong Way!", 255, 150, 0, 0);
                                        flk = false;
                                    } else {
                                        drawcs(70, "Wrong Way!", 255, 0, 0, 2);
                                        flk = true;
                                    }
                                }
                            }
                    } else if (alocked != lalocked) {
                        if (alocked != -1) {
                            wasay = true;
                            say = " Arrow Locked on >  " + plnames[alocked] + "";
                            tcnt = -5;
                        } else {
                            wasay = true;
                            say = "Arrow Unlocked!";
                            tcnt = 10;
                        }
                        lalocked = alocked;
                    }
                }
                if (Medium.darksky) {
                    Color color = new Color(Medium.csky[0], Medium.csky[1], Medium.csky[2]);
                    final float[] fs = new float[3];
                    Color.RGBtoHSB(Medium.csky[0], Medium.csky[1], Medium.csky[2], fs);
                    fs[2] = 0.6F;
                    color = Color.getHSBColor(fs[0], fs[1], fs[2]);
                    rd.setColor(color);
                    rd.fillRect(602, 9, 54, 14);
                    rd.drawLine(601, 10, 601, 21);
                    rd.drawLine(600, 12, 600, 19);
                    rd.fillRect(607, 29, 49, 14);
                    rd.drawLine(606, 30, 606, 41);
                    rd.drawLine(605, 32, 605, 39);
                    rd.fillRect(18, 6, 155, 14);
                    rd.drawLine(17, 7, 17, 18);
                    rd.drawLine(16, 9, 16, 16);
                    rd.drawLine(173, 7, 173, 18);
                    rd.drawLine(174, 9, 174, 16);
                    rd.fillRect(40, 26, 107, 21);
                    rd.drawLine(39, 27, 39, 45);
                    rd.drawLine(38, 29, 38, 43);
                    rd.drawLine(147, 27, 147, 45);
                    rd.drawLine(148, 29, 148, 43);
                }
                rd.drawImage(dmg, 600, 7, null);
                rd.drawImage(pwr, 600, 27, null);
                rd.drawImage(lap, 19, 7, null);
                rd.setColor(new Color(0, 0, 100));
                rd.drawString("" + (mad.nlaps + 1) + " / " + CheckPoints.nlaps + "", 51, 18);
                rd.drawImage(was, 92, 7, null);
                rd.setColor(new Color(0, 0, 100));
                rd.drawString("" + CheckPoints.wasted + " / " + (nplayers - 1) + "", 150, 18);
                rd.drawImage(pos, 42, 27, null);
                rd.drawImage(rank[CheckPoints.pos[mad.im]], 110, 28, null);
                drawstat(CarDefine.maxmag[mad.cn], mad.hitmag, mad.power);
                if (control.radar && CheckPoints.stage != 10) {
                    radarstat(mad, conto);
                }
            }
            if (!holdit) {
                if (starcnt != 0 && starcnt <= 35) {
                    if (starcnt == 35 && !mutes) {
                        three.play();
                    }
                    if (starcnt == 24) {
                        gocnt = 2;
                        if (!mutes) {
                            two.play();
                        }
                    }
                    if (starcnt == 13) {
                        gocnt = 1;
                        if (!mutes) {
                            one.play();
                        }
                    }
                    if (starcnt == 2) {
                        gocnt = 0;
                        if (!mutes) {
                            go.play();
                        }
                    }
                    duds = 0;
                    if (starcnt <= 37 && starcnt > 32) {
                        duds = 1;
                    }
                    if (starcnt <= 26 && starcnt > 21) {
                        duds = 1;
                    }
                    if (starcnt <= 15 && starcnt > 10) {
                        duds = 1;
                    }
                    if (starcnt <= 4) {
                        duds = 2;
                    }
                    if (dudo != -1) {
                        rd.setComposite(AlphaComposite.getInstance(3, 0.3F));
                        rd.drawImage(dude[duds], dudo, 0, null);
                        rd.setComposite(AlphaComposite.getInstance(3, 1.0F));
                    }
                    if (gocnt != 0) {
                        rd.drawImage(cntdn[gocnt], 385, 50, null);
                    } else {
                        rd.drawImage(cntdn[gocnt], 363, 50, null);
                    }
                }
                if (looped != 0 && mad.loop == 2) {
                    looped = 0;
                }
                if (mad.power < 45.0F) {
                    if (tcnt == 30 && auscnt == 45 && mad.mtouch && mad.capcnt == 0 && exitm == 0) {
                        if (looped != 2) {
                            if (pwcnt < 70 || pwcnt < 100 && looped != 0)
                                if (pwflk) {
                                    drawcs(110, "Power low, perform stunt!", 0, 0, 200, 0);
                                    pwflk = false;
                                } else {
                                    drawcs(110, "Power low, perform stunt!", 255, 100, 0, 0);
                                    pwflk = true;
                                }
                        } else if (pwcnt < 100) {
                            String string192 = "";
                            if (multion == 0) {
                                string192 = "  (Press Enter)";
                            }
                            if (pwflk) {
                                drawcs(110, "Please read the Game Instructions!" + string192 + "", 0, 0, 200, 0);
                                pwflk = false;
                            } else {
                                drawcs(110, "Please read the Game Instructions!" + string192 + "", 255, 100, 0, 0);
                                pwflk = true;
                            }
                        }
                        pwcnt++;
                        if (pwcnt == 300) {
                            pwcnt = 0;
                            if (looped != 0) {
                                looped++;
                                if (looped == 4) {
                                    looped = 2;
                                }
                            }
                        }
                    }
                } else if (pwcnt != 0) {
                    pwcnt = 0;
                }
                if (mad.capcnt == 0) {
                    if (tcnt < 30) {
                        if (exitm == 0)
                            if (tflk) {
                                if (!wasay) {
                                    drawcs(105, say, 0, 0, 0, 0);
                                } else {
                                    drawcs(105, say, 0, 0, 0, 0);
                                }
                                tflk = false;
                            } else {
                                if (!wasay) {
                                    drawcs(105, say, 0, 128, 255, 0);
                                } else {
                                    drawcs(105, say, 255, 128, 0, 0);
                                }
                                tflk = true;
                            }
                        tcnt++;
                    } else if (wasay) {
                        wasay = false;
                    }
                    if (auscnt < 45) {
                        if (exitm == 0)
                            if (aflk) {
                                drawcs(85, asay, 98, 176, 255, 0);
                                aflk = false;
                            } else {
                                drawcs(85, asay, 0, 128, 255, 0);
                                aflk = true;
                            }
                        auscnt++;
                    }
                } else if (exitm == 0)
                    if (tflk) {
                        drawcs(110, "Bad Landing!", 0, 0, 200, 0);
                        tflk = false;
                    } else {
                        drawcs(110, "Bad Landing!", 255, 100, 0, 0);
                        tflk = true;
                    }
                if (mad.trcnt == 10) {
                    loop = "";
                    spin = "";
                    asay = "";
                    int i = 0;
                    while (mad.travzy > 225) {
                        mad.travzy -= 360;
                        i++;
                    }
                    while (mad.travzy < -225) {
                        mad.travzy += 360;
                        i--;
                    }
                    if (i == 1) {
                        loop = "Forward loop";
                    }
                    if (i == 2) {
                        loop = "double Forward";
                    }
                    if (i == 3) {
                        loop = "triple Forward";
                    }
                    if (i >= 4) {
                        loop = "massive Forward looping";
                    }
                    if (i == -1) {
                        loop = "Backloop";
                    }
                    if (i == -2) {
                        loop = "double Back";
                    }
                    if (i == -3) {
                        loop = "triple Back";
                    }
                    if (i <= -4) {
                        loop = "massive Back looping";
                    }
                    if (i == 0)
                        if (mad.ftab && mad.btab) {
                            loop = "Tabletop and reversed Tabletop";
                        } else if (mad.ftab || mad.btab) {
                            loop = "Tabletop";
                        }
                    if (i > 0 && mad.btab) {
                        loop = "Hanged " + loop;
                    }
                    if (i < 0 && mad.ftab) {
                        loop = "Hanged " + loop;
                    }
                    if (!Objects.equals(loop, "")) {
                        asay = asay + " " + loop;
                    }
                    i = 0;
                    mad.travxy = Math.abs(mad.travxy);
                    while (mad.travxy > 270) {
                        mad.travxy -= 360;
                        i++;
                    }
                    if (i == 0 && mad.rtab)
                        if (Objects.equals(loop, "")) {
                            spin = "Tabletop";
                        } else {
                            spin = "Flipside";
                        }
                    if (i == 1) {
                        spin = "Rollspin";
                    }
                    if (i == 2) {
                        spin = "double Rollspin";
                    }
                    if (i == 3) {
                        spin = "triple Rollspin";
                    }
                    if (i >= 4) {
                        spin = "massive Roll spinning";
                    }
                    i = 0;
                    boolean bool194 = false;
                    mad.travxz = Math.abs(mad.travxz);
                    while (mad.travxz > 90) {
                        mad.travxz -= 180;
                        i += 180;
                        if (i > 900) {
                            i = 900;
                            bool194 = true;
                        }
                    }
                    if (i != 0) {
                        if (Objects.equals(loop, "") && Objects.equals(spin, "")) {
                            asay = asay + " " + i;
                            if (bool194) {
                                asay = asay + " and beyond";
                            }
                        } else {
                            if (!Objects.equals(spin, ""))
                                if (Objects.equals(loop, "")) {
                                    asay = asay + " " + spin;
                                } else {
                                    asay = asay + " with " + spin;
                                }
                            asay = asay + " by " + i;
                            if (bool194) {
                                asay = asay + " and beyond";
                            }
                        }
                    } else if (!Objects.equals(spin, ""))
                        if (Objects.equals(loop, "")) {
                            asay = asay + " " + spin;
                        } else {
                            asay = asay + " by " + spin;
                        }
                    if (!Objects.equals(asay, "")) {
                        auscnt -= 15;
                    }
                    if (!Objects.equals(loop, "")) {
                        auscnt -= 25;
                    }
                    if (!Objects.equals(spin, "")) {
                        auscnt -= 25;
                    }
                    if (i != 0) {
                        auscnt -= 25;
                    }
                    if (auscnt < 45) {
                        if (!mutes) {
                            powerup.play();
                        }
                        if (auscnt < -20) {
                            auscnt = -20;
                        }
                        int i205 = 0;
                        if (mad.powerup > 20.0F) {
                            i205 = 1;
                        }
                        if (mad.powerup > 40.0F) {
                            i205 = 2;
                        }
                        if (mad.powerup > 150.0F) {
                            i205 = 3;
                        }
                        if (mad.surfer) {
                            asay = " " + adj[4][(int) (Medium.random() * 3.0F)] + asay;
                        }
                        if (i205 != 3) {
                            asay = "" + adj[i205][(int) (Medium.random() * 3.0F)] + asay + exlm[i205];
                        } else {
                            asay = adj[i205][(int) (Medium.random() * 3.0F)];
                        }
                        if (!wasay) {
                            tcnt = auscnt;
                            if (mad.power != 98.0F) {
                                say = "Power Up " + (int) (100.0F * mad.powerup / 98.0F) + "%";
                            } else {
                                say = "Power To The MAX";
                            }
                            skidup = !skidup;
                        }
                    }
                }
                if (mad.newcar) {
                    if (!wasay) {
                        say = "Car Fixed";
                        tcnt = 0;
                    }
                    crashup = !crashup;
                }
                for (int i = 0; i < nplayers; i++)
                    if (dested[i] != CheckPoints.dested[i] && i != im) {
                        dested[i] = CheckPoints.dested[i];
                        if (fase != 7001) {
                            if (dested[i] == 1) {
                                wasay = true;
                                say = "" + CarDefine.names[sc[i]] + " has been wasted!";
                                tcnt = -15;
                            }
                            if (dested[i] == 2) {
                                wasay = true;
                                say = "You wasted " + CarDefine.names[sc[i]] + "!";
                                tcnt = -15;
                            }
                        } else {
                            if (dested[i] == 1) {
                                wasay = true;
                                say = "" + plnames[i] + " has been wasted!";
                                tcnt = -15;
                            }
                            if (dested[i] == 2) {
                                wasay = true;
                                if (multion < 2) {
                                    say = "You wasted " + plnames[i] + "!";
                                } else {
                                    say = "" + plnames[im] + " wasted " + plnames[i] + "!";
                                }
                                tcnt = -15;
                            }
                            if (dested[i] == 3) {
                                wasay = true;
                                say = "" + plnames[i] + " has been wasted! (Disconnected)";
                                tcnt = -15;
                            }
                        }
                    }
                if (multion >= 2 && alocked != lalocked) {
                    if (alocked != -1) {
                        wasay = false;
                        say = "Now following " + plnames[alocked] + "!";
                        tcnt = -15;
                    }
                    lalocked = alocked;
                    clear = mad.clear;
                }
                if (clear != mad.clear && mad.clear != 0) {
                    if (!wasay) {
                        say = "Checkpoint!";
                        tcnt = 15;
                    }
                    clear = mad.clear;
                    if (!mutes) {
                        checkpoint.play();
                    }
                    cntovn = 0;
                    if (cntan != 0) {
                        cntan = 0;
                    }
                }
            }
        }
        if (Medium.lightn != -1) {
            //final int i = strack.sClip.stream.available();
            Medium.lton = false;
            //if (i <= 6380001 && i > 5368001)
            //	m.lton = true;
            //if (i <= 2992001 && i > 1320001)
            //	m.lton = true;
        }
    }

    static private void stopairs() {
        for (int i = 0; i < 6; i++) {
            air[i].stop();
        }
    }

    static void stopallnow() {
        if (runner != null) {
            runner.interrupt();
            runner = null;
        }
        runtyp = 0;
        if (loadedt) {
            strack.unload();
            strack = null;
            loadedt = false;
        }
        for (int i = 0; i < 5; i++) {
            for (int i19 = 0; i19 < 5; i19++) {
                if (engs[i][i19] != null) {
                    engs[i][i19].stop();
                }
                engs[i][i19] = null;
            }
        }
        for (int i = 0; i < 6; i++) {
            if (air[i] != null) {
                air[i].stop();
            }
            air[i] = null;
        }
        wastd.stop();
        if (intertrack != null) {
            intertrack.unload();
        }
        intertrack = null;
    }

    static void stopchat() {
        clanchat = false;
        clangame = 0;
        if (runtyp == -101) {
            runtyp = 0;
            try {
                socket.close();
                socket = null;
                din.close();
                din = null;
                dout.close();
                dout = null;
            } catch (final Exception ignored) {

            }
        }
    }

    static void stoploading() {
        loading();
        //app.repaint();
        runtyp = 0;
    }

    static void trackbg(final boolean bool) {
        int i = 0;
        trkl++;
        if (trkl > trklim) {
            i = 1;
            trklim = (int) (ThreadLocalRandom.current().nextDouble() * 40.0);
            trkl = 0;
        }
        if (bool) {
            i = 0;
        }
        for (int i25 = 0; i25 < 2; i25++) {
            rd.drawImage(trackbg[i], trkx[i25], 25, null);
            trkx[i25] -= 10;
            if (trkx[i25] <= -605) {
                trkx[i25] = 735;
            }
        }
        rd.setColor(new Color(0, 0, 0));
        rd.fillRect(0, 0, 65, 450);
        rd.fillRect(735, 0, 65, 450);
        rd.fillRect(65, 0, 670, 25);
        rd.fillRect(65, 425, 670, 25);
    }

    static void waitenter() {
        if (forstart < 690) {
            rd.setFont(new Font("Arial", 1, 13));
            ftm = rd.getFontMetrics();
            drawcs(70, "Waiting for all players to finish loading!", 0, 0, 0, 0);
            if (forstart <= 640) {
                drawcs(90, "" + (640 - forstart) / 32 + "", 0, 0, 0, 0);
            } else {
                drawcs(90, "Your connection to game may have been lost...", 0, 0, 0, 0);
            }
            rd.setFont(new Font("Arial", 1, 11));
            ftm = rd.getFontMetrics();
            if (tflk) {
                drawcs(125, "Get Ready!", 0, 0, 0, 0);
                tflk = false;
            } else {
                drawcs(125, "Get Ready!", 0, 128, 255, 0);
                tflk = true;
            }
        }
        forstart++;
        if (forstart == 700) {
            fase = -2;
            winner = false;
        }
    }

    static private int xs(final int i, int i279) {
        if (i279 < 50) {
            i279 = 50;
        }
        return (i279 - Medium.focusPoint) * (Medium.cx - i) / i279 + i;
    }

    static private int ys(final int i, int i280) {
        if (i280 < 50) {
            i280 = 50;
        }
        return (i280 - Medium.focusPoint) * (Medium.cy - i) / i280 + i;
    }
}

}